
AVR32 Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000030f4  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80005200  80005200  00005600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000158  80005400  80005400  00005800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000005d0  00000008  80005558  00005c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000700  000005d8  000005d8  00000000  2**2
                  ALLOC
  8 .heap         0000e328  00000cd8  00000cd8  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000b38  00000000  00000000  00006208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001908  00000000  00000000  00006d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000227d2  00000000  00000000  00008648  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e71  00000000  00000000  0002ae1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c74d  00000000  00000000  0002ec8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ab0  00000000  00000000  0003b3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007a5e  00000000  00000000  0003ce88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00004abe  00000000  00000000  000448e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 0104ac01  00000000  00000000  000493a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000bd8  00000000  00000000  01093fa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ee 78 	sub	pc,pc,-4488

Disassembly of section .text:

80002004 <board_init>:
#define TEST_C AVR32_PIN_PA27
#define RESPONSE_C AVR32_PIN_PB00


void board_init (void)
{
80002004:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002006:	30 3b       	mov	r11,3
80002008:	32 3c       	mov	r12,35
8000200a:	f0 1f 00 21 	mcall	8000208c <board_init+0x88>
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	30 3b       	mov	r11,3
80002010:	34 9c       	mov	r12,73
80002012:	f0 1f 00 1f 	mcall	8000208c <board_init+0x88>
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	30 3b       	mov	r11,3
80002018:	32 2c       	mov	r12,34
8000201a:	f0 1f 00 1d 	mcall	8000208c <board_init+0x88>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 3b       	mov	r11,3
80002020:	32 6c       	mov	r12,38
80002022:	f0 1f 00 1b 	mcall	8000208c <board_init+0x88>
	
	gpio_configure_pin (AVR32_PIN_PA31, GPIO_DIR_INPUT);
80002026:	30 0b       	mov	r11,0
80002028:	31 fc       	mov	r12,31
8000202a:	f0 1f 00 19 	mcall	8000208c <board_init+0x88>
	gpio_enable_pin_pull_up(AVR32_PIN_PA31);
8000202e:	31 fc       	mov	r12,31
80002030:	f0 1f 00 18 	mcall	80002090 <board_init+0x8c>
	gpio_enable_pin_interrupt(AVR32_PIN_PA31, GPIO_FALLING_EDGE);
80002034:	30 2b       	mov	r11,2
80002036:	31 fc       	mov	r12,31
80002038:	f0 1f 00 17 	mcall	80002094 <board_init+0x90>
	gpio_configure_pin (AVR32_PIN_PA29, GPIO_DIR_INPUT);
8000203c:	30 0b       	mov	r11,0
8000203e:	31 dc       	mov	r12,29
80002040:	f0 1f 00 13 	mcall	8000208c <board_init+0x88>
	gpio_enable_pin_pull_up(AVR32_PIN_PA29);
80002044:	31 dc       	mov	r12,29
80002046:	f0 1f 00 13 	mcall	80002090 <board_init+0x8c>
	gpio_enable_pin_interrupt(AVR32_PIN_PA29, GPIO_FALLING_EDGE);
8000204a:	30 2b       	mov	r11,2
8000204c:	31 dc       	mov	r12,29
8000204e:	f0 1f 00 12 	mcall	80002094 <board_init+0x90>
	gpio_configure_pin (AVR32_PIN_PA27, GPIO_DIR_INPUT);
80002052:	30 0b       	mov	r11,0
80002054:	31 bc       	mov	r12,27
80002056:	f0 1f 00 0e 	mcall	8000208c <board_init+0x88>
	gpio_enable_pin_pull_up(AVR32_PIN_PA27);
8000205a:	31 bc       	mov	r12,27
8000205c:	f0 1f 00 0d 	mcall	80002090 <board_init+0x8c>
	gpio_enable_pin_interrupt(AVR32_PIN_PA27, GPIO_FALLING_EDGE);
80002060:	30 2b       	mov	r11,2
80002062:	31 bc       	mov	r12,27
80002064:	f0 1f 00 0c 	mcall	80002094 <board_init+0x90>
	
	gpio_configure_pin (AVR32_PIN_PA30, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002068:	30 3b       	mov	r11,3
8000206a:	31 ec       	mov	r12,30
8000206c:	f0 1f 00 08 	mcall	8000208c <board_init+0x88>
	gpio_configure_pin (AVR32_PIN_PA28, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002070:	30 3b       	mov	r11,3
80002072:	31 cc       	mov	r12,28
80002074:	f0 1f 00 06 	mcall	8000208c <board_init+0x88>
	gpio_configure_pin (AVR32_PIN_PB00, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002078:	30 3b       	mov	r11,3
8000207a:	32 0c       	mov	r12,32
8000207c:	f0 1f 00 04 	mcall	8000208c <board_init+0x88>

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
80002080:	30 4b       	mov	r11,4
80002082:	32 1c       	mov	r12,33
80002084:	f0 1f 00 02 	mcall	8000208c <board_init+0x88>
     * the platform Xplained board has configured basic clock settings,
     * GPIO pin mapping, interrupt controller options, etc.
     */
    sensor_board_init ();
#endif
}
80002088:	d8 02       	popm	pc
8000208a:	00 00       	add	r0,r0
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	20 e2       	sub	r2,14
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	20 cc       	sub	r12,12
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	21 dc       	sub	r12,29

80002098 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002098:	fe 68 14 00 	mov	r8,-125952
8000209c:	70 09       	ld.w	r9,r8[0x0]
  u_avr32_flashc_fcr.FCR.fws = wait_state;
8000209e:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800020a2:	91 09       	st.w	r8[0x0],r9
}
800020a4:	5e fc       	retal	r12
800020a6:	d7 03       	nop

800020a8 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800020a8:	d4 01       	pushm	lr
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
800020aa:	e0 68 50 ff 	mov	r8,20735
800020ae:	ea 18 02 25 	orh	r8,0x225
800020b2:	10 3c       	cp.w	r12,r8
800020b4:	e0 88 00 06 	brls	800020c0 <flashc_set_bus_freq+0x18>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
800020b8:	30 1c       	mov	r12,1
800020ba:	f0 1f 00 04 	mcall	800020c8 <flashc_set_bus_freq+0x20>
800020be:	d8 02       	popm	pc
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
800020c0:	30 0c       	mov	r12,0
800020c2:	f0 1f 00 02 	mcall	800020c8 <flashc_set_bus_freq+0x20>
800020c6:	d8 02       	popm	pc
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 98       	sub	r8,9

800020cc <gpio_enable_pin_pull_up>:
#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800020cc:	f8 08 16 05 	lsr	r8,r12,0x5
800020d0:	a9 68       	lsl	r8,0x8
800020d2:	e0 28 f0 00 	sub	r8,61440
  gpio_port->puers = 1 << (pin & 0x1F);
800020d6:	30 19       	mov	r9,1
800020d8:	f2 0c 09 4c 	lsl	r12,r9,r12
800020dc:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
800020e0:	5e fc       	retal	r12

800020e2 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
800020e2:	f8 08 16 05 	lsr	r8,r12,0x5
800020e6:	a9 68       	lsl	r8,0x8
800020e8:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
800020ec:	16 99       	mov	r9,r11
800020ee:	e2 19 00 04 	andl	r9,0x4,COH
800020f2:	c0 70       	breq	80002100 <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
800020f4:	30 19       	mov	r9,1
800020f6:	f2 0c 09 49 	lsl	r9,r9,r12
800020fa:	f1 49 00 74 	st.w	r8[116],r9
800020fe:	c0 68       	rjmp	8000210a <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80002100:	30 19       	mov	r9,1
80002102:	f2 0c 09 49 	lsl	r9,r9,r12
80002106:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
8000210a:	16 99       	mov	r9,r11
8000210c:	e2 19 00 80 	andl	r9,0x80,COH
80002110:	c2 40       	breq	80002158 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
80002112:	16 99       	mov	r9,r11
80002114:	e2 19 01 80 	andl	r9,0x180,COH
80002118:	c0 90       	breq	8000212a <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000211a:	30 19       	mov	r9,1
8000211c:	f2 0c 09 49 	lsl	r9,r9,r12
80002120:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002124:	f1 49 00 b8 	st.w	r8[184],r9
80002128:	c1 88       	rjmp	80002158 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
8000212a:	16 99       	mov	r9,r11
8000212c:	e2 19 02 80 	andl	r9,0x280,COH
80002130:	c0 90       	breq	80002142 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80002132:	30 19       	mov	r9,1
80002134:	f2 0c 09 49 	lsl	r9,r9,r12
80002138:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000213c:	f1 49 00 b8 	st.w	r8[184],r9
80002140:	c0 c8       	rjmp	80002158 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
80002142:	16 99       	mov	r9,r11
80002144:	e2 19 03 80 	andl	r9,0x380,COH
80002148:	c0 80       	breq	80002158 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 49 	lsl	r9,r9,r12
80002150:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80002154:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80002158:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000215c:	c1 50       	breq	80002186 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
8000215e:	e2 1b 00 02 	andl	r11,0x2,COH
80002162:	c0 70       	breq	80002170 <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80002164:	30 19       	mov	r9,1
80002166:	f2 0c 09 49 	lsl	r9,r9,r12
8000216a:	f1 49 00 54 	st.w	r8[84],r9
8000216e:	c0 68       	rjmp	8000217a <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80002170:	30 19       	mov	r9,1
80002172:	f2 0c 09 49 	lsl	r9,r9,r12
80002176:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
8000217a:	30 19       	mov	r9,1
8000217c:	f2 0c 09 49 	lsl	r9,r9,r12
80002180:	f1 49 00 44 	st.w	r8[68],r9
80002184:	c0 68       	rjmp	80002190 <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80002186:	30 19       	mov	r9,1
80002188:	f2 0c 09 49 	lsl	r9,r9,r12
8000218c:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002190:	30 19       	mov	r9,1
80002192:	f2 0c 09 4c 	lsl	r12,r9,r12
80002196:	91 1c       	st.w	r8[0x4],r12
}
80002198:	5e fc       	retal	r12

8000219a <gpio_set_pin_high>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000219a:	f8 08 16 05 	lsr	r8,r12,0x5
8000219e:	a9 68       	lsl	r8,0x8
800021a0:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800021a4:	30 19       	mov	r9,1
800021a6:	f2 0c 09 4c 	lsl	r12,r9,r12
800021aa:	f1 4c 00 54 	st.w	r8[84],r12
}
800021ae:	5e fc       	retal	r12

800021b0 <gpio_set_pin_low>:
}


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021b0:	f8 08 16 05 	lsr	r8,r12,0x5
800021b4:	a9 68       	lsl	r8,0x8
800021b6:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800021ba:	30 19       	mov	r9,1
800021bc:	f2 0c 09 4c 	lsl	r12,r9,r12
800021c0:	f1 4c 00 58 	st.w	r8[88],r12
}
800021c4:	5e fc       	retal	r12

800021c6 <gpio_toggle_pin>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_toggle_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021c6:	f8 08 16 05 	lsr	r8,r12,0x5
800021ca:	a9 68       	lsl	r8,0x8
800021cc:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800021d0:	30 19       	mov	r9,1
800021d2:	f2 0c 09 4c 	lsl	r12,r9,r12
800021d6:	f1 4c 00 5c 	st.w	r8[92],r12
}
800021da:	5e fc       	retal	r12

800021dc <gpio_enable_pin_interrupt>:
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
800021dc:	f8 08 16 05 	lsr	r8,r12,0x5
800021e0:	a9 68       	lsl	r8,0x8
800021e2:	e0 28 f0 00 	sub	r8,61440

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
800021e6:	30 19       	mov	r9,1
800021e8:	f2 0c 09 4c 	lsl	r12,r9,r12
800021ec:	f1 4c 00 c4 	st.w	r8[196],r12
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  
  // Configure the edge detector.
  switch (mode)
800021f0:	12 3b       	cp.w	r11,r9
800021f2:	c0 a0       	breq	80002206 <gpio_enable_pin_interrupt+0x2a>
800021f4:	c0 43       	brcs	800021fc <gpio_enable_pin_interrupt+0x20>
800021f6:	58 2b       	cp.w	r11,2
800021f8:	c1 11       	brne	8000221a <gpio_enable_pin_interrupt+0x3e>
800021fa:	c0 b8       	rjmp	80002210 <gpio_enable_pin_interrupt+0x34>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800021fc:	f1 4c 00 a8 	st.w	r8[168],r12
    gpio_port->imr1c = 1 << (pin & 0x1F);
80002200:	f1 4c 00 b8 	st.w	r8[184],r12
80002204:	c0 c8       	rjmp	8000221c <gpio_enable_pin_interrupt+0x40>
    break;

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
80002206:	f1 4c 00 a4 	st.w	r8[164],r12
    gpio_port->imr1c = 1 << (pin & 0x1F);
8000220a:	f1 4c 00 b8 	st.w	r8[184],r12
8000220e:	c0 78       	rjmp	8000221c <gpio_enable_pin_interrupt+0x40>
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80002210:	f1 4c 00 a8 	st.w	r8[168],r12
    gpio_port->imr1s = 1 << (pin & 0x1F);
80002214:	f1 4c 00 b4 	st.w	r8[180],r12
80002218:	c0 28       	rjmp	8000221c <gpio_enable_pin_interrupt+0x40>
8000221a:	5e ff       	retal	1
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
8000221c:	f1 4c 00 94 	st.w	r8[148],r12
80002220:	5e fd       	retal	0

80002222 <gpio_get_pin_interrupt_flag>:
}


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002222:	f8 08 16 05 	lsr	r8,r12,0x5
80002226:	a9 68       	lsl	r8,0x8
80002228:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
8000222c:	f0 f8 00 d0 	ld.w	r8,r8[208]
80002230:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002234:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002238:	5e fc       	retal	r12

8000223a <gpio_clear_pin_interrupt_flag>:


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000223a:	f8 08 16 05 	lsr	r8,r12,0x5
8000223e:	a9 68       	lsl	r8,0x8
80002240:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
80002244:	30 19       	mov	r9,1
80002246:	f2 0c 09 4c 	lsl	r12,r9,r12
8000224a:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
8000224e:	5e fc       	retal	r12

80002250 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002250:	c0 08       	rjmp	80002250 <_unhandled_interrupt>
80002252:	d7 03       	nop

80002254 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002254:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002258:	48 99       	lddpc	r9,8000227c <INTC_register_interrupt+0x28>
8000225a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000225e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002262:	72 19       	ld.w	r9,r9[0x4]
80002264:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002268:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000226c:	48 59       	lddpc	r9,80002280 <INTC_register_interrupt+0x2c>
8000226e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002272:	fe 79 08 00 	mov	r9,-63488
80002276:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
8000227a:	5e fc       	retal	r12
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	54 00       	stdsp	sp[0x100],r0
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	53 3c       	stdsp	sp[0xcc],r12

80002284 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
80002284:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002286:	49 18       	lddpc	r8,800022c8 <INTC_init_interrupts+0x44>
80002288:	e3 b8 00 01 	mtsr	0x4,r8
8000228c:	49 0e       	lddpc	lr,800022cc <INTC_init_interrupts+0x48>
8000228e:	30 07       	mov	r7,0
80002290:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002292:	49 0c       	lddpc	r12,800022d0 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002294:	49 08       	lddpc	r8,800022d4 <INTC_init_interrupts+0x50>
80002296:	70 05       	ld.w	r5,r8[0x0]
80002298:	fe 76 08 00 	mov	r6,-63488
8000229c:	c1 08       	rjmp	800022bc <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000229e:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800022a0:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800022a2:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800022a4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800022a8:	2f f8       	sub	r8,-1
800022aa:	10 3a       	cp.w	r10,r8
800022ac:	fe 9b ff fc 	brhi	800022a4 <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800022b0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800022b4:	2f f7       	sub	r7,-1
800022b6:	2f 8e       	sub	lr,-8
800022b8:	59 e7       	cp.w	r7,30
800022ba:	c0 50       	breq	800022c4 <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800022bc:	7c 08       	ld.w	r8,lr[0x0]
800022be:	58 08       	cp.w	r8,0
800022c0:	ce f1       	brne	8000229e <INTC_init_interrupts+0x1a>
800022c2:	cf 7b       	rjmp	800022b0 <INTC_init_interrupts+0x2c>
800022c4:	d8 22       	popm	r4-r7,pc
800022c6:	00 00       	add	r0,r0
800022c8:	80 00       	ld.sh	r0,r0[0x0]
800022ca:	52 00       	stdsp	sp[0x80],r0
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	54 00       	stdsp	sp[0x100],r0
800022d0:	80 00       	ld.sh	r0,r0[0x0]
800022d2:	22 50       	sub	r0,37
800022d4:	80 00       	ld.sh	r0,r0[0x0]
800022d6:	53 3c       	stdsp	sp[0xcc],r12

800022d8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800022d8:	fe 78 08 00 	mov	r8,-63488
800022dc:	e0 69 00 83 	mov	r9,131
800022e0:	f2 0c 01 0c 	sub	r12,r9,r12
800022e4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800022e8:	f2 ca ff c0 	sub	r10,r9,-64
800022ec:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800022f0:	58 08       	cp.w	r8,0
800022f2:	c0 21       	brne	800022f6 <_get_interrupt_handler+0x1e>
800022f4:	5e fd       	retal	0
800022f6:	f0 08 12 00 	clz	r8,r8
800022fa:	48 5a       	lddpc	r10,8000230c <_get_interrupt_handler+0x34>
800022fc:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002300:	f0 08 11 1f 	rsub	r8,r8,31
80002304:	72 19       	ld.w	r9,r9[0x4]
80002306:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
8000230a:	5e fc       	retal	r12
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	54 00       	stdsp	sp[0x100],r0

80002310 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
80002310:	5e ff       	retal	1

80002312 <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
80002312:	5e fd       	retal	0

80002314 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80002314:	fe 68 00 00 	mov	r8,-131072
80002318:	70 09       	ld.w	r9,r8[0x0]
8000231a:	a7 d9       	cbr	r9,0x7
8000231c:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
8000231e:	70 09       	ld.w	r9,r8[0x0]
80002320:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002324:	e0 19 ff 80 	andl	r9,0xff80
80002328:	f9 e9 10 09 	or	r9,r12,r9
8000232c:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000232e:	70 09       	ld.w	r9,r8[0x0]
80002330:	a7 b9       	sbr	r9,0x7
80002332:	91 09       	st.w	r8[0x0],r9
}
80002334:	5e fc       	retal	r12

80002336 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
80002336:	fe 68 00 00 	mov	r8,-131072
8000233a:	70 0c       	ld.w	r12,r8[0x0]
}
8000233c:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002340:	5e fc       	retal	r12

80002342 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
80002342:	fe 68 00 00 	mov	r8,-131072
80002346:	70 8c       	ld.w	r12,r8[0x20]
}
80002348:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
8000234c:	5e fc       	retal	r12

8000234e <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
8000234e:	fe 68 00 00 	mov	r8,-131072
80002352:	70 8c       	ld.w	r12,r8[0x20]
}
80002354:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80002358:	5e fc       	retal	r12
8000235a:	d7 03       	nop

8000235c <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
8000235c:	48 28       	lddpc	r8,80002364 <udd_set_setup_payload+0x8>
8000235e:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80002360:	b0 6b       	st.h	r8[0xc],r11
}
80002362:	5e fc       	retal	r12
80002364:	00 00       	add	r0,r0
80002366:	0c a4       	st.w	r6++,r4

80002368 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80002368:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000236c:	a3 68       	lsl	r8,0x2
8000236e:	e0 38 fe 40 	sub	r8,130624
80002372:	70 0c       	ld.w	r12,r8[0x0]
}
80002374:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002378:	5e fc       	retal	r12
8000237a:	d7 03       	nop

8000237c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000237c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
80002380:	30 38       	mov	r8,3
80002382:	f0 0c 18 00 	cp.b	r12,r8
80002386:	e0 8b 00 35 	brhi	800023f0 <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
8000238a:	18 99       	mov	r9,r12
8000238c:	f8 c8 00 01 	sub	r8,r12,1
80002390:	a5 68       	lsl	r8,0x4
80002392:	49 9a       	lddpc	r10,800023f4 <udd_ep_set_halt+0x78>
80002394:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
80002398:	70 0a       	ld.w	r10,r8[0x0]
8000239a:	58 0a       	cp.w	r10,0
8000239c:	c2 a5       	brlt	800023f0 <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
8000239e:	a3 69       	lsl	r9,0x2
800023a0:	fe 6b 01 30 	mov	r11,-130768
800023a4:	f2 0b 00 0a 	add	r10,r9,r11
800023a8:	74 0a       	ld.w	r10,r10[0x0]
800023aa:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
800023ae:	c1 10       	breq	800023d0 <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
800023b0:	70 0b       	ld.w	r11,r8[0x0]
800023b2:	30 1a       	mov	r10,1
800023b4:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
800023b8:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
800023ba:	e0 39 fe 10 	sub	r9,130576
800023be:	e0 68 10 00 	mov	r8,4096
800023c2:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
800023c4:	f0 0c 09 4c 	lsl	r12,r8,r12
800023c8:	fe 69 00 00 	mov	r9,-131072
800023cc:	93 6c       	st.w	r9[0x18],r12
800023ce:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
800023d0:	fe 6a 01 00 	mov	r10,-130816
800023d4:	f2 0a 00 08 	add	r8,r9,r10
800023d8:	70 0a       	ld.w	r10,r8[0x0]
800023da:	a9 da       	cbr	r10,0x9
800023dc:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
800023de:	e0 39 fe 10 	sub	r9,130576
800023e2:	e8 68 00 00 	mov	r8,524288
800023e6:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
800023e8:	e4 68 00 00 	mov	r8,262144
800023ec:	93 08       	st.w	r9[0x0],r8
800023ee:	5e ff       	retal	1
800023f0:	5e fd       	retal	0
800023f2:	00 00       	add	r0,r0
800023f4:	00 00       	add	r0,r0
800023f6:	06 e8       	st.h	--r3,r8

800023f8 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800023f8:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800023fa:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800023fe:	30 38       	mov	r8,3
80002400:	f0 0c 18 00 	cp.b	r12,r8
80002404:	e0 88 00 03 	brls	8000240a <udd_ep_clear_halt+0x12>
80002408:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
8000240a:	f8 c8 00 01 	sub	r8,r12,1
8000240e:	a5 68       	lsl	r8,0x4
80002410:	49 69       	lddpc	r9,80002468 <udd_ep_clear_halt+0x70>
80002412:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
80002416:	a3 6c       	lsl	r12,0x2
80002418:	fe 6a 01 c0 	mov	r10,-130624
8000241c:	f8 0a 00 09 	add	r9,r12,r10
80002420:	72 09       	ld.w	r9,r9[0x0]
80002422:	e6 19 00 08 	andh	r9,0x8,COH
80002426:	c0 51       	brne	80002430 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
80002428:	70 09       	ld.w	r9,r8[0x0]
8000242a:	e6 19 10 00 	andh	r9,0x1000,COH
8000242e:	c1 c0       	breq	80002466 <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
80002430:	70 09       	ld.w	r9,r8[0x0]
80002432:	30 0a       	mov	r10,0
80002434:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
80002438:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
8000243a:	fe 6a 02 20 	mov	r10,-130528
8000243e:	f8 0a 00 09 	add	r9,r12,r10
80002442:	e8 6a 00 00 	mov	r10,524288
80002446:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
80002448:	e0 3c ff 00 	sub	r12,130816
8000244c:	78 09       	ld.w	r9,r12[0x0]
8000244e:	a9 b9       	sbr	r9,0x9
80002450:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80002452:	70 09       	ld.w	r9,r8[0x0]
80002454:	58 09       	cp.w	r9,0
80002456:	c0 84       	brge	80002466 <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
80002458:	30 0a       	mov	r10,0
8000245a:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
8000245e:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
80002460:	70 38       	ld.w	r8,r8[0xc]
80002462:	5d 18       	icall	r8
80002464:	da 0a       	popm	pc,r12=1
80002466:	da 0a       	popm	pc,r12=1
80002468:	00 00       	add	r0,r0
8000246a:	06 e8       	st.h	--r3,r8

8000246c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
8000246c:	30 59       	mov	r9,5
8000246e:	48 58       	lddpc	r8,80002480 <udd_ctrl_stall_data+0x14>
80002470:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80002472:	e8 69 00 00 	mov	r9,524288
80002476:	fe 68 01 f0 	mov	r8,-130576
8000247a:	91 09       	st.w	r8[0x0],r9
}
8000247c:	5e fc       	retal	r12
8000247e:	00 00       	add	r0,r0
80002480:	00 00       	add	r0,r0
80002482:	07 1c       	ld.sh	r12,r3++

80002484 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002484:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002486:	48 48       	lddpc	r8,80002494 <udd_ctrl_endofrequest+0x10>
80002488:	70 48       	ld.w	r8,r8[0x10]
8000248a:	58 08       	cp.w	r8,0
8000248c:	c0 20       	breq	80002490 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
8000248e:	5d 18       	icall	r8
80002490:	d8 02       	popm	pc
80002492:	00 00       	add	r0,r0
80002494:	00 00       	add	r0,r0
80002496:	0c a4       	st.w	r6++,r4

80002498 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80002498:	d4 01       	pushm	lr
8000249a:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
8000249c:	78 08       	ld.w	r8,r12[0x0]
8000249e:	58 08       	cp.w	r8,0
800024a0:	c0 b4       	brge	800024b6 <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
800024a2:	30 0a       	mov	r10,0
800024a4:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800024a8:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
800024aa:	78 38       	ld.w	r8,r12[0xc]
800024ac:	58 08       	cp.w	r8,0
800024ae:	c0 40       	breq	800024b6 <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
800024b0:	78 2b       	ld.w	r11,r12[0x8]
800024b2:	12 9c       	mov	r12,r9
800024b4:	5d 18       	icall	r8
800024b6:	d8 02       	popm	pc

800024b8 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
800024b8:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
800024ba:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800024be:	20 18       	sub	r8,1
800024c0:	a5 68       	lsl	r8,0x4
800024c2:	30 1b       	mov	r11,1
800024c4:	48 3c       	lddpc	r12,800024d0 <udd_ep_abort_job+0x18>
800024c6:	10 0c       	add	r12,r8
800024c8:	f0 1f 00 03 	mcall	800024d4 <udd_ep_abort_job+0x1c>
}
800024cc:	d8 02       	popm	pc
800024ce:	00 00       	add	r0,r0
800024d0:	00 00       	add	r0,r0
800024d2:	06 e8       	st.h	--r3,r8
800024d4:	80 00       	ld.sh	r0,r0[0x0]
800024d6:	24 98       	sub	r8,73

800024d8 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
800024d8:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
800024da:	fe 69 00 00 	mov	r9,-131072
800024de:	72 7b       	ld.w	r11,r9[0x1c]
800024e0:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800024e4:	30 1a       	mov	r10,1
800024e6:	f4 08 09 4a 	lsl	r10,r10,r8
800024ea:	5c da       	com	r10
800024ec:	16 6a       	and	r10,r11
800024ee:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
800024f0:	a3 68       	lsl	r8,0x2
800024f2:	e0 38 ff 00 	sub	r8,130816
800024f6:	70 09       	ld.w	r9,r8[0x0]
800024f8:	a1 d9       	cbr	r9,0x1
800024fa:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
800024fc:	f0 1f 00 02 	mcall	80002504 <udd_ep_free+0x2c>
}
80002500:	d8 02       	popm	pc
80002502:	00 00       	add	r0,r0
80002504:	80 00       	ld.sh	r0,r0[0x0]
80002506:	24 b8       	sub	r8,75

80002508 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80002508:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
8000250c:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80002510:	30 37       	mov	r7,3
80002512:	ee 0e 18 00 	cp.b	lr,r7
80002516:	e0 8b 00 99 	brhi	80002648 <udd_ep_run+0x140>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000251a:	fe 67 00 00 	mov	r7,-131072
8000251e:	6e 76       	ld.w	r6,r7[0x1c]
80002520:	1c 95       	mov	r5,lr
80002522:	30 17       	mov	r7,1
80002524:	ee 0e 09 47 	lsl	r7,r7,lr
80002528:	0c 67       	and	r7,r6
8000252a:	e0 80 00 8f 	breq	80002648 <udd_ep_run+0x140>
			|| Is_udd_endpoint_stall_requested(ep)
8000252e:	fc 06 15 02 	lsl	r6,lr,0x2
80002532:	fe 64 01 c0 	mov	r4,-130624
80002536:	ec 04 00 07 	add	r7,r6,r4
8000253a:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000253c:	e6 17 00 08 	andh	r7,0x8,COH
80002540:	e0 81 00 84 	brne	80002648 <udd_ep_run+0x140>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80002544:	fc c7 00 01 	sub	r7,lr,1
80002548:	a5 67       	lsl	r7,0x4
8000254a:	4c 14       	lddpc	r4,8000264c <udd_ep_run+0x144>
8000254c:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
80002550:	6e 04       	ld.w	r4,r7[0x0]
80002552:	e6 14 10 00 	andh	r4,0x1000,COH
80002556:	c7 91       	brne	80002648 <udd_ep_run+0x140>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002558:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
8000255c:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
8000255e:	6e 03       	ld.w	r3,r7[0x0]
80002560:	58 03       	cp.w	r3,0
80002562:	c0 54       	brge	8000256c <udd_ep_run+0x64>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002564:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
80002568:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
8000256c:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
80002570:	6e 03       	ld.w	r3,r7[0x0]
80002572:	30 12       	mov	r2,1
80002574:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
80002578:	8f 03       	st.w	r7[0x0],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000257a:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
8000257e:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
80002580:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
80002582:	6e 08       	ld.w	r8,r7[0x0]
80002584:	30 04       	mov	r4,0
80002586:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
8000258a:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
8000258c:	e0 49 ff ff 	cp.w	r9,65535
80002590:	e0 88 00 07 	brls	8000259e <udd_ep_run+0x96>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
80002594:	e0 78 00 00 	mov	r8,65536
80002598:	8f 28       	st.w	r7[0x8],r8
8000259a:	08 99       	mov	r9,r4
8000259c:	c3 58       	rjmp	80002606 <udd_ep_run+0xfe>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
8000259e:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
800025a0:	58 0c       	cp.w	r12,0
800025a2:	c3 20       	breq	80002606 <udd_ep_run+0xfe>
			if (buf_size==0) {
800025a4:	58 09       	cp.w	r9,0
800025a6:	c1 71       	brne	800025d4 <udd_ep_run+0xcc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
800025a8:	6e 08       	ld.w	r8,r7[0x0]
800025aa:	30 1c       	mov	r12,1
				ptr_job->b_send_zlp = true;
800025ac:	bd b8       	sbr	r8,0x1d
800025ae:	f1 dc d3 c1 	bfins	r8,r12,0x1e,0x1
800025b2:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025b4:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800025b8:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
800025ba:	20 15       	sub	r5,1
800025bc:	fc 19 02 00 	movh	r9,0x200
800025c0:	f2 05 09 49 	lsl	r9,r9,r5
800025c4:	fe 68 00 00 	mov	r8,-131072
800025c8:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
800025ca:	91 39       	st.w	r8[0xc],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800025cc:	e3 ba 00 00 	mtsr	0x0,r10
				cpu_irq_restore(flags);
				return true;
800025d0:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
800025d4:	e0 36 ff 00 	sub	r6,130816
800025d8:	6c 08       	ld.w	r8,r6[0x0]
800025da:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
800025de:	30 86       	mov	r6,8
800025e0:	ec 08 09 48 	lsl	r8,r6,r8
800025e4:	20 18       	sub	r8,1
800025e6:	12 68       	and	r8,r9
800025e8:	c0 b0       	breq	800025fe <udd_ep_run+0xf6>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
800025ea:	6e 08       	ld.w	r8,r7[0x0]
800025ec:	30 0b       	mov	r11,0
800025ee:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
800025f2:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
800025f4:	a5 6e       	lsl	lr,0x4
800025f6:	e0 3e fd 00 	sub	lr,130304
800025fa:	9d 1a       	st.w	lr[0x4],r10
800025fc:	c1 18       	rjmp	8000261e <udd_ep_run+0x116>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
800025fe:	6e 08       	ld.w	r8,r7[0x0]
80002600:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002604:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002606:	a5 6e       	lsl	lr,0x4
80002608:	e0 3e fd 00 	sub	lr,130304
8000260c:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
8000260e:	58 0b       	cp.w	r11,0
80002610:	c0 31       	brne	80002616 <udd_ep_run+0x10e>
80002612:	30 08       	mov	r8,0
80002614:	c0 68       	rjmp	80002620 <udd_ep_run+0x118>
		if (b_dir_in) {
80002616:	58 0c       	cp.w	r12,0
80002618:	c0 31       	brne	8000261e <udd_ep_run+0x116>
8000261a:	31 48       	mov	r8,20
8000261c:	c0 28       	rjmp	80002620 <udd_ep_run+0x118>
8000261e:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
80002620:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80002624:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80002628:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000262a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000262e:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
80002630:	20 15       	sub	r5,1
80002632:	fc 19 02 00 	movh	r9,0x200
80002636:	f2 05 09 45 	lsl	r5,r9,r5
8000263a:	fe 69 00 00 	mov	r9,-131072
8000263e:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002640:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80002644:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
80002648:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
8000264c:	00 00       	add	r0,r0
8000264e:	06 e8       	st.h	--r3,r8

80002650 <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
80002650:	58 0c       	cp.w	r12,0
80002652:	c1 11       	brne	80002674 <udd_sleep_mode+0x24>
80002654:	49 18       	lddpc	r8,80002698 <udd_sleep_mode+0x48>
80002656:	11 89       	ld.ub	r9,r8[0x0]
80002658:	30 08       	mov	r8,0
8000265a:	f0 09 18 00 	cp.b	r9,r8
8000265e:	c1 a0       	breq	80002692 <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002660:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002664:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002666:	48 e8       	lddpc	r8,8000269c <udd_sleep_mode+0x4c>
80002668:	11 9a       	ld.ub	r10,r8[0x1]
8000266a:	2f fa       	sub	r10,-1
8000266c:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000266e:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002672:	c1 08       	rjmp	80002692 <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002674:	48 98       	lddpc	r8,80002698 <udd_sleep_mode+0x48>
80002676:	11 89       	ld.ub	r9,r8[0x0]
80002678:	30 08       	mov	r8,0
8000267a:	f0 09 18 00 	cp.b	r9,r8
8000267e:	c0 a1       	brne	80002692 <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002680:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002684:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80002686:	48 68       	lddpc	r8,8000269c <udd_sleep_mode+0x4c>
80002688:	11 9a       	ld.ub	r10,r8[0x1]
8000268a:	20 1a       	sub	r10,1
8000268c:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000268e:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80002692:	48 28       	lddpc	r8,80002698 <udd_sleep_mode+0x48>
80002694:	b0 8c       	st.b	r8[0x0],r12
}
80002696:	5e fc       	retal	r12
80002698:	00 00       	add	r0,r0
8000269a:	07 18       	ld.sh	r8,r3++
8000269c:	00 00       	add	r0,r0
8000269e:	0c bc       	st.h	r6++,r12

800026a0 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
800026a0:	d4 01       	pushm	lr
	otg_unfreeze_clock();
800026a2:	fe 68 00 00 	mov	r8,-131072
800026a6:	f0 f9 08 00 	ld.w	r9,r8[2048]
800026aa:	af c9       	cbr	r9,0xe
800026ac:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
800026b0:	70 09       	ld.w	r9,r8[0x0]
800026b2:	a9 a9       	sbr	r9,0x8
800026b4:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
800026b6:	30 0c       	mov	r12,0
800026b8:	f0 1f 00 02 	mcall	800026c0 <udd_detach+0x20>
}
800026bc:	d8 02       	popm	pc
800026be:	00 00       	add	r0,r0
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	26 50       	sub	r0,101

800026c4 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026c4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026c8:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
800026ca:	30 1a       	mov	r10,1
800026cc:	fe 69 02 20 	mov	r9,-130528
800026d0:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026d2:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
800026d6:	30 29       	mov	r9,2
800026d8:	fe 68 01 60 	mov	r8,-130720
800026dc:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
800026de:	48 59       	lddpc	r9,800026f0 <udd_ctrl_init+0x2c>
800026e0:	30 08       	mov	r8,0
800026e2:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
800026e4:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
800026e6:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800026e8:	48 39       	lddpc	r9,800026f4 <udd_ctrl_init+0x30>
800026ea:	93 08       	st.w	r9[0x0],r8
}
800026ec:	5e fc       	retal	r12
800026ee:	00 00       	add	r0,r0
800026f0:	00 00       	add	r0,r0
800026f2:	0c a4       	st.w	r6++,r4
800026f4:	00 00       	add	r0,r0
800026f6:	07 1c       	ld.sh	r12,r3++

800026f8 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800026f8:	30 39       	mov	r9,3
800026fa:	48 a8       	lddpc	r8,80002720 <udd_ctrl_send_zlp_in+0x28>
800026fc:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026fe:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80002702:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002704:	fe 6a 01 60 	mov	r10,-130720
80002708:	30 19       	mov	r9,1
8000270a:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
8000270c:	fe 68 01 f0 	mov	r8,-130576
80002710:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002712:	30 89       	mov	r9,8
80002714:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
80002716:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002718:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
8000271c:	5e fc       	retal	r12
8000271e:	00 00       	add	r0,r0
80002720:	00 00       	add	r0,r0
80002722:	07 1c       	ld.sh	r12,r3++

80002724 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80002724:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002728:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000272c:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
8000272e:	30 1a       	mov	r10,1
80002730:	fe 69 02 20 	mov	r9,-130528
80002734:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002736:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000273a:	4c 38       	lddpc	r8,80002844 <udd_ctrl_in_sent+0x120>
8000273c:	70 08       	ld.w	r8,r8[0x0]
8000273e:	58 38       	cp.w	r8,3
80002740:	c0 71       	brne	8000274e <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80002742:	f0 1f 00 42 	mcall	80002848 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002746:	f0 1f 00 42 	mcall	8000284c <udd_ctrl_in_sent+0x128>
		return;
8000274a:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000274e:	4c 18       	lddpc	r8,80002850 <udd_ctrl_in_sent+0x12c>
80002750:	90 68       	ld.sh	r8,r8[0xc]
80002752:	4c 19       	lddpc	r9,80002854 <udd_ctrl_in_sent+0x130>
80002754:	92 07       	ld.sh	r7,r9[0x0]
80002756:	f0 07 01 07 	sub	r7,r8,r7
8000275a:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
8000275c:	c3 b1       	brne	800027d2 <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
8000275e:	4b f9       	lddpc	r9,80002858 <udd_ctrl_in_sent+0x134>
80002760:	13 8a       	ld.ub	r10,r9[0x0]
80002762:	30 09       	mov	r9,0
80002764:	f2 0a 18 00 	cp.b	r10,r9
80002768:	c1 21       	brne	8000278c <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000276a:	30 49       	mov	r9,4
8000276c:	4b 68       	lddpc	r8,80002844 <udd_ctrl_in_sent+0x120>
8000276e:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002770:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002774:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002776:	31 08       	mov	r8,16
80002778:	fe 6a 01 60 	mov	r10,-130720
8000277c:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
8000277e:	fe 6a 01 f0 	mov	r10,-130576
80002782:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002784:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002788:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000278c:	4b 19       	lddpc	r9,80002850 <udd_ctrl_in_sent+0x12c>
8000278e:	92 b9       	ld.uh	r9,r9[0x6]
80002790:	5c 78       	castu.h	r8
80002792:	4b 3a       	lddpc	r10,8000285c <udd_ctrl_in_sent+0x138>
80002794:	94 8a       	ld.uh	r10,r10[0x0]
80002796:	14 08       	add	r8,r10
80002798:	10 39       	cp.w	r9,r8
8000279a:	e0 89 00 08 	brgt	800027aa <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
8000279e:	4a d8       	lddpc	r8,80002850 <udd_ctrl_in_sent+0x12c>
800027a0:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
800027a2:	58 0c       	cp.w	r12,0
800027a4:	c0 30       	breq	800027aa <udd_ctrl_in_sent+0x86>
800027a6:	5d 1c       	icall	r12
800027a8:	c0 51       	brne	800027b2 <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
800027aa:	30 09       	mov	r9,0
800027ac:	4a b8       	lddpc	r8,80002858 <udd_ctrl_in_sent+0x134>
800027ae:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
800027b0:	c1 18       	rjmp	800027d2 <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
800027b2:	4a b9       	lddpc	r9,8000285c <udd_ctrl_in_sent+0x138>
800027b4:	4a 88       	lddpc	r8,80002854 <udd_ctrl_in_sent+0x130>
800027b6:	90 0b       	ld.sh	r11,r8[0x0]
800027b8:	92 0a       	ld.sh	r10,r9[0x0]
800027ba:	f6 0a 00 0a 	add	r10,r11,r10
800027be:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
800027c0:	30 09       	mov	r9,0
800027c2:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
800027c4:	4a 38       	lddpc	r8,80002850 <udd_ctrl_in_sent+0x12c>
800027c6:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
800027c8:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
800027cc:	5f 09       	sreq	r9
800027ce:	4a 38       	lddpc	r8,80002858 <udd_ctrl_in_sent+0x134>
800027d0:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800027d2:	4a 08       	lddpc	r8,80002850 <udd_ctrl_in_sent+0x12c>
800027d4:	70 2a       	ld.w	r10,r8[0x8]
800027d6:	4a 08       	lddpc	r8,80002854 <udd_ctrl_in_sent+0x130>
800027d8:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027da:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800027de:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
800027e0:	fe 68 01 30 	mov	r8,-130768
800027e4:	70 08       	ld.w	r8,r8[0x0]
800027e6:	e2 18 00 02 	andl	r8,0x2,COH
800027ea:	c0 91       	brne	800027fc <udd_ctrl_in_sent+0xd8>
800027ec:	34 08       	mov	r8,64
800027ee:	f0 07 19 00 	cp.h	r7,r8
800027f2:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800027f6:	58 07       	cp.w	r7,0
800027f8:	c0 91       	brne	8000280a <udd_ctrl_in_sent+0xe6>
800027fa:	c1 48       	rjmp	80002822 <udd_ctrl_in_sent+0xfe>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027fc:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002800:	30 49       	mov	r9,4
80002802:	49 18       	lddpc	r8,80002844 <udd_ctrl_in_sent+0x120>
80002804:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
80002806:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000280a:	5c 79       	castu.h	r9
8000280c:	f4 09 00 09 	add	r9,r10,r9
80002810:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
80002814:	13 3a       	ld.ub	r10,r9++
80002816:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80002818:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000281c:	ee 0a 19 00 	cp.h	r10,r7
80002820:	cf a3       	brcs	80002814 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
80002822:	48 d8       	lddpc	r8,80002854 <udd_ctrl_in_sent+0x130>
80002824:	90 09       	ld.sh	r9,r8[0x0]
80002826:	f2 07 00 07 	add	r7,r9,r7
8000282a:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000282c:	30 18       	mov	r8,1
8000282e:	fe 69 01 60 	mov	r9,-130720
80002832:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80002834:	fe 69 01 f0 	mov	r9,-130576
80002838:	93 08       	st.w	r9[0x0],r8
8000283a:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
8000283e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002842:	00 00       	add	r0,r0
80002844:	00 00       	add	r0,r0
80002846:	07 1c       	ld.sh	r12,r3++
80002848:	80 00       	ld.sh	r0,r0[0x0]
8000284a:	24 84       	sub	r4,72
8000284c:	80 00       	ld.sh	r0,r0[0x0]
8000284e:	26 c4       	sub	r4,108
80002850:	00 00       	add	r0,r0
80002852:	0c a4       	st.w	r6++,r4
80002854:	00 00       	add	r0,r0
80002856:	07 1a       	ld.sh	r10,r3++
80002858:	00 00       	add	r0,r0
8000285a:	07 20       	ld.uh	r0,r3++
8000285c:	00 00       	add	r0,r0
8000285e:	06 e4       	st.h	--r3,r4

80002860 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80002860:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80002864:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
80002868:	30 39       	mov	r9,3
8000286a:	f2 08 18 00 	cp.b	r8,r9
8000286e:	e0 8b 00 88 	brhi	8000297e <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
80002872:	fe 69 00 00 	mov	r9,-131072
80002876:	72 79       	ld.w	r9,r9[0x1c]
80002878:	30 17       	mov	r7,1
8000287a:	ee 08 09 47 	lsl	r7,r7,r8
8000287e:	ef e9 00 09 	and	r9,r7,r9
80002882:	c7 e1       	brne	8000297e <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002884:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
80002888:	58 19       	cp.w	r9,1
8000288a:	c7 a5       	brlt	8000297e <udd_ep_alloc+0x11e>
8000288c:	58 29       	cp.w	r9,2
8000288e:	e0 8a 00 06 	brle	8000289a <udd_ep_alloc+0x3a>
80002892:	58 39       	cp.w	r9,3
80002894:	c7 51       	brne	8000297e <udd_ep_alloc+0x11e>
80002896:	30 06       	mov	r6,0
80002898:	c0 28       	rjmp	8000289c <udd_ep_alloc+0x3c>
8000289a:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
8000289c:	f0 09 15 02 	lsl	r9,r8,0x2
800028a0:	e0 39 ff 00 	sub	r9,130816
800028a4:	72 0e       	ld.w	lr,r9[0x0]
800028a6:	5c 7a       	castu.h	r10
800028a8:	30 85       	mov	r5,8
800028aa:	f4 05 0c 4a 	max	r10,r10,r5
800028ae:	e0 65 04 00 	mov	r5,1024
800028b2:	f4 05 0d 4a 	min	r10,r10,r5
800028b6:	a1 7a       	lsl	r10,0x1
800028b8:	20 1a       	sub	r10,1
800028ba:	f4 0a 12 00 	clz	r10,r10
800028be:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
800028c2:	ab 7b       	lsl	r11,0xb
800028c4:	e2 1b 18 00 	andl	r11,0x1800,COH
800028c8:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
800028cc:	f4 0b 11 1c 	rsub	r11,r10,28
800028d0:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
800028d4:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
800028d8:	e2 1b 19 7c 	andl	r11,0x197c,COH
800028dc:	1c 9a       	mov	r10,lr
800028de:	e0 1a e6 83 	andl	r10,0xe683
800028e2:	f7 ea 10 0a 	or	r10,r11,r10
800028e6:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
800028e8:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800028ea:	30 29       	mov	r9,2
800028ec:	f2 08 18 00 	cp.b	r8,r9
800028f0:	e0 8b 00 1d 	brhi	8000292a <udd_ep_alloc+0xca>
800028f4:	fe 6a 01 0c 	mov	r10,-130804
800028f8:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
800028fa:	fe 6c 00 00 	mov	r12,-131072
800028fe:	30 16       	mov	r6,1
80002900:	78 7e       	ld.w	lr,r12[0x1c]
80002902:	ec 09 09 4b 	lsl	r11,r6,r9
80002906:	f7 ee 00 0e 	and	lr,r11,lr
8000290a:	c0 b0       	breq	80002920 <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
8000290c:	f7 e7 10 07 	or	r7,r11,r7
80002910:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
80002912:	78 7e       	ld.w	lr,r12[0x1c]
80002914:	5c db       	com	r11
80002916:	1c 6b       	and	r11,lr
80002918:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
8000291a:	74 0b       	ld.w	r11,r10[0x0]
8000291c:	a1 db       	cbr	r11,0x1
8000291e:	95 0b       	st.w	r10[0x0],r11
80002920:	20 19       	sub	r9,1
80002922:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002924:	f2 08 18 00 	cp.b	r8,r9
80002928:	ce c3       	brcs	80002900 <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
8000292a:	0e 9c       	mov	r12,r7
8000292c:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
8000292e:	fe 6e 00 00 	mov	lr,-131072
80002932:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002934:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
80002936:	f8 08 08 49 	asr	r9,r12,r8
8000293a:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000293e:	c1 80       	breq	8000296e <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
80002940:	f0 0b 15 02 	lsl	r11,r8,0x2
80002944:	fe 65 01 00 	mov	r5,-130816
80002948:	f6 05 00 09 	add	r9,r11,r5
8000294c:	72 05       	ld.w	r5,r9[0x0]
8000294e:	a1 b5       	sbr	r5,0x1
80002950:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
80002952:	7c 75       	ld.w	r5,lr[0x1c]
80002954:	ec 08 09 4a 	lsl	r10,r6,r8
80002958:	0a 4a       	or	r10,r5
8000295a:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
8000295c:	e0 3b fe d0 	sub	r11,130768
80002960:	76 0a       	ld.w	r10,r11[0x0]
80002962:	e6 1a 00 04 	andh	r10,0x4,COH
80002966:	c0 c0       	breq	8000297e <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
80002968:	72 0a       	ld.w	r10,r9[0x0]
8000296a:	a9 ba       	sbr	r10,0x9
8000296c:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000296e:	2f f8       	sub	r8,-1
80002970:	5c 58       	castu.b	r8
80002972:	ee 08 18 00 	cp.b	r8,r7
80002976:	fe 98 ff e0 	brls	80002936 <udd_ep_alloc+0xd6>
8000297a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
8000297e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002982 <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002982:	fe 68 00 00 	mov	r8,-131072
80002986:	70 09       	ld.w	r9,r8[0x0]
80002988:	e0 19 ff 80 	andl	r9,0xff80
8000298c:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000298e:	70 09       	ld.w	r9,r8[0x0]
80002990:	a7 b9       	sbr	r9,0x7
80002992:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002994:	fe 69 01 00 	mov	r9,-130816
80002998:	72 0b       	ld.w	r11,r9[0x0]
8000299a:	30 8c       	mov	r12,8
8000299c:	34 0a       	mov	r10,64
8000299e:	f4 0c 0c 4a 	max	r10,r10,r12
800029a2:	e0 6c 04 00 	mov	r12,1024
800029a6:	f4 0c 0d 4a 	min	r10,r10,r12
800029aa:	a1 7a       	lsl	r10,0x1
800029ac:	20 1a       	sub	r10,1
800029ae:	f4 0a 12 00 	clz	r10,r10
800029b2:	f4 0a 11 1c 	rsub	r10,r10,28
800029b6:	a5 6a       	lsl	r10,0x4
800029b8:	e2 1a 19 7c 	andl	r10,0x197c,COH
800029bc:	e0 1b e6 83 	andl	r11,0xe683
800029c0:	16 4a       	or	r10,r11
800029c2:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
800029c4:	72 0a       	ld.w	r10,r9[0x0]
800029c6:	a1 ba       	sbr	r10,0x1
800029c8:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
800029ca:	70 79       	ld.w	r9,r8[0x1c]
800029cc:	a1 a9       	sbr	r9,0x0
800029ce:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800029d0:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800029d4:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
800029d6:	fe 69 01 f0 	mov	r9,-130576
800029da:	30 4b       	mov	r11,4
800029dc:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
800029de:	30 2b       	mov	r11,2
800029e0:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
800029e2:	e0 69 10 00 	mov	r9,4096
800029e6:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800029e8:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
800029ec:	5e fc       	retal	r12
800029ee:	d7 03       	nop

800029f0 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
800029f0:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800029f4:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800029f8:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
800029fa:	30 1c       	mov	r12,1
800029fc:	f0 1f 00 15 	mcall	80002a50 <udd_attach+0x60>
	otg_unfreeze_clock();
80002a00:	fe 67 00 00 	mov	r7,-131072
80002a04:	ee f8 08 00 	ld.w	r8,r7[2048]
80002a08:	af c8       	cbr	r8,0xe
80002a0a:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002a0e:	6e 08       	ld.w	r8,r7[0x0]
80002a10:	a9 c8       	cbr	r8,0x8
80002a12:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002a14:	f0 1f 00 10 	mcall	80002a54 <udd_attach+0x64>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002a18:	f0 1f 00 10 	mcall	80002a58 <udd_attach+0x68>
	udd_ctrl_init();	// Reset endpoint control management
80002a1c:	f0 1f 00 10 	mcall	80002a5c <udd_attach+0x6c>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002a20:	30 8b       	mov	r11,8
80002a22:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002a24:	30 19       	mov	r9,1
80002a26:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002a28:	31 08       	mov	r8,16
80002a2a:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002a2c:	30 4a       	mov	r10,4
80002a2e:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002a30:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002a32:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002a34:	30 2a       	mov	r10,2
80002a36:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002a38:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002a3a:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002a3c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002a40:	af a8       	sbr	r8,0xe
80002a42:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002a46:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
80002a4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002a4e:	00 00       	add	r0,r0
80002a50:	80 00       	ld.sh	r0,r0[0x0]
80002a52:	26 50       	sub	r0,101
80002a54:	80 00       	ld.sh	r0,r0[0x0]
80002a56:	39 ec       	mov	r12,-98
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	29 82       	sub	r2,-104
80002a5c:	80 00       	ld.sh	r0,r0[0x0]
80002a5e:	26 c4       	sub	r4,108

80002a60 <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002a60:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002a64:	f0 1f 00 39 	mcall	80002b48 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a68:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002a6c:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002a6e:	fe 67 00 00 	mov	r7,-131072
80002a72:	ee f8 08 00 	ld.w	r8,r7[2048]
80002a76:	af d8       	cbr	r8,0xf
80002a78:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002a7c:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002a80:	30 0a       	mov	r10,0
80002a82:	e0 6b 02 20 	mov	r11,544
80002a86:	4b 2c       	lddpc	r12,80002b4c <udd_enable+0xec>
80002a88:	f0 1f 00 32 	mcall	80002b50 <udd_enable+0xf0>
	otg_force_device_mode();
80002a8c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002a90:	b9 b8       	sbr	r8,0x19
80002a92:	ef 48 08 00 	st.w	r7[2048],r8
80002a96:	ee f8 08 00 	ld.w	r8,r7[2048]
80002a9a:	b9 c8       	cbr	r8,0x18
80002a9c:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002aa0:	ee f8 08 00 	ld.w	r8,r7[2048]
80002aa4:	ad c8       	cbr	r8,0xc
80002aa6:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002aaa:	ee f8 08 00 	ld.w	r8,r7[2048]
80002aae:	ad a8       	sbr	r8,0xc
80002ab0:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002ab4:	ee f8 08 00 	ld.w	r8,r7[2048]
80002ab8:	af b8       	sbr	r8,0xf
80002aba:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002abe:	ee f8 08 00 	ld.w	r8,r7[2048]
80002ac2:	af c8       	cbr	r8,0xe
80002ac4:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002ac8:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002acc:	4a 28       	lddpc	r8,80002b54 <udd_enable+0xf4>
80002ace:	70 0a       	ld.w	r10,r8[0x0]
80002ad0:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002ad2:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002ad6:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002ada:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002adc:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002ade:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002ae2:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002ae6:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002ae8:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002aea:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002aee:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002af2:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002af4:	6e 08       	ld.w	r8,r7[0x0]
80002af6:	ad c8       	cbr	r8,0xc
80002af8:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002afa:	6e 08       	ld.w	r8,r7[0x0]
80002afc:	e8 18 0c 00 	orl	r8,0xc00
80002b00:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002b02:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b06:	a1 b8       	sbr	r8,0x1
80002b08:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002b0c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b10:	af a8       	sbr	r8,0xe
80002b12:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002b16:	fe 78 0c 00 	mov	r8,-62464
80002b1a:	f0 fa 01 44 	ld.w	r10,r8[324]
80002b1e:	30 1b       	mov	r11,1
80002b20:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002b24:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002b28:	48 c8       	lddpc	r8,80002b58 <udd_enable+0xf8>
80002b2a:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b2c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002b30:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002b32:	48 b8       	lddpc	r8,80002b5c <udd_enable+0xfc>
80002b34:	11 ba       	ld.ub	r10,r8[0x3]
80002b36:	2f fa       	sub	r10,-1
80002b38:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002b3a:	e3 b9 00 00 	mtsr	0x0,r9
80002b3e:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002b42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b46:	00 00       	add	r0,r0
80002b48:	80 00       	ld.sh	r0,r0[0x0]
80002b4a:	32 bc       	mov	r12,43
80002b4c:	80 00       	ld.sh	r0,r0[0x0]
80002b4e:	2b 60       	sub	r0,-74
80002b50:	80 00       	ld.sh	r0,r0[0x0]
80002b52:	22 54       	sub	r4,37
80002b54:	00 00       	add	r0,r0
80002b56:	06 e8       	st.h	--r3,r8
80002b58:	00 00       	add	r0,r0
80002b5a:	07 18       	ld.sh	r8,r3++
80002b5c:	00 00       	add	r0,r0
80002b5e:	0c bc       	st.h	r6++,r12

80002b60 <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002b60:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002b64:	fe 68 00 00 	mov	r8,-131072
80002b68:	70 18       	ld.w	r8,r8[0x4]
80002b6a:	e2 18 00 04 	andl	r8,0x4,COH
80002b6e:	c0 f0       	breq	80002b8c <udd_interrupt+0x2c>
		udd_ack_sof();
80002b70:	fe 68 00 00 	mov	r8,-131072
80002b74:	30 49       	mov	r9,4
80002b76:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002b78:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002b7c:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002b80:	e0 81 02 ce 	brne	8000311c <udd_interrupt+0x5bc>
		udc_sof_notify();
80002b84:	f0 1f 01 6f 	mcall	80003140 <udd_interrupt+0x5e0>
80002b88:	e0 8f 02 ca 	bral	8000311c <udd_interrupt+0x5bc>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002b8c:	fe 68 00 00 	mov	r8,-131072
80002b90:	70 18       	ld.w	r8,r8[0x4]
80002b92:	e2 18 00 02 	andl	r8,0x2,COH
80002b96:	c0 90       	breq	80002ba8 <udd_interrupt+0x48>
		udd_ack_msof();
80002b98:	30 29       	mov	r9,2
80002b9a:	fe 68 00 00 	mov	r8,-131072
80002b9e:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002ba0:	f0 1f 01 68 	mcall	80003140 <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
80002ba4:	e0 8f 02 bc 	bral	8000311c <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002ba8:	fe 68 00 00 	mov	r8,-131072
80002bac:	70 18       	ld.w	r8,r8[0x4]
80002bae:	e2 18 10 00 	andl	r8,0x1000,COH
80002bb2:	e0 80 01 6f 	breq	80002e90 <udd_interrupt+0x330>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002bb6:	fe 68 02 20 	mov	r8,-130528
80002bba:	31 09       	mov	r9,16
80002bbc:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002bbe:	30 89       	mov	r9,8
80002bc0:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002bc2:	fe 68 01 30 	mov	r8,-130768
80002bc6:	70 08       	ld.w	r8,r8[0x0]
80002bc8:	e2 18 00 04 	andl	r8,0x4,COH
80002bcc:	e0 80 00 87 	breq	80002cda <udd_interrupt+0x17a>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002bd0:	fe f8 05 74 	ld.w	r8,pc[1396]
80002bd4:	70 08       	ld.w	r8,r8[0x0]
80002bd6:	58 08       	cp.w	r8,0
80002bd8:	c0 50       	breq	80002be2 <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002bda:	f0 1f 01 5c 	mcall	80003148 <udd_interrupt+0x5e8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002bde:	f0 1f 01 5c 	mcall	8000314c <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002be2:	fe 68 01 30 	mov	r8,-130768
80002be6:	70 08       	ld.w	r8,r8[0x0]
80002be8:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002bec:	58 88       	cp.w	r8,8
80002bee:	c0 90       	breq	80002c00 <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002bf0:	f0 1f 01 58 	mcall	80003150 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002bf4:	30 49       	mov	r9,4
80002bf6:	fe 68 01 60 	mov	r8,-130720
80002bfa:	91 09       	st.w	r8[0x0],r9
80002bfc:	e0 8f 02 90 	bral	8000311c <udd_interrupt+0x5bc>
80002c00:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002c04:	fe fc 05 50 	ld.w	r12,pc[1360]
80002c08:	fc 1b 20 00 	movh	r11,0x2000
80002c0c:	f0 0c 00 09 	add	r9,r8,r12
80002c10:	11 3a       	ld.ub	r10,r8++
80002c12:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002c16:	30 8a       	mov	r10,8
80002c18:	ea 1a e0 00 	orh	r10,0xe000
80002c1c:	14 38       	cp.w	r8,r10
80002c1e:	cf 71       	brne	80002c0c <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002c20:	fe f8 05 34 	ld.w	r8,pc[1332]
80002c24:	90 19       	ld.sh	r9,r8[0x2]
80002c26:	5c c9       	swap.bh	r9
80002c28:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002c2a:	90 29       	ld.sh	r9,r8[0x4]
80002c2c:	5c c9       	swap.bh	r9
80002c2e:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002c30:	90 39       	ld.sh	r9,r8[0x6]
80002c32:	5c c9       	swap.bh	r9
80002c34:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002c36:	f0 1f 01 49 	mcall	80003158 <udd_interrupt+0x5f8>
80002c3a:	c0 91       	brne	80002c4c <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002c3c:	f0 1f 01 45 	mcall	80003150 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002c40:	30 49       	mov	r9,4
80002c42:	fe 68 01 60 	mov	r8,-130720
80002c46:	91 09       	st.w	r8[0x0],r9
80002c48:	e0 8f 02 6a 	bral	8000311c <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80002c4c:	30 49       	mov	r9,4
80002c4e:	fe 68 01 60 	mov	r8,-130720
80002c52:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002c54:	fe f8 05 00 	ld.w	r8,pc[1280]
80002c58:	11 89       	ld.ub	r9,r8[0x0]
80002c5a:	30 08       	mov	r8,0
80002c5c:	f0 09 18 00 	cp.b	r9,r8
80002c60:	c1 94       	brge	80002c92 <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002c62:	fe f8 04 f2 	ld.w	r8,pc[1266]
80002c66:	90 e8       	ld.uh	r8,r8[0xc]
80002c68:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002c6c:	5f 09       	sreq	r9
80002c6e:	fe f8 04 ee 	ld.w	r8,pc[1262]
80002c72:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002c74:	30 08       	mov	r8,0
80002c76:	fe f9 04 ea 	ld.w	r9,pc[1258]
80002c7a:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002c7c:	fe f9 04 e8 	ld.w	r9,pc[1256]
80002c80:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002c82:	30 29       	mov	r9,2
80002c84:	fe f8 04 c0 	ld.w	r8,pc[1216]
80002c88:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002c8a:	f0 1f 01 38 	mcall	80003168 <udd_interrupt+0x608>
80002c8e:	e0 8f 02 47 	bral	8000311c <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002c92:	fe f8 04 c2 	ld.w	r8,pc[1218]
80002c96:	90 39       	ld.sh	r9,r8[0x6]
80002c98:	30 08       	mov	r8,0
80002c9a:	f0 09 19 00 	cp.h	r9,r8
80002c9e:	c0 51       	brne	80002ca8 <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002ca0:	f0 1f 01 33 	mcall	8000316c <udd_interrupt+0x60c>
80002ca4:	e0 8f 02 3c 	bral	8000311c <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002ca8:	30 08       	mov	r8,0
80002caa:	fe f9 04 b6 	ld.w	r9,pc[1206]
80002cae:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002cb0:	fe f9 04 b4 	ld.w	r9,pc[1204]
80002cb4:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002cb6:	30 19       	mov	r9,1
80002cb8:	fe f8 04 8c 	ld.w	r8,pc[1164]
80002cbc:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002cbe:	31 08       	mov	r8,16
80002cc0:	fe 69 01 60 	mov	r9,-130720
80002cc4:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002cc6:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002cca:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002ccc:	fe 6a 01 f0 	mov	r10,-130576
80002cd0:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002cd2:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002cd6:	e0 8f 02 23 	bral	8000311c <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002cda:	fe 68 01 30 	mov	r8,-130768
80002cde:	70 08       	ld.w	r8,r8[0x0]
80002ce0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ce4:	c0 b0       	breq	80002cfa <udd_interrupt+0x19a>
80002ce6:	fe 68 01 c0 	mov	r8,-130624
80002cea:	70 08       	ld.w	r8,r8[0x0]
80002cec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002cf0:	c0 50       	breq	80002cfa <udd_interrupt+0x19a>
		// IN packet sent
		udd_ctrl_in_sent();
80002cf2:	f0 1f 01 1e 	mcall	80003168 <udd_interrupt+0x608>
80002cf6:	e0 8f 02 13 	bral	8000311c <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002cfa:	fe 68 01 30 	mov	r8,-130768
80002cfe:	70 08       	ld.w	r8,r8[0x0]
80002d00:	e2 18 00 02 	andl	r8,0x2,COH
80002d04:	e0 80 00 a3 	breq	80002e4a <udd_interrupt+0x2ea>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002d08:	fe f8 04 3c 	ld.w	r8,pc[1084]
80002d0c:	70 08       	ld.w	r8,r8[0x0]
80002d0e:	58 18       	cp.w	r8,1
80002d10:	c1 10       	breq	80002d32 <udd_interrupt+0x1d2>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002d12:	58 28       	cp.w	r8,2
80002d14:	5f 09       	sreq	r9
80002d16:	58 48       	cp.w	r8,4
80002d18:	5f 08       	sreq	r8
80002d1a:	f3 e8 10 08 	or	r8,r9,r8
80002d1e:	c0 40       	breq	80002d26 <udd_interrupt+0x1c6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002d20:	f0 1f 01 0a 	mcall	80003148 <udd_interrupt+0x5e8>
80002d24:	c0 38       	rjmp	80002d2a <udd_interrupt+0x1ca>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002d26:	f0 1f 01 0b 	mcall	80003150 <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002d2a:	f0 1f 01 09 	mcall	8000314c <udd_interrupt+0x5ec>
80002d2e:	e0 8f 01 f7 	bral	8000311c <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002d32:	fe 68 01 30 	mov	r8,-130768
80002d36:	70 0b       	ld.w	r11,r8[0x0]
80002d38:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002d3c:	fe f8 04 18 	ld.w	r8,pc[1048]
80002d40:	90 69       	ld.sh	r9,r8[0xc]
80002d42:	fe f8 04 22 	ld.w	r8,pc[1058]
80002d46:	90 08       	ld.sh	r8,r8[0x0]
80002d48:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002d4c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002d50:	f6 0a 00 0a 	add	r10,r11,r10
80002d54:	14 3c       	cp.w	r12,r10
80002d56:	c0 44       	brge	80002d5e <udd_interrupt+0x1fe>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002d58:	10 19       	sub	r9,r8
80002d5a:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002d5e:	fe f9 03 f6 	ld.w	r9,pc[1014]
80002d62:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002d64:	58 0b       	cp.w	r11,0
80002d66:	e0 80 01 e2 	breq	8000312a <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002d6a:	5c 78       	castu.h	r8
80002d6c:	10 09       	add	r9,r8
80002d6e:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002d72:	11 3a       	ld.ub	r10,r8++
80002d74:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002d76:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002d7a:	f6 0a 19 00 	cp.h	r10,r11
80002d7e:	cf a3       	brcs	80002d72 <udd_interrupt+0x212>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002d80:	fe f9 03 e4 	ld.w	r9,pc[996]
80002d84:	92 08       	ld.sh	r8,r9[0x0]
80002d86:	16 08       	add	r8,r11
80002d88:	5c 88       	casts.h	r8
80002d8a:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002d8c:	34 09       	mov	r9,64
80002d8e:	f2 0b 19 00 	cp.h	r11,r9
80002d92:	c0 e1       	brne	80002dae <udd_interrupt+0x24e>
80002d94:	fe f9 03 c0 	ld.w	r9,pc[960]
80002d98:	92 ba       	ld.uh	r10,r9[0x6]
80002d9a:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002d9e:	fe f9 03 c2 	ld.w	r9,pc[962]
80002da2:	92 89       	ld.uh	r9,r9[0x0]
80002da4:	f6 09 00 09 	add	r9,r11,r9
80002da8:	12 3a       	cp.w	r10,r9
80002daa:	e0 89 00 1a 	brgt	80002dde <udd_interrupt+0x27e>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002dae:	fe f9 03 a6 	ld.w	r9,pc[934]
80002db2:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002db4:	72 5c       	ld.w	r12,r9[0x14]
80002db6:	58 0c       	cp.w	r12,0
80002db8:	c0 b0       	breq	80002dce <udd_interrupt+0x26e>
			if (!udd_g_ctrlreq.over_under_run()) {
80002dba:	5d 1c       	icall	r12
80002dbc:	c0 91       	brne	80002dce <udd_interrupt+0x26e>
				// Stall ZLP
				udd_ctrl_stall_data();
80002dbe:	f0 1f 00 e5 	mcall	80003150 <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002dc2:	30 29       	mov	r9,2
80002dc4:	fe 68 01 60 	mov	r8,-130720
80002dc8:	91 09       	st.w	r8[0x0],r9
80002dca:	e0 8f 01 a9 	bral	8000311c <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002dce:	30 29       	mov	r9,2
80002dd0:	fe 68 01 60 	mov	r8,-130720
80002dd4:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002dd6:	f0 1f 00 e6 	mcall	8000316c <udd_interrupt+0x60c>
80002dda:	e0 8f 01 a1 	bral	8000311c <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002dde:	fe f9 03 76 	ld.w	r9,pc[886]
80002de2:	92 69       	ld.sh	r9,r9[0xc]
80002de4:	f0 09 19 00 	cp.h	r9,r8
80002de8:	c2 21       	brne	80002e2c <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002dea:	fe f8 03 6a 	ld.w	r8,pc[874]
80002dee:	70 5c       	ld.w	r12,r8[0x14]
80002df0:	58 0c       	cp.w	r12,0
80002df2:	c0 91       	brne	80002e04 <udd_interrupt+0x2a4>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002df4:	f0 1f 00 d7 	mcall	80003150 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002df8:	30 29       	mov	r9,2
80002dfa:	fe 68 01 60 	mov	r8,-130720
80002dfe:	91 09       	st.w	r8[0x0],r9
80002e00:	e0 8f 01 8e 	bral	8000311c <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002e04:	5d 1c       	icall	r12
80002e06:	c0 81       	brne	80002e16 <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002e08:	f0 1f 00 d2 	mcall	80003150 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e0c:	30 29       	mov	r9,2
80002e0e:	fe 68 01 60 	mov	r8,-130720
80002e12:	91 09       	st.w	r8[0x0],r9
80002e14:	c8 49       	rjmp	8000311c <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002e16:	fe f9 03 4a 	ld.w	r9,pc[842]
80002e1a:	fe f8 03 4a 	ld.w	r8,pc[842]
80002e1e:	90 0b       	ld.sh	r11,r8[0x0]
80002e20:	92 0a       	ld.sh	r10,r9[0x0]
80002e22:	f6 0a 00 0a 	add	r10,r11,r10
80002e26:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002e28:	30 09       	mov	r9,0
80002e2a:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002e2c:	fe 69 01 60 	mov	r9,-130720
80002e30:	30 28       	mov	r8,2
80002e32:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002e34:	31 08       	mov	r8,16
80002e36:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e38:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002e3c:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002e3e:	fe 6a 01 f0 	mov	r10,-130576
80002e42:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002e44:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002e48:	c6 a9       	rjmp	8000311c <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002e4a:	fe 68 01 30 	mov	r8,-130768
80002e4e:	70 08       	ld.w	r8,r8[0x0]
80002e50:	e2 18 00 08 	andl	r8,0x8,COH
80002e54:	c1 80       	breq	80002e84 <udd_interrupt+0x324>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002e56:	30 89       	mov	r9,8
80002e58:	fe 68 01 60 	mov	r8,-130720
80002e5c:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002e5e:	fe 68 01 30 	mov	r8,-130768
80002e62:	70 08       	ld.w	r8,r8[0x0]
80002e64:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002e68:	e0 81 01 5a 	brne	8000311c <udd_interrupt+0x5bc>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002e6c:	fe f8 02 d8 	ld.w	r8,pc[728]
80002e70:	70 08       	ld.w	r8,r8[0x0]
80002e72:	58 38       	cp.w	r8,3
80002e74:	e0 81 01 54 	brne	8000311c <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002e78:	e8 69 00 00 	mov	r9,524288
80002e7c:	fe 68 01 f0 	mov	r8,-130576
80002e80:	91 09       	st.w	r8[0x0],r9
80002e82:	c4 d9       	rjmp	8000311c <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002e84:	fe 68 01 30 	mov	r8,-130768
80002e88:	70 08       	ld.w	r8,r8[0x0]
80002e8a:	e2 18 00 10 	andl	r8,0x10,COH
80002e8e:	c0 e1       	brne	80002eaa <udd_interrupt+0x34a>
80002e90:	fe f7 02 e0 	ld.w	r7,pc[736]
80002e94:	0e 9a       	mov	r10,r7
80002e96:	fe 69 01 34 	mov	r9,-130764
80002e9a:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002e9c:	fe 66 00 00 	mov	r6,-131072
80002ea0:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002ea4:	e0 63 10 00 	mov	r3,4096
80002ea8:	c1 e8       	rjmp	80002ee4 <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002eaa:	31 09       	mov	r9,16
80002eac:	fe 68 01 60 	mov	r8,-130720
80002eb0:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002eb2:	fe 68 01 30 	mov	r8,-130768
80002eb6:	70 08       	ld.w	r8,r8[0x0]
80002eb8:	e2 18 00 02 	andl	r8,0x2,COH
80002ebc:	e0 81 01 30 	brne	8000311c <udd_interrupt+0x5bc>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002ec0:	fe f8 02 84 	ld.w	r8,pc[644]
80002ec4:	70 08       	ld.w	r8,r8[0x0]
80002ec6:	58 18       	cp.w	r8,1
80002ec8:	c0 41       	brne	80002ed0 <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002eca:	f0 1f 00 a9 	mcall	8000316c <udd_interrupt+0x60c>
80002ece:	c2 79       	rjmp	8000311c <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002ed0:	58 48       	cp.w	r8,4
80002ed2:	e0 81 01 25 	brne	8000311c <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002ed6:	e8 69 00 00 	mov	r9,524288
80002eda:	fe 68 01 f0 	mov	r8,-130576
80002ede:	91 09       	st.w	r8[0x0],r9
80002ee0:	c1 e9       	rjmp	8000311c <udd_interrupt+0x5bc>
80002ee2:	10 9b       	mov	r11,r8
80002ee4:	f6 c8 ff ff 	sub	r8,r11,-1
80002ee8:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002eea:	6c 45       	ld.w	r5,r6[0x10]
80002eec:	10 9e       	mov	lr,r8
80002eee:	e8 0b 09 4b 	lsl	r11,r4,r11
80002ef2:	f7 e5 00 05 	and	r5,r11,r5
80002ef6:	c4 b0       	breq	80002f8c <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002ef8:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002efa:	f7 e5 00 05 	and	r5,r11,r5
80002efe:	c4 70       	breq	80002f8c <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002f00:	fe 69 00 00 	mov	r9,-131072
80002f04:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002f06:	74 09       	ld.w	r9,r10[0x0]
80002f08:	e6 19 20 00 	andh	r9,0x2000,COH
80002f0c:	c0 50       	breq	80002f16 <udd_interrupt+0x3b6>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002f0e:	fe 69 00 00 	mov	r9,-131072
80002f12:	93 3b       	st.w	r9[0xc],r11
80002f14:	c0 a8       	rjmp	80002f28 <udd_interrupt+0x3c8>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002f16:	f0 09 15 04 	lsl	r9,r8,0x4
80002f1a:	e0 39 fd 00 	sub	r9,130304
80002f1e:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002f20:	b1 89       	lsr	r9,0x10
80002f22:	74 2a       	ld.w	r10,r10[0x8]
80002f24:	12 1a       	sub	r10,r9
80002f26:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80002f28:	a3 68       	lsl	r8,0x2
80002f2a:	fe 6b 01 00 	mov	r11,-130816
80002f2e:	f0 0b 00 09 	add	r9,r8,r11
80002f32:	72 09       	ld.w	r9,r9[0x0]
80002f34:	e2 19 01 00 	andl	r9,0x100,COH
80002f38:	c2 60       	breq	80002f84 <udd_interrupt+0x424>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002f3a:	78 09       	ld.w	r9,r12[0x0]
80002f3c:	e6 19 40 00 	andh	r9,0x4000,COH
80002f40:	c2 20       	breq	80002f84 <udd_interrupt+0x424>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002f42:	fe 6a 01 60 	mov	r10,-130720
80002f46:	f0 0a 00 09 	add	r9,r8,r10
80002f4a:	30 1a       	mov	r10,1
80002f4c:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
80002f4e:	fe 6b 01 30 	mov	r11,-130768
80002f52:	f0 0b 00 09 	add	r9,r8,r11
80002f56:	72 0a       	ld.w	r10,r9[0x0]
						udd_raise_in_send(ep);
80002f58:	fe 6b 01 90 	mov	r11,-130672
80002f5c:	f0 0b 00 09 	add	r9,r8,r11
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002f60:	e6 1a 00 01 	andh	r10,0x1,COH
						udd_raise_in_send(ep);
80002f64:	f9 ba 01 01 	movne	r10,1
80002f68:	f3 fa 1a 00 	st.wne	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80002f6c:	e0 38 fe 10 	sub	r8,130576
80002f70:	30 19       	mov	r9,1
80002f72:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
80002f74:	e0 68 10 00 	mov	r8,4096
80002f78:	f0 0e 09 4e 	lsl	lr,r8,lr
80002f7c:	fe 68 00 00 	mov	r8,-131072
80002f80:	91 6e       	st.w	r8[0x18],lr
80002f82:	cc d8       	rjmp	8000311c <udd_interrupt+0x5bc>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
80002f84:	30 0b       	mov	r11,0
80002f86:	f0 1f 00 7c 	mcall	80003174 <udd_interrupt+0x614>
80002f8a:	cc 98       	rjmp	8000311c <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f8c:	6c 4b       	ld.w	r11,r6[0x10]
80002f8e:	e6 0e 09 4e 	lsl	lr,r3,lr
80002f92:	fd eb 00 0b 	and	r11,lr,r11
80002f96:	c4 60       	breq	80003022 <udd_interrupt+0x4c2>
80002f98:	e0 7b fe d0 	mov	r11,130768
80002f9c:	f2 0b 00 02 	add	r2,r9,r11
80002fa0:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002fa4:	76 05       	ld.w	r5,r11[0x0]
80002fa6:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80002faa:	c1 50       	breq	80002fd4 <udd_interrupt+0x474>
80002fac:	72 05       	ld.w	r5,r9[0x0]
80002fae:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80002fb2:	c1 10       	breq	80002fd4 <udd_interrupt+0x474>
				udd_disable_in_send_interrupt(ep);
80002fb4:	fe 6a 02 20 	mov	r10,-130528
80002fb8:	e4 0a 00 08 	add	r8,r2,r10
80002fbc:	30 19       	mov	r9,1
80002fbe:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80002fc0:	e0 32 fe a0 	sub	r2,130720
80002fc4:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
80002fc6:	e0 69 40 00 	mov	r9,16384
80002fca:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
80002fcc:	30 0b       	mov	r11,0
80002fce:	f0 1f 00 6a 	mcall	80003174 <udd_interrupt+0x614>
80002fd2:	ca 58       	rjmp	8000311c <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80002fd4:	76 0b       	ld.w	r11,r11[0x0]
80002fd6:	e2 1b 10 00 	andl	r11,0x1000,COH
80002fda:	c2 40       	breq	80003022 <udd_interrupt+0x4c2>
80002fdc:	72 0b       	ld.w	r11,r9[0x0]
80002fde:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
80002fe2:	c2 01       	brne	80003022 <udd_interrupt+0x4c2>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80002fe4:	fe 69 02 20 	mov	r9,-130528
80002fe8:	e4 09 00 08 	add	r8,r2,r9
80002fec:	e0 69 10 00 	mov	r9,4096
80002ff0:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
80002ff2:	fe 68 00 00 	mov	r8,-131072
80002ff6:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
80002ff8:	78 08       	ld.w	r8,r12[0x0]
80002ffa:	30 09       	mov	r9,0
80002ffc:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
80003000:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
80003002:	fe 6b 01 00 	mov	r11,-130816
80003006:	e4 0b 00 08 	add	r8,r2,r11
8000300a:	70 09       	ld.w	r9,r8[0x0]
8000300c:	a9 d9       	cbr	r9,0x9
8000300e:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80003010:	e0 32 fe 10 	sub	r2,130576
80003014:	e8 68 00 00 	mov	r8,524288
80003018:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
8000301a:	e4 68 00 00 	mov	r8,262144
8000301e:	85 08       	st.w	r2[0x0],r8
80003020:	c7 e8       	rjmp	8000311c <udd_interrupt+0x5bc>
80003022:	2f 0a       	sub	r10,-16
80003024:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80003026:	58 38       	cp.w	r8,3
80003028:	fe 91 ff 5d 	brne	80002ee2 <udd_interrupt+0x382>
8000302c:	c8 38       	rjmp	80003132 <udd_interrupt+0x5d2>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
8000302e:	30 89       	mov	r9,8
80003030:	fe 68 00 00 	mov	r8,-131072
80003034:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
80003036:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
8000303a:	30 15       	mov	r5,1
8000303c:	0a 9b       	mov	r11,r5
8000303e:	0e 9c       	mov	r12,r7
80003040:	f0 1f 00 4d 	mcall	80003174 <udd_interrupt+0x614>
80003044:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80003046:	0c 37       	cp.w	r7,r6
80003048:	cf a1       	brne	8000303c <udd_interrupt+0x4dc>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
8000304a:	f0 1f 00 4c 	mcall	80003178 <udd_interrupt+0x618>
		// Reset endpoint control
		udd_reset_ep_ctrl();
8000304e:	f0 1f 00 4c 	mcall	8000317c <udd_interrupt+0x61c>
		// Reset endpoint control management
		udd_ctrl_init();
80003052:	f0 1f 00 3f 	mcall	8000314c <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
80003056:	c6 38       	rjmp	8000311c <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80003058:	fe 68 00 00 	mov	r8,-131072
8000305c:	70 48       	ld.w	r8,r8[0x10]
8000305e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003062:	c1 b0       	breq	80003098 <udd_interrupt+0x538>
80003064:	fe 68 00 00 	mov	r8,-131072
80003068:	70 18       	ld.w	r8,r8[0x4]
8000306a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000306e:	c1 50       	breq	80003098 <udd_interrupt+0x538>
		otg_unfreeze_clock();
80003070:	fe 68 00 00 	mov	r8,-131072
80003074:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003078:	af c9       	cbr	r9,0xe
8000307a:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000307e:	30 19       	mov	r9,1
80003080:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
80003082:	31 09       	mov	r9,16
80003084:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80003086:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000308a:	af a9       	sbr	r9,0xe
8000308c:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
80003090:	30 0c       	mov	r12,0
80003092:	f0 1f 00 3c 	mcall	80003180 <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80003096:	c4 38       	rjmp	8000311c <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003098:	fe 68 00 00 	mov	r8,-131072
8000309c:	70 48       	ld.w	r8,r8[0x10]
8000309e:	e2 18 00 10 	andl	r8,0x10,COH
800030a2:	c2 10       	breq	800030e4 <udd_interrupt+0x584>
800030a4:	fe 68 00 00 	mov	r8,-131072
800030a8:	70 18       	ld.w	r8,r8[0x4]
800030aa:	e2 18 00 10 	andl	r8,0x10,COH
800030ae:	c1 b0       	breq	800030e4 <udd_interrupt+0x584>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
800030b0:	fe 68 00 00 	mov	r8,-131072
800030b4:	f0 f9 08 00 	ld.w	r9,r8[2048]
800030b8:	af c9       	cbr	r9,0xe
800030ba:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
800030be:	c0 58       	rjmp	800030c8 <udd_interrupt+0x568>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
800030c0:	70 19       	ld.w	r9,r8[0x4]
800030c2:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800030c6:	c0 61       	brne	800030d2 <udd_interrupt+0x572>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
800030c8:	f0 f9 08 04 	ld.w	r9,r8[2052]
800030cc:	e2 19 40 00 	andl	r9,0x4000,COH
800030d0:	cf 80       	breq	800030c0 <udd_interrupt+0x560>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
800030d2:	fe 68 00 00 	mov	r8,-131072
800030d6:	31 09       	mov	r9,16
800030d8:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
800030da:	30 1c       	mov	r12,1
800030dc:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
800030de:	f0 1f 00 29 	mcall	80003180 <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
800030e2:	c1 d8       	rjmp	8000311c <udd_interrupt+0x5bc>
	}

	if (Is_udd_vbus_transition()) {
800030e4:	fe 68 00 00 	mov	r8,-131072
800030e8:	f0 f8 08 04 	ld.w	r8,r8[2052]
800030ec:	e2 18 00 02 	andl	r8,0x2,COH
800030f0:	c1 60       	breq	8000311c <udd_interrupt+0x5bc>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
800030f2:	fe 68 00 00 	mov	r8,-131072
800030f6:	f0 f9 08 00 	ld.w	r9,r8[2048]
800030fa:	af c9       	cbr	r9,0xe
800030fc:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
80003100:	30 29       	mov	r9,2
80003102:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
80003106:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000310a:	af a9       	sbr	r9,0xe
8000310c:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
80003110:	f0 fc 08 04 	ld.w	r12,r8[2052]
80003114:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
80003118:	f0 1f 00 1b 	mcall	80003184 <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
8000311c:	fe 68 00 00 	mov	r8,-131072
80003120:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
80003124:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
80003128:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000312a:	48 f9       	lddpc	r9,80003164 <udd_interrupt+0x604>
8000312c:	b2 08       	st.h	r9[0x0],r8
8000312e:	fe 9f fe 40 	bral	80002dae <udd_interrupt+0x24e>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80003132:	fe 68 00 00 	mov	r8,-131072
80003136:	70 18       	ld.w	r8,r8[0x4]
80003138:	e2 18 00 08 	andl	r8,0x8,COH
8000313c:	c8 e0       	breq	80003058 <udd_interrupt+0x4f8>
8000313e:	c7 8b       	rjmp	8000302e <udd_interrupt+0x4ce>
80003140:	80 00       	ld.sh	r0,r0[0x0]
80003142:	37 cc       	mov	r12,124
80003144:	00 00       	add	r0,r0
80003146:	07 1c       	ld.sh	r12,r3++
80003148:	80 00       	ld.sh	r0,r0[0x0]
8000314a:	24 84       	sub	r4,72
8000314c:	80 00       	ld.sh	r0,r0[0x0]
8000314e:	26 c4       	sub	r4,108
80003150:	80 00       	ld.sh	r0,r0[0x0]
80003152:	24 6c       	sub	r12,70
80003154:	00 00       	add	r0,r0
80003156:	0c a4       	st.w	r6++,r4
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	3a 4c       	mov	r12,-92
8000315c:	00 00       	add	r0,r0
8000315e:	07 20       	ld.uh	r0,r3++
80003160:	00 00       	add	r0,r0
80003162:	06 e4       	st.h	--r3,r4
80003164:	00 00       	add	r0,r0
80003166:	07 1a       	ld.sh	r10,r3++
80003168:	80 00       	ld.sh	r0,r0[0x0]
8000316a:	27 24       	sub	r4,114
8000316c:	80 00       	ld.sh	r0,r0[0x0]
8000316e:	26 f8       	sub	r8,111
80003170:	00 00       	add	r0,r0
80003172:	06 e8       	st.h	--r3,r8
80003174:	80 00       	ld.sh	r0,r0[0x0]
80003176:	24 98       	sub	r8,73
80003178:	80 00       	ld.sh	r0,r0[0x0]
8000317a:	39 ec       	mov	r12,-98
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	29 82       	sub	r2,-104
80003180:	80 00       	ld.sh	r0,r0[0x0]
80003182:	26 50       	sub	r0,101
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	3f 4c       	mov	r12,-12

80003188 <_stext>:
80003188:	48 dd       	lddpc	sp,800031bc <udata_clear_loop_end+0x4>
8000318a:	fe c0 df 8a 	sub	r0,pc,-8310
8000318e:	e3 b0 00 01 	mtsr	0x4,r0
80003192:	d5 53       	csrf	0x15
80003194:	48 b0       	lddpc	r0,800031c0 <udata_clear_loop_end+0x8>
80003196:	48 c1       	lddpc	r1,800031c4 <udata_clear_loop_end+0xc>
80003198:	02 30       	cp.w	r0,r1
8000319a:	c0 62       	brcc	800031a6 <idata_load_loop_end>
8000319c:	48 b2       	lddpc	r2,800031c8 <udata_clear_loop_end+0x10>

8000319e <idata_load_loop>:
8000319e:	a5 05       	ld.d	r4,r2++
800031a0:	a1 24       	st.d	r0++,r4
800031a2:	02 30       	cp.w	r0,r1
800031a4:	cf d3       	brcs	8000319e <idata_load_loop>

800031a6 <idata_load_loop_end>:
800031a6:	48 a0       	lddpc	r0,800031cc <udata_clear_loop_end+0x14>
800031a8:	48 a1       	lddpc	r1,800031d0 <udata_clear_loop_end+0x18>
800031aa:	02 30       	cp.w	r0,r1
800031ac:	c0 62       	brcc	800031b8 <udata_clear_loop_end>
800031ae:	30 02       	mov	r2,0
800031b0:	30 03       	mov	r3,0

800031b2 <udata_clear_loop>:
800031b2:	a1 22       	st.d	r0++,r2
800031b4:	02 30       	cp.w	r0,r1
800031b6:	cf e3       	brcs	800031b2 <udata_clear_loop>

800031b8 <udata_clear_loop_end>:
800031b8:	fe cf f0 a4 	sub	pc,pc,-3932
800031bc:	00 01       	add	r1,r0
800031be:	00 00       	add	r0,r0
800031c0:	00 00       	add	r0,r0
800031c2:	00 08       	add	r8,r0
800031c4:	00 00       	add	r0,r0
800031c6:	05 d8       	ld.ub	r8,r2[0x5]
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	55 58       	stdsp	sp[0x154],r8
800031cc:	00 00       	add	r0,r0
800031ce:	05 d8       	ld.ub	r8,r2[0x5]
800031d0:	00 00       	add	r0,r0
800031d2:	0c d8       	st.w	--r6,r8

800031d4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
800031d4:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800031d6:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800031da:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800031dc:	fe 78 0c 00 	mov	r8,-62464
800031e0:	e0 6a 03 07 	mov	r10,775
800031e4:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800031e6:	70 0a       	ld.w	r10,r8[0x0]
800031e8:	a3 aa       	sbr	r10,0x2
800031ea:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800031ec:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800031f0:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800031f2:	e2 19 00 80 	andl	r9,0x80,COH
800031f6:	cf d0       	breq	800031f0 <sysclk_init+0x1c>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(0);
		osc_wait_ready(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
800031f8:	e0 6c 1b 00 	mov	r12,6912
800031fc:	ea 1c 00 b7 	orh	r12,0xb7
80003200:	f0 1f 00 0e 	mcall	80003238 <sysclk_init+0x64>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003204:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003208:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000320a:	fe 78 0c 00 	mov	r8,-62464
8000320e:	70 0a       	ld.w	r10,r8[0x0]
80003210:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80003214:	a1 aa       	sbr	r10,0x0
	AVR32_PM.mcctrl = mcctrl;
80003216:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003218:	e3 b9 00 00 	mtsr	0x0,r9
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
8000321c:	e0 79 00 02 	mov	r9,65538
80003220:	91 29       	st.w	r8[0x8],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80003222:	30 b9       	mov	r9,11
80003224:	ea 19 00 18 	orh	r9,0x18
80003228:	91 49       	st.w	r8[0x10],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_PBBMASK)
	AVR32_PM.pbbmask = SYSCLK_INIT_MINIMAL_PBBMASK | CONFIG_SYSCLK_INIT_PBBMASK;
8000322a:	30 09       	mov	r9,0
8000322c:	91 59       	st.w	r8[0x14],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
8000322e:	e0 69 0e 03 	mov	r9,3587
80003232:	91 39       	st.w	r8[0xc],r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80003234:	d8 02       	popm	pc
80003236:	00 00       	add	r0,r0
80003238:	80 00       	ld.sh	r0,r0[0x0]
8000323a:	20 a8       	sub	r8,10

8000323c <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000323c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003240:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80003242:	fe 78 0c 00 	mov	r8,-62464
80003246:	71 59       	ld.w	r9,r8[0x54]
80003248:	e2 19 00 40 	andl	r9,0x40,COH
8000324c:	cf d0       	breq	80003246 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000324e:	a3 6c       	lsl	r12,0x2
80003250:	e0 2c f3 f8 	sub	r12,62456
80003254:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80003256:	30 19       	mov	r9,1
80003258:	f2 0b 09 4b 	lsl	r11,r9,r11
8000325c:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000325e:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003260:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
80003264:	5e fc       	retal	r12
80003266:	d7 03       	nop

80003268 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003268:	eb cd 40 e0 	pushm	r5-r7,lr
8000326c:	18 96       	mov	r6,r12
8000326e:	58 9c       	cp.w	r12,9
80003270:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003272:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80003276:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80003278:	48 f8       	lddpc	r8,800032b4 <sysclk_enable_pbb_module+0x4c>
8000327a:	f0 07 07 09 	ld.ub	r9,r8[r7]
8000327e:	30 08       	mov	r8,0
80003280:	f0 09 18 00 	cp.b	r9,r8
80003284:	c0 a1       	brne	80003298 <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003286:	ee 0b 15 01 	lsl	r11,r7,0x1
8000328a:	f9 bb 01 06 	movne	r11,6
8000328e:	f9 bb 00 02 	moveq	r11,2
80003292:	30 1c       	mov	r12,1
80003294:	f0 1f 00 09 	mcall	800032b8 <sysclk_enable_pbb_module+0x50>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
80003298:	48 78       	lddpc	r8,800032b4 <sysclk_enable_pbb_module+0x4c>
8000329a:	f0 07 07 09 	ld.ub	r9,r8[r7]
8000329e:	2f f9       	sub	r9,-1
800032a0:	f0 07 0b 09 	st.b	r8[r7],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032a4:	e3 b5 00 00 	mtsr	0x0,r5

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800032a8:	0c 9b       	mov	r11,r6
800032aa:	30 3c       	mov	r12,3
800032ac:	f0 1f 00 03 	mcall	800032b8 <sysclk_enable_pbb_module+0x50>
}
800032b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800032b4:	00 00       	add	r0,r0
800032b6:	07 24       	ld.uh	r4,r3++
800032b8:	80 00       	ld.sh	r0,r0[0x0]
800032ba:	32 3c       	mov	r12,35

800032bc <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800032bc:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800032be:	30 1c       	mov	r12,1
800032c0:	f0 1f 00 0f 	mcall	800032fc <sysclk_enable_usb+0x40>
800032c4:	30 3b       	mov	r11,3
800032c6:	30 1c       	mov	r12,1
800032c8:	f0 1f 00 0e 	mcall	80003300 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032cc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032d0:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032d2:	fe 78 0c 00 	mov	r8,-62464
800032d6:	e0 6a 03 07 	mov	r10,775
800032da:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032dc:	70 0a       	ld.w	r10,r8[0x0]
800032de:	a3 aa       	sbr	r10,0x2
800032e0:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032e2:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032e6:	71 59       	ld.w	r9,r8[0x54]
800032e8:	e2 19 00 80 	andl	r9,0x80,COH
800032ec:	cf d0       	breq	800032e6 <sysclk_enable_usb+0x2a>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800032ee:	30 49       	mov	r9,4
800032f0:	fe 78 0c 00 	mov	r8,-62464
800032f4:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
800032f8:	d8 02       	popm	pc
800032fa:	00 00       	add	r0,r0
800032fc:	80 00       	ld.sh	r0,r0[0x0]
800032fe:	32 68       	mov	r8,38
80003300:	80 00       	ld.sh	r0,r0[0x0]
80003302:	32 3c       	mov	r12,35

80003304 <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
80003304:	5e fc       	retal	r12
80003306:	d7 03       	nop

80003308 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
80003308:	49 e8       	lddpc	r8,80003380 <udi_cdc_comm_setup+0x78>
8000330a:	11 88       	ld.ub	r8,r8[0x0]
8000330c:	30 09       	mov	r9,0
8000330e:	f2 08 18 00 	cp.b	r8,r9
80003312:	c1 84       	brge	80003342 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003314:	e2 18 00 60 	andl	r8,0x60,COH
80003318:	e0 48 00 20 	cp.w	r8,32
8000331c:	c3 11       	brne	8000337e <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000331e:	49 98       	lddpc	r8,80003380 <udi_cdc_comm_setup+0x78>
80003320:	11 99       	ld.ub	r9,r8[0x1]
80003322:	32 18       	mov	r8,33
80003324:	f0 09 18 00 	cp.b	r9,r8
80003328:	c2 b1       	brne	8000337e <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000332a:	49 68       	lddpc	r8,80003380 <udi_cdc_comm_setup+0x78>
8000332c:	90 39       	ld.sh	r9,r8[0x6]
8000332e:	30 78       	mov	r8,7
80003330:	f0 09 19 00 	cp.h	r9,r8
80003334:	c2 51       	brne	8000337e <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
80003336:	49 38       	lddpc	r8,80003380 <udi_cdc_comm_setup+0x78>
80003338:	49 39       	lddpc	r9,80003384 <udi_cdc_comm_setup+0x7c>
8000333a:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
8000333c:	30 79       	mov	r9,7
8000333e:	b0 69       	st.h	r8[0xc],r9
80003340:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003342:	e2 18 00 60 	andl	r8,0x60,COH
80003346:	e0 48 00 20 	cp.w	r8,32
8000334a:	c1 a1       	brne	8000337e <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000334c:	48 d8       	lddpc	r8,80003380 <udi_cdc_comm_setup+0x78>
8000334e:	11 98       	ld.ub	r8,r8[0x1]
80003350:	32 09       	mov	r9,32
80003352:	f2 08 18 00 	cp.b	r8,r9
80003356:	c0 60       	breq	80003362 <udi_cdc_comm_setup+0x5a>
80003358:	32 29       	mov	r9,34
8000335a:	f2 08 18 00 	cp.b	r8,r9
8000335e:	c1 01       	brne	8000337e <udi_cdc_comm_setup+0x76>
80003360:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003362:	48 88       	lddpc	r8,80003380 <udi_cdc_comm_setup+0x78>
80003364:	90 39       	ld.sh	r9,r8[0x6]
80003366:	30 78       	mov	r8,7
80003368:	f0 09 19 00 	cp.h	r9,r8
8000336c:	c0 91       	brne	8000337e <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
8000336e:	48 58       	lddpc	r8,80003380 <udi_cdc_comm_setup+0x78>
80003370:	48 69       	lddpc	r9,80003388 <udi_cdc_comm_setup+0x80>
80003372:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003374:	48 49       	lddpc	r9,80003384 <udi_cdc_comm_setup+0x7c>
80003376:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003378:	30 79       	mov	r9,7
8000337a:	b0 69       	st.h	r8[0xc],r9
8000337c:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
8000337e:	5e fd       	retal	0
80003380:	00 00       	add	r0,r0
80003382:	0c a4       	st.w	r6++,r4
80003384:	00 00       	add	r0,r0
80003386:	07 28       	ld.uh	r8,r3++
80003388:	80 00       	ld.sh	r0,r0[0x0]
8000338a:	33 90       	mov	r0,57

8000338c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
8000338c:	5e fd       	retal	0

8000338e <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
8000338e:	5e fd       	retal	0

80003390 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003390:	5e fc       	retal	r12
80003392:	d7 03       	nop

80003394 <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
80003394:	48 68       	lddpc	r8,800033ac <udi_cdc_is_rx_ready+0x18>
80003396:	11 8a       	ld.ub	r10,r8[0x0]
80003398:	48 68       	lddpc	r8,800033b0 <udi_cdc_is_rx_ready+0x1c>
8000339a:	90 08       	ld.sh	r8,r8[0x0]
8000339c:	48 69       	lddpc	r9,800033b4 <udi_cdc_is_rx_ready+0x20>
8000339e:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
800033a2:	f0 09 19 00 	cp.h	r9,r8
}
800033a6:	5f bc       	srhi	r12
800033a8:	5e fc       	retal	r12
800033aa:	00 00       	add	r0,r0
800033ac:	00 00       	add	r0,r0
800033ae:	09 bc       	ld.ub	r12,r4[0x3]
800033b0:	00 00       	add	r0,r0
800033b2:	09 b8       	ld.ub	r8,r4[0x3]
800033b4:	00 00       	add	r0,r0
800033b6:	09 b4       	ld.ub	r4,r4[0x3]

800033b8 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
800033b8:	49 68       	lddpc	r8,80003410 <udi_cdc_is_tx_ready+0x58>
800033ba:	11 89       	ld.ub	r9,r8[0x0]
800033bc:	49 68       	lddpc	r8,80003414 <udi_cdc_is_tx_ready+0x5c>
800033be:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033c2:	e0 68 01 40 	mov	r8,320
800033c6:	f0 09 19 00 	cp.h	r9,r8
800033ca:	c0 20       	breq	800033ce <udi_cdc_is_tx_ready+0x16>
800033cc:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800033ce:	49 38       	lddpc	r8,80003418 <udi_cdc_is_tx_ready+0x60>
800033d0:	11 88       	ld.ub	r8,r8[0x0]
800033d2:	58 08       	cp.w	r8,0
800033d4:	c1 21       	brne	800033f8 <udi_cdc_is_tx_ready+0x40>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033d6:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800033da:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800033dc:	49 09       	lddpc	r9,8000341c <udi_cdc_is_tx_ready+0x64>
800033de:	13 89       	ld.ub	r9,r9[0x0]
800033e0:	58 09       	cp.w	r9,0
800033e2:	c0 91       	brne	800033f4 <udi_cdc_is_tx_ready+0x3c>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800033e4:	30 1a       	mov	r10,1
800033e6:	48 d9       	lddpc	r9,80003418 <udi_cdc_is_tx_ready+0x60>
800033e8:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800033ea:	48 a9       	lddpc	r9,80003410 <udi_cdc_is_tx_ready+0x58>
800033ec:	13 8a       	ld.ub	r10,r9[0x0]
800033ee:	58 0a       	cp.w	r10,0
800033f0:	5f 0a       	sreq	r10
800033f2:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800033f4:	e3 b8 00 00 	mtsr	0x0,r8
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800033f8:	48 68       	lddpc	r8,80003410 <udi_cdc_is_tx_ready+0x58>
800033fa:	11 89       	ld.ub	r9,r8[0x0]
800033fc:	48 68       	lddpc	r8,80003414 <udi_cdc_is_tx_ready+0x5c>
800033fe:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80003402:	e0 68 01 40 	mov	r8,320
80003406:	f0 09 19 00 	cp.h	r9,r8
8000340a:	5f 1c       	srne	r12
}
8000340c:	5e fc       	retal	r12
8000340e:	00 00       	add	r0,r0
80003410:	00 00       	add	r0,r0
80003412:	07 2f       	ld.uh	pc,r3++
80003414:	00 00       	add	r0,r0
80003416:	07 30       	ld.ub	r0,r3++
80003418:	00 00       	add	r0,r0
8000341a:	0c 41       	or	r1,r6
8000341c:	00 00       	add	r0,r0
8000341e:	09 be       	ld.ub	lr,r4[0x3]

80003420 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
80003420:	eb cd 40 fe 	pushm	r1-r7,lr
80003424:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003426:	49 88       	lddpc	r8,80003484 <udi_cdc_putc+0x64>
80003428:	11 e9       	ld.ub	r9,r8[0x6]
8000342a:	30 98       	mov	r8,9
8000342c:	f0 09 18 00 	cp.b	r9,r8
80003430:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003432:	49 66       	lddpc	r6,80003488 <udi_cdc_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003434:	49 63       	lddpc	r3,8000348c <udi_cdc_putc+0x6c>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003436:	49 75       	lddpc	r5,80003490 <udi_cdc_putc+0x70>
80003438:	49 72       	lddpc	r2,80003494 <udi_cdc_putc+0x74>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000343a:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
8000343c:	f0 1f 00 17 	mcall	80003498 <udi_cdc_putc+0x78>
80003440:	c0 51       	brne	8000344a <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
80003442:	0d 88       	ld.ub	r8,r6[0x0]
80003444:	58 08       	cp.w	r8,0
80003446:	cf b1       	brne	8000343c <udi_cdc_putc+0x1c>
80003448:	c1 b8       	rjmp	8000347e <udi_cdc_putc+0x5e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000344a:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000344e:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003450:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003452:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
80003456:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
8000345a:	f0 08 00 2b 	add	r11,r8,r8<<0x2
8000345e:	a7 6b       	lsl	r11,0x6
80003460:	18 0b       	add	r11,r12
80003462:	e4 0b 0b 07 	st.b	r2[r11],r7
80003466:	2f f9       	sub	r9,-1
80003468:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000346c:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003470:	58 04       	cp.w	r4,0
80003472:	c0 31       	brne	80003478 <udi_cdc_putc+0x58>
80003474:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003478:	a9 47       	asr	r7,0x8
8000347a:	02 94       	mov	r4,r1
8000347c:	ce 0b       	rjmp	8000343c <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
8000347e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003482:	00 00       	add	r0,r0
80003484:	00 00       	add	r0,r0
80003486:	07 28       	ld.uh	r8,r3++
80003488:	00 00       	add	r0,r0
8000348a:	09 bd       	ld.ub	sp,r4[0x3]
8000348c:	00 00       	add	r0,r0
8000348e:	07 2f       	ld.uh	pc,r3++
80003490:	00 00       	add	r0,r0
80003492:	07 30       	ld.ub	r0,r3++
80003494:	00 00       	add	r0,r0
80003496:	07 34       	ld.ub	r4,r3++
80003498:	80 00       	ld.sh	r0,r0[0x0]
8000349a:	33 b8       	mov	r8,59

8000349c <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
8000349c:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034a0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800034a4:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
800034a6:	49 88       	lddpc	r8,80003504 <udi_cdc_rx_start+0x68>
800034a8:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing ||
800034aa:	49 88       	lddpc	r8,80003508 <udi_cdc_rx_start+0x6c>
800034ac:	11 88       	ld.ub	r8,r8[0x0]
800034ae:	58 08       	cp.w	r8,0
800034b0:	c0 a1       	brne	800034c4 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
800034b2:	49 78       	lddpc	r8,8000350c <udi_cdc_rx_start+0x70>
800034b4:	90 08       	ld.sh	r8,r8[0x0]
800034b6:	49 7a       	lddpc	r10,80003510 <udi_cdc_rx_start+0x74>
800034b8:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
800034bc:	f0 0a 19 00 	cp.h	r10,r8
800034c0:	e0 88 00 06 	brls	800034cc <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034c4:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800034c8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800034cc:	30 0a       	mov	r10,0
800034ce:	49 08       	lddpc	r8,8000350c <udi_cdc_rx_start+0x70>
800034d0:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800034d2:	58 07       	cp.w	r7,0
800034d4:	5f 0a       	sreq	r10
800034d6:	48 c8       	lddpc	r8,80003504 <udi_cdc_rx_start+0x68>
800034d8:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800034da:	30 1a       	mov	r10,1
800034dc:	48 b8       	lddpc	r8,80003508 <udi_cdc_rx_start+0x6c>
800034de:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034e0:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800034e4:	f0 1f 00 0c 	mcall	80003514 <udi_cdc_rx_start+0x78>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800034e8:	ee 07 00 27 	add	r7,r7,r7<<0x2
800034ec:	a7 67       	lsl	r7,0x6
800034ee:	48 b8       	lddpc	r8,80003518 <udi_cdc_rx_start+0x7c>
800034f0:	e0 69 01 40 	mov	r9,320
800034f4:	48 aa       	lddpc	r10,8000351c <udi_cdc_rx_start+0x80>
800034f6:	0e 0a       	add	r10,r7
800034f8:	30 1b       	mov	r11,1
800034fa:	30 2c       	mov	r12,2
800034fc:	f0 1f 00 09 	mcall	80003520 <udi_cdc_rx_start+0x84>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
80003500:	e3 cd 80 80 	ldm	sp++,r7,pc
80003504:	00 00       	add	r0,r0
80003506:	09 bc       	ld.ub	r12,r4[0x3]
80003508:	00 00       	add	r0,r0
8000350a:	0c 40       	or	r0,r6
8000350c:	00 00       	add	r0,r0
8000350e:	09 b8       	ld.ub	r8,r4[0x3]
80003510:	00 00       	add	r0,r0
80003512:	09 b4       	ld.ub	r4,r4[0x3]
80003514:	80 00       	ld.sh	r0,r0[0x0]
80003516:	33 94       	mov	r4,57
80003518:	80 00       	ld.sh	r0,r0[0x0]
8000351a:	35 a4       	mov	r4,90
8000351c:	00 00       	add	r0,r0
8000351e:	09 c0       	ld.ub	r0,r4[0x4]
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	25 08       	sub	r8,80

80003524 <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
80003524:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003526:	49 98       	lddpc	r8,80003588 <udi_cdc_getc+0x64>
80003528:	11 e9       	ld.ub	r9,r8[0x6]
8000352a:	30 98       	mov	r8,9
8000352c:	f0 09 18 00 	cp.b	r9,r8
80003530:	5f 02       	sreq	r2
80003532:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003534:	49 66       	lddpc	r6,8000358c <udi_cdc_getc+0x68>
80003536:	49 77       	lddpc	r7,80003590 <udi_cdc_getc+0x6c>
80003538:	49 75       	lddpc	r5,80003594 <udi_cdc_getc+0x70>
		if (!udi_cdc_running) {
8000353a:	49 84       	lddpc	r4,80003598 <udi_cdc_getc+0x74>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
8000353c:	49 81       	lddpc	r1,8000359c <udi_cdc_getc+0x78>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000353e:	06 90       	mov	r0,r3
80003540:	c0 48       	rjmp	80003548 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
80003542:	09 88       	ld.ub	r8,r4[0x0]
80003544:	58 08       	cp.w	r8,0
80003546:	c1 d0       	breq	80003580 <udi_cdc_getc+0x5c>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003548:	0d 89       	ld.ub	r9,r6[0x0]
8000354a:	8e 08       	ld.sh	r8,r7[0x0]
8000354c:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
80003550:	f0 09 19 00 	cp.h	r9,r8
80003554:	fe 98 ff f7 	brls	80003542 <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003558:	0d 88       	ld.ub	r8,r6[0x0]
8000355a:	8e 09       	ld.sh	r9,r7[0x0]
8000355c:	5c 79       	castu.h	r9
8000355e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003562:	a7 68       	lsl	r8,0x6
80003564:	12 08       	add	r8,r9
80003566:	e2 08 07 08 	ld.ub	r8,r1[r8]
8000356a:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
8000356c:	8e 08       	ld.sh	r8,r7[0x0]
8000356e:	2f f8       	sub	r8,-1
80003570:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
80003572:	f0 1f 00 0c 	mcall	800035a0 <udi_cdc_getc+0x7c>

	if (b_databit_9) {
80003576:	58 02       	cp.w	r2,0
80003578:	c0 50       	breq	80003582 <udi_cdc_getc+0x5e>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000357a:	a9 63       	lsl	r3,0x8
8000357c:	00 92       	mov	r2,r0
8000357e:	ce 5b       	rjmp	80003548 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
80003580:	30 03       	mov	r3,0
	}
	return rx_data;
}
80003582:	06 9c       	mov	r12,r3
80003584:	d8 32       	popm	r0-r7,pc
80003586:	00 00       	add	r0,r0
80003588:	00 00       	add	r0,r0
8000358a:	07 28       	ld.uh	r8,r3++
8000358c:	00 00       	add	r0,r0
8000358e:	09 bc       	ld.ub	r12,r4[0x3]
80003590:	00 00       	add	r0,r0
80003592:	09 b8       	ld.ub	r8,r4[0x3]
80003594:	00 00       	add	r0,r0
80003596:	09 b4       	ld.ub	r4,r4[0x3]
80003598:	00 00       	add	r0,r0
8000359a:	09 bd       	ld.ub	sp,r4[0x3]
8000359c:	00 00       	add	r0,r0
8000359e:	09 c0       	ld.ub	r0,r4[0x4]
800035a0:	80 00       	ld.sh	r0,r0[0x0]
800035a2:	34 9c       	mov	r12,73

800035a4 <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
800035a4:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
800035a6:	58 0c       	cp.w	r12,0
800035a8:	c1 01       	brne	800035c8 <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
800035aa:	48 98       	lddpc	r8,800035cc <udi_cdc_data_recevied+0x28>
800035ac:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
800035ae:	58 08       	cp.w	r8,0
800035b0:	f9 b8 01 00 	movne	r8,0
800035b4:	f9 b8 00 02 	moveq	r8,2
800035b8:	48 69       	lddpc	r9,800035d0 <udi_cdc_data_recevied+0x2c>
800035ba:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
800035be:	30 09       	mov	r9,0
800035c0:	48 58       	lddpc	r8,800035d4 <udi_cdc_data_recevied+0x30>
800035c2:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
800035c4:	f0 1f 00 05 	mcall	800035d8 <udi_cdc_data_recevied+0x34>
800035c8:	d8 02       	popm	pc
800035ca:	00 00       	add	r0,r0
800035cc:	00 00       	add	r0,r0
800035ce:	09 bc       	ld.ub	r12,r4[0x3]
800035d0:	00 00       	add	r0,r0
800035d2:	09 b4       	ld.ub	r4,r4[0x3]
800035d4:	00 00       	add	r0,r0
800035d6:	0c 40       	or	r0,r6
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	34 9c       	mov	r12,73

800035dc <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800035dc:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800035e0:	4a c8       	lddpc	r8,80003690 <udi_cdc_tx_send+0xb4>
800035e2:	11 88       	ld.ub	r8,r8[0x0]
800035e4:	58 08       	cp.w	r8,0
800035e6:	c5 21       	brne	8000368a <udi_cdc_tx_send+0xae>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800035e8:	f0 1f 00 2b 	mcall	80003694 <udi_cdc_tx_send+0xb8>
800035ec:	c0 a0       	breq	80003600 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800035ee:	f0 1f 00 2b 	mcall	80003698 <udi_cdc_tx_send+0xbc>
800035f2:	4a b8       	lddpc	r8,8000369c <udi_cdc_tx_send+0xc0>
800035f4:	90 08       	ld.sh	r8,r8[0x0]
800035f6:	f8 08 19 00 	cp.h	r8,r12
800035fa:	c0 a1       	brne	8000360e <udi_cdc_tx_send+0x32>
800035fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
80003600:	f0 1f 00 28 	mcall	800036a0 <udi_cdc_tx_send+0xc4>
80003604:	4a 68       	lddpc	r8,8000369c <udi_cdc_tx_send+0xc0>
80003606:	90 08       	ld.sh	r8,r8[0x0]
80003608:	f8 08 19 00 	cp.h	r8,r12
8000360c:	c3 f0       	breq	8000368a <udi_cdc_tx_send+0xae>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000360e:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003612:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
80003614:	4a 49       	lddpc	r9,800036a4 <udi_cdc_tx_send+0xc8>
80003616:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
80003618:	4a 49       	lddpc	r9,800036a8 <udi_cdc_tx_send+0xcc>
8000361a:	13 89       	ld.ub	r9,r9[0x0]
8000361c:	58 09       	cp.w	r9,0
8000361e:	c0 61       	brne	8000362a <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
80003620:	58 07       	cp.w	r7,0
80003622:	5f 0a       	sreq	r10
80003624:	4a 09       	lddpc	r9,800036a4 <udi_cdc_tx_send+0xc8>
80003626:	b2 8a       	st.b	r9[0x0],r10
80003628:	c0 38       	rjmp	8000362e <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
8000362a:	58 07       	cp.w	r7,0
8000362c:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
8000362e:	30 1a       	mov	r10,1
80003630:	49 89       	lddpc	r9,80003690 <udi_cdc_tx_send+0xb4>
80003632:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003634:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003638:	0e 95       	mov	r5,r7
8000363a:	49 d8       	lddpc	r8,800036ac <udi_cdc_tx_send+0xd0>
8000363c:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003640:	e0 68 01 40 	mov	r8,320
80003644:	f0 09 19 00 	cp.h	r9,r8
80003648:	5f 16       	srne	r6
	if (b_short_packet) {
8000364a:	58 06       	cp.w	r6,0
8000364c:	c0 e0       	breq	80003668 <udi_cdc_tx_send+0x8c>
		if (udd_is_high_speed()) {
8000364e:	f0 1f 00 12 	mcall	80003694 <udi_cdc_tx_send+0xb8>
80003652:	c0 60       	breq	8000365e <udi_cdc_tx_send+0x82>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
80003654:	f0 1f 00 11 	mcall	80003698 <udi_cdc_tx_send+0xbc>
80003658:	49 18       	lddpc	r8,8000369c <udi_cdc_tx_send+0xc0>
8000365a:	b0 0c       	st.h	r8[0x0],r12
8000365c:	c0 98       	rjmp	8000366e <udi_cdc_tx_send+0x92>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
8000365e:	f0 1f 00 11 	mcall	800036a0 <udi_cdc_tx_send+0xc4>
80003662:	48 f8       	lddpc	r8,8000369c <udi_cdc_tx_send+0xc0>
80003664:	b0 0c       	st.h	r8[0x0],r12
80003666:	c0 48       	rjmp	8000366e <udi_cdc_tx_send+0x92>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
80003668:	30 09       	mov	r9,0
8000366a:	48 d8       	lddpc	r8,8000369c <udi_cdc_tx_send+0xc0>
8000366c:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
8000366e:	ee 07 00 27 	add	r7,r7,r7<<0x2
80003672:	a7 67       	lsl	r7,0x6
80003674:	48 f8       	lddpc	r8,800036b0 <udi_cdc_tx_send+0xd4>
80003676:	48 e9       	lddpc	r9,800036ac <udi_cdc_tx_send+0xd0>
80003678:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
8000367c:	48 ea       	lddpc	r10,800036b4 <udi_cdc_tx_send+0xd8>
8000367e:	0e 0a       	add	r10,r7
80003680:	0c 9b       	mov	r11,r6
80003682:	e0 6c 00 81 	mov	r12,129
80003686:	f0 1f 00 0d 	mcall	800036b8 <udi_cdc_tx_send+0xdc>
8000368a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000368e:	00 00       	add	r0,r0
80003690:	00 00       	add	r0,r0
80003692:	09 be       	ld.ub	lr,r4[0x3]
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	23 12       	sub	r2,49
80003698:	80 00       	ld.sh	r0,r0[0x0]
8000369a:	23 4e       	sub	lr,52
8000369c:	00 00       	add	r0,r0
8000369e:	09 ba       	ld.ub	r10,r4[0x3]
800036a0:	80 00       	ld.sh	r0,r0[0x0]
800036a2:	23 42       	sub	r2,52
800036a4:	00 00       	add	r0,r0
800036a6:	07 2f       	ld.uh	pc,r3++
800036a8:	00 00       	add	r0,r0
800036aa:	0c 41       	or	r1,r6
800036ac:	00 00       	add	r0,r0
800036ae:	07 30       	ld.ub	r0,r3++
800036b0:	80 00       	ld.sh	r0,r0[0x0]
800036b2:	36 bc       	mov	r12,107
800036b4:	00 00       	add	r0,r0
800036b6:	07 34       	ld.ub	r4,r3++
800036b8:	80 00       	ld.sh	r0,r0[0x0]
800036ba:	25 08       	sub	r8,80

800036bc <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
800036bc:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
800036be:	58 0c       	cp.w	r12,0
800036c0:	c1 21       	brne	800036e4 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
800036c2:	48 a8       	lddpc	r8,800036e8 <udi_cdc_data_sent+0x2c>
800036c4:	11 88       	ld.ub	r8,r8[0x0]
800036c6:	58 08       	cp.w	r8,0
800036c8:	f9 b9 01 00 	movne	r9,0
800036cc:	f9 b9 00 02 	moveq	r9,2
800036d0:	30 08       	mov	r8,0
800036d2:	48 7a       	lddpc	r10,800036ec <udi_cdc_data_sent+0x30>
800036d4:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
800036d8:	48 69       	lddpc	r9,800036f0 <udi_cdc_data_sent+0x34>
800036da:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800036dc:	48 69       	lddpc	r9,800036f4 <udi_cdc_data_sent+0x38>
800036de:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800036e0:	f0 1f 00 06 	mcall	800036f8 <udi_cdc_data_sent+0x3c>
800036e4:	d8 02       	popm	pc
800036e6:	00 00       	add	r0,r0
800036e8:	00 00       	add	r0,r0
800036ea:	07 2f       	ld.uh	pc,r3++
800036ec:	00 00       	add	r0,r0
800036ee:	07 30       	ld.ub	r0,r3++
800036f0:	00 00       	add	r0,r0
800036f2:	0c 41       	or	r1,r6
800036f4:	00 00       	add	r0,r0
800036f6:	09 be       	ld.ub	lr,r4[0x3]
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	35 dc       	mov	r12,93

800036fc <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800036fc:	d4 01       	pushm	lr
	udi_cdc_tx_send();
800036fe:	f0 1f 00 02 	mcall	80003704 <udi_cdc_data_sof_notify+0x8>
}
80003702:	d8 02       	popm	pc
80003704:	80 00       	ld.sh	r0,r0[0x0]
80003706:	35 dc       	mov	r12,93

80003708 <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
80003708:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
8000370c:	30 06       	mov	r6,0
8000370e:	48 f8       	lddpc	r8,80003748 <udi_cdc_data_enable+0x40>
80003710:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
80003712:	48 f8       	lddpc	r8,8000374c <udi_cdc_data_enable+0x44>
80003714:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
80003716:	48 f8       	lddpc	r8,80003750 <udi_cdc_data_enable+0x48>
80003718:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
8000371a:	48 f8       	lddpc	r8,80003754 <udi_cdc_data_enable+0x4c>
8000371c:	30 07       	mov	r7,0
8000371e:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
80003720:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
80003722:	48 e8       	lddpc	r8,80003758 <udi_cdc_data_enable+0x50>
80003724:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
80003726:	f0 1f 00 0e 	mcall	8000375c <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
8000372a:	48 e8       	lddpc	r8,80003760 <udi_cdc_data_enable+0x58>
8000372c:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
8000372e:	48 e8       	lddpc	r8,80003764 <udi_cdc_data_enable+0x5c>
80003730:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
80003732:	48 e8       	lddpc	r8,80003768 <udi_cdc_data_enable+0x60>
80003734:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
80003736:	48 e8       	lddpc	r8,8000376c <udi_cdc_data_enable+0x64>
80003738:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
8000373a:	f0 1f 00 0e 	mcall	80003770 <udi_cdc_data_enable+0x68>
8000373e:	48 e8       	lddpc	r8,80003774 <udi_cdc_data_enable+0x6c>
80003740:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
80003742:	11 8c       	ld.ub	r12,r8[0x0]
}
80003744:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003748:	00 00       	add	r0,r0
8000374a:	09 be       	ld.ub	lr,r4[0x3]
8000374c:	00 00       	add	r0,r0
8000374e:	0c 41       	or	r1,r6
80003750:	00 00       	add	r0,r0
80003752:	07 2f       	ld.uh	pc,r3++
80003754:	00 00       	add	r0,r0
80003756:	07 30       	ld.ub	r0,r3++
80003758:	00 00       	add	r0,r0
8000375a:	09 ba       	ld.ub	r10,r4[0x3]
8000375c:	80 00       	ld.sh	r0,r0[0x0]
8000375e:	35 dc       	mov	r12,93
80003760:	00 00       	add	r0,r0
80003762:	0c 40       	or	r0,r6
80003764:	00 00       	add	r0,r0
80003766:	09 bc       	ld.ub	r12,r4[0x3]
80003768:	00 00       	add	r0,r0
8000376a:	09 b4       	ld.ub	r4,r4[0x3]
8000376c:	00 00       	add	r0,r0
8000376e:	09 b8       	ld.ub	r8,r4[0x3]
80003770:	80 00       	ld.sh	r0,r0[0x0]
80003772:	34 9c       	mov	r12,73
80003774:	00 00       	add	r0,r0
80003776:	09 bd       	ld.ub	sp,r4[0x3]

80003778 <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
80003778:	d4 01       	pushm	lr
	udi_cdc_running = false;
8000377a:	30 09       	mov	r9,0
8000377c:	48 38       	lddpc	r8,80003788 <udi_cdc_comm_disable+0x10>
8000377e:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
80003780:	f0 1f 00 03 	mcall	8000378c <udi_cdc_comm_disable+0x14>
}
80003784:	d8 02       	popm	pc
80003786:	00 00       	add	r0,r0
80003788:	00 00       	add	r0,r0
8000378a:	09 bd       	ld.ub	sp,r4[0x3]
8000378c:	80 00       	ld.sh	r0,r0[0x0]
8000378e:	3f 40       	mov	r0,-12

80003790 <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
80003790:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
80003792:	30 0a       	mov	r10,0
80003794:	48 a8       	lddpc	r8,800037bc <udi_cdc_comm_enable+0x2c>
80003796:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
80003798:	48 a8       	lddpc	r8,800037c0 <udi_cdc_comm_enable+0x30>
8000379a:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
8000379c:	48 a8       	lddpc	r8,800037c4 <udi_cdc_comm_enable+0x34>
8000379e:	30 09       	mov	r9,0
800037a0:	b0 8a       	st.b	r8[0x0],r10
800037a2:	3c 2a       	mov	r10,-62
800037a4:	b0 9a       	st.b	r8[0x1],r10
800037a6:	30 1a       	mov	r10,1
800037a8:	b0 aa       	st.b	r8[0x2],r10
800037aa:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
800037ac:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
800037ae:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
800037b0:	30 89       	mov	r9,8
800037b2:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
800037b4:	f0 1f 00 05 	mcall	800037c8 <udi_cdc_comm_enable+0x38>
}
800037b8:	d8 02       	popm	pc
800037ba:	00 00       	add	r0,r0
800037bc:	00 00       	add	r0,r0
800037be:	0c 42       	or	r2,r6
800037c0:	00 00       	add	r0,r0
800037c2:	00 30       	cp.w	r0,r0
800037c4:	00 00       	add	r0,r0
800037c6:	07 28       	ld.uh	r8,r3++
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	3f 34       	mov	r4,-13

800037cc <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800037cc:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800037d0:	49 18       	lddpc	r8,80003814 <udc_sof_notify+0x48>
800037d2:	11 89       	ld.ub	r9,r8[0x0]
800037d4:	30 08       	mov	r8,0
800037d6:	f0 09 18 00 	cp.b	r9,r8
800037da:	c1 b0       	breq	80003810 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037dc:	48 f8       	lddpc	r8,80003818 <udc_sof_notify+0x4c>
800037de:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037e0:	70 09       	ld.w	r9,r8[0x0]
800037e2:	13 ca       	ld.ub	r10,r9[0x4]
800037e4:	30 09       	mov	r9,0
800037e6:	f2 0a 18 00 	cp.b	r10,r9
800037ea:	c1 30       	breq	80003810 <udc_sof_notify+0x44>
800037ec:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037ee:	48 b6       	lddpc	r6,80003818 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800037f0:	70 18       	ld.w	r8,r8[0x4]
800037f2:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037f6:	70 48       	ld.w	r8,r8[0x10]
800037f8:	58 08       	cp.w	r8,0
800037fa:	c0 20       	breq	800037fe <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800037fc:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800037fe:	2f f7       	sub	r7,-1
80003800:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003802:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80003804:	70 09       	ld.w	r9,r8[0x0]
80003806:	13 c9       	ld.ub	r9,r9[0x4]
80003808:	ee 09 18 00 	cp.b	r9,r7
8000380c:	fe 9b ff f2 	brhi	800037f0 <udc_sof_notify+0x24>
80003810:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003814:	00 00       	add	r0,r0
80003816:	0c 4e       	or	lr,r6
80003818:	00 00       	add	r0,r0
8000381a:	0c 48       	or	r8,r6

8000381c <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000381c:	48 78       	lddpc	r8,80003838 <udc_get_eof_conf+0x1c>
8000381e:	70 08       	ld.w	r8,r8[0x0]
80003820:	70 08       	ld.w	r8,r8[0x0]
80003822:	11 aa       	ld.ub	r10,r8[0x2]
80003824:	11 b9       	ld.ub	r9,r8[0x3]
80003826:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000382a:	5c c9       	swap.bh	r9
8000382c:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80003830:	f0 0c 00 0c 	add	r12,r8,r12
80003834:	5e fc       	retal	r12
80003836:	00 00       	add	r0,r0
80003838:	00 00       	add	r0,r0
8000383a:	0c 48       	or	r8,r6

8000383c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000383c:	eb cd 40 e0 	pushm	r5-r7,lr
80003840:	18 97       	mov	r7,r12
80003842:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003844:	49 b8       	lddpc	r8,800038b0 <udc_update_iface_desc+0x74>
80003846:	11 89       	ld.ub	r9,r8[0x0]
80003848:	30 08       	mov	r8,0
8000384a:	f0 09 18 00 	cp.b	r9,r8
8000384e:	c2 f0       	breq	800038ac <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003850:	49 98       	lddpc	r8,800038b4 <udc_update_iface_desc+0x78>
80003852:	70 08       	ld.w	r8,r8[0x0]
80003854:	70 08       	ld.w	r8,r8[0x0]
80003856:	11 c9       	ld.ub	r9,r8[0x4]
80003858:	18 9e       	mov	lr,r12
8000385a:	f8 09 18 00 	cp.b	r9,r12
8000385e:	e0 88 00 27 	brls	800038ac <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80003862:	49 65       	lddpc	r5,800038b8 <udc_update_iface_desc+0x7c>
80003864:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80003866:	f0 1f 00 16 	mcall	800038bc <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
8000386a:	6a 08       	ld.w	r8,r5[0x0]
8000386c:	10 3c       	cp.w	r12,r8
8000386e:	e0 88 00 1f 	brls	800038ac <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003872:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003874:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003876:	11 9a       	ld.ub	r10,r8[0x1]
80003878:	f6 0a 18 00 	cp.b	r10,r11
8000387c:	c0 a1       	brne	80003890 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
8000387e:	11 aa       	ld.ub	r10,r8[0x2]
80003880:	0e 9e       	mov	lr,r7
80003882:	ee 0a 18 00 	cp.b	r10,r7
80003886:	c0 51       	brne	80003890 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
80003888:	11 ba       	ld.ub	r10,r8[0x3]
8000388a:	ec 0a 18 00 	cp.b	r10,r6
8000388e:	c0 b0       	breq	800038a4 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
80003890:	13 88       	ld.ub	r8,r9[0x0]
80003892:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003896:	10 3c       	cp.w	r12,r8
80003898:	fe 9b ff ee 	brhi	80003874 <udc_update_iface_desc+0x38>
8000389c:	48 79       	lddpc	r9,800038b8 <udc_update_iface_desc+0x7c>
8000389e:	93 08       	st.w	r9[0x0],r8
800038a0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800038a4:	48 59       	lddpc	r9,800038b8 <udc_update_iface_desc+0x7c>
800038a6:	93 08       	st.w	r9[0x0],r8
800038a8:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800038ac:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800038b0:	00 00       	add	r0,r0
800038b2:	0c 4e       	or	lr,r6
800038b4:	00 00       	add	r0,r0
800038b6:	0c 48       	or	r8,r6
800038b8:	00 00       	add	r0,r0
800038ba:	0c 54       	eor	r4,r6
800038bc:	80 00       	ld.sh	r0,r0[0x0]
800038be:	38 1c       	mov	r12,-127

800038c0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800038c0:	eb cd 40 c0 	pushm	r6-r7,lr
800038c4:	18 96       	mov	r6,r12
800038c6:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800038c8:	f0 1f 00 11 	mcall	8000390c <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038cc:	0d 88       	ld.ub	r8,r6[0x0]
800038ce:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038d0:	0c 3c       	cp.w	r12,r6
800038d2:	e0 88 00 19 	brls	80003904 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038d6:	0d 98       	ld.ub	r8,r6[0x1]
800038d8:	30 49       	mov	r9,4
800038da:	f2 08 18 00 	cp.b	r8,r9
800038de:	c1 30       	breq	80003904 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038e0:	ee 08 18 00 	cp.b	r8,r7
800038e4:	c0 a1       	brne	800038f8 <udc_next_desc_in_iface+0x38>
800038e6:	c1 08       	rjmp	80003906 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038e8:	0d 98       	ld.ub	r8,r6[0x1]
800038ea:	f2 08 18 00 	cp.b	r8,r9
800038ee:	c0 b0       	breq	80003904 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038f0:	ee 08 18 00 	cp.b	r8,r7
800038f4:	c0 31       	brne	800038fa <udc_next_desc_in_iface+0x3a>
800038f6:	c0 88       	rjmp	80003906 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038f8:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038fa:	0d 88       	ld.ub	r8,r6[0x0]
800038fc:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038fe:	0c 3c       	cp.w	r12,r6
80003900:	fe 9b ff f4 	brhi	800038e8 <udc_next_desc_in_iface+0x28>
80003904:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
80003906:	0c 9c       	mov	r12,r6
80003908:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000390c:	80 00       	ld.sh	r0,r0[0x0]
8000390e:	38 1c       	mov	r12,-127

80003910 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80003910:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80003912:	48 48       	lddpc	r8,80003920 <udc_valid_address+0x10>
80003914:	11 bc       	ld.ub	r12,r8[0x3]
80003916:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000391a:	f0 1f 00 03 	mcall	80003924 <udc_valid_address+0x14>
}
8000391e:	d8 02       	popm	pc
80003920:	00 00       	add	r0,r0
80003922:	0c a4       	st.w	r6++,r4
80003924:	80 00       	ld.sh	r0,r0[0x0]
80003926:	23 14       	sub	r4,49

80003928 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80003928:	eb cd 40 e0 	pushm	r5-r7,lr
8000392c:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
8000392e:	f0 1f 00 12 	mcall	80003974 <udc_iface_enable+0x4c>
80003932:	c1 f0       	breq	80003970 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003934:	49 18       	lddpc	r8,80003978 <udc_iface_enable+0x50>
80003936:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003938:	30 56       	mov	r6,5
8000393a:	0c 9b       	mov	r11,r6
8000393c:	0e 9c       	mov	r12,r7
8000393e:	f0 1f 00 10 	mcall	8000397c <udc_iface_enable+0x54>
80003942:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003944:	c0 d0       	breq	8000395e <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
80003946:	19 ca       	ld.ub	r10,r12[0x4]
80003948:	19 d8       	ld.ub	r8,r12[0x5]
8000394a:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000394e:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003950:	5c 7a       	castu.h	r10
80003952:	19 bb       	ld.ub	r11,r12[0x3]
80003954:	19 ac       	ld.ub	r12,r12[0x2]
80003956:	f0 1f 00 0b 	mcall	80003980 <udc_iface_enable+0x58>
8000395a:	cf 01       	brne	8000393a <udc_iface_enable+0x12>
8000395c:	c0 a8       	rjmp	80003970 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000395e:	48 a8       	lddpc	r8,80003984 <udc_iface_enable+0x5c>
80003960:	70 08       	ld.w	r8,r8[0x0]
80003962:	70 18       	ld.w	r8,r8[0x4]
80003964:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80003968:	70 0c       	ld.w	r12,r8[0x0]
8000396a:	5d 1c       	icall	r12
8000396c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003970:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003974:	80 00       	ld.sh	r0,r0[0x0]
80003976:	38 3c       	mov	r12,-125
80003978:	00 00       	add	r0,r0
8000397a:	0c 54       	eor	r4,r6
8000397c:	80 00       	ld.sh	r0,r0[0x0]
8000397e:	38 c0       	mov	r0,-116
80003980:	80 00       	ld.sh	r0,r0[0x0]
80003982:	28 60       	sub	r0,-122
80003984:	00 00       	add	r0,r0
80003986:	0c 48       	or	r8,r6

80003988 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80003988:	eb cd 40 e0 	pushm	r5-r7,lr
8000398c:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
8000398e:	18 97       	mov	r7,r12
80003990:	30 0b       	mov	r11,0
80003992:	f0 1f 00 12 	mcall	800039d8 <udc_iface_disable+0x50>
80003996:	c1 e0       	breq	800039d2 <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003998:	49 18       	lddpc	r8,800039dc <udc_iface_disable+0x54>
8000399a:	70 08       	ld.w	r8,r8[0x0]
8000399c:	70 18       	ld.w	r8,r8[0x4]
8000399e:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
800039a2:	6a 3c       	ld.w	r12,r5[0xc]
800039a4:	5d 1c       	icall	r12
800039a6:	18 9b       	mov	r11,r12
800039a8:	0c 9c       	mov	r12,r6
800039aa:	f0 1f 00 0c 	mcall	800039d8 <udc_iface_disable+0x50>
800039ae:	c1 20       	breq	800039d2 <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800039b0:	48 c8       	lddpc	r8,800039e0 <udc_iface_disable+0x58>
800039b2:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800039b4:	30 56       	mov	r6,5
800039b6:	0c 9b       	mov	r11,r6
800039b8:	0e 9c       	mov	r12,r7
800039ba:	f0 1f 00 0b 	mcall	800039e4 <udc_iface_disable+0x5c>
800039be:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
800039c0:	c0 50       	breq	800039ca <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
800039c2:	19 ac       	ld.ub	r12,r12[0x2]
800039c4:	f0 1f 00 09 	mcall	800039e8 <udc_iface_disable+0x60>
		}
800039c8:	cf 7b       	rjmp	800039b6 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
800039ca:	6a 18       	ld.w	r8,r5[0x4]
800039cc:	5d 18       	icall	r8
800039ce:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
800039d2:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800039d6:	00 00       	add	r0,r0
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	38 3c       	mov	r12,-125
800039dc:	00 00       	add	r0,r0
800039de:	0c 48       	or	r8,r6
800039e0:	00 00       	add	r0,r0
800039e2:	0c 54       	eor	r4,r6
800039e4:	80 00       	ld.sh	r0,r0[0x0]
800039e6:	38 c0       	mov	r0,-116
800039e8:	80 00       	ld.sh	r0,r0[0x0]
800039ea:	24 d8       	sub	r8,77

800039ec <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800039ec:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800039f0:	49 38       	lddpc	r8,80003a3c <udc_reset+0x50>
800039f2:	11 89       	ld.ub	r9,r8[0x0]
800039f4:	30 08       	mov	r8,0
800039f6:	f0 09 18 00 	cp.b	r9,r8
800039fa:	c1 70       	breq	80003a28 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039fc:	49 18       	lddpc	r8,80003a40 <udc_reset+0x54>
800039fe:	70 08       	ld.w	r8,r8[0x0]
80003a00:	70 08       	ld.w	r8,r8[0x0]
80003a02:	11 c9       	ld.ub	r9,r8[0x4]
80003a04:	30 08       	mov	r8,0
80003a06:	f0 09 18 00 	cp.b	r9,r8
80003a0a:	c0 f0       	breq	80003a28 <udc_reset+0x3c>
80003a0c:	30 07       	mov	r7,0
80003a0e:	48 d6       	lddpc	r6,80003a40 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
80003a10:	0e 9c       	mov	r12,r7
80003a12:	f0 1f 00 0d 	mcall	80003a44 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003a16:	2f f7       	sub	r7,-1
80003a18:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003a1a:	6c 08       	ld.w	r8,r6[0x0]
80003a1c:	70 08       	ld.w	r8,r8[0x0]
80003a1e:	11 c8       	ld.ub	r8,r8[0x4]
80003a20:	ee 08 18 00 	cp.b	r8,r7
80003a24:	fe 9b ff f6 	brhi	80003a10 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80003a28:	30 09       	mov	r9,0
80003a2a:	48 58       	lddpc	r8,80003a3c <udc_reset+0x50>
80003a2c:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80003a2e:	e0 69 01 00 	mov	r9,256
80003a32:	48 68       	lddpc	r8,80003a48 <udc_reset+0x5c>
80003a34:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80003a36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a3a:	00 00       	add	r0,r0
80003a3c:	00 00       	add	r0,r0
80003a3e:	0c 4e       	or	lr,r6
80003a40:	00 00       	add	r0,r0
80003a42:	0c 48       	or	r8,r6
80003a44:	80 00       	ld.sh	r0,r0[0x0]
80003a46:	39 88       	mov	r8,-104
80003a48:	00 00       	add	r0,r0
80003a4a:	0c 4c       	or	r12,r6

80003a4c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003a4c:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003a50:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003a54:	30 09       	mov	r9,0
80003a56:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003a58:	30 0a       	mov	r10,0
80003a5a:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003a5c:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003a5e:	11 88       	ld.ub	r8,r8[0x0]
80003a60:	10 9a       	mov	r10,r8
80003a62:	f2 08 18 00 	cp.b	r8,r9
80003a66:	c0 94       	brge	80003a78 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003a68:	fe f9 04 24 	ld.w	r9,pc[1060]
80003a6c:	92 3b       	ld.sh	r11,r9[0x6]
80003a6e:	30 09       	mov	r9,0
80003a70:	f2 0b 19 00 	cp.h	r11,r9
80003a74:	e0 80 02 0a 	breq	80003e88 <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003a78:	10 99       	mov	r9,r8
80003a7a:	e2 19 00 60 	andl	r9,0x60,COH
80003a7e:	e0 81 01 d9 	brne	80003e30 <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003a82:	f2 0a 18 00 	cp.b	r10,r9
80003a86:	e0 84 01 01 	brge	80003c88 <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003a8a:	fe f9 04 02 	ld.w	r9,pc[1026]
80003a8e:	92 39       	ld.sh	r9,r9[0x6]
80003a90:	58 09       	cp.w	r9,0
80003a92:	e0 80 01 cf 	breq	80003e30 <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003a96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a9a:	e0 81 00 9e 	brne	80003bd6 <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003a9e:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003aa2:	15 9a       	ld.ub	r10,r10[0x1]
80003aa4:	30 6b       	mov	r11,6
80003aa6:	f6 0a 18 00 	cp.b	r10,r11
80003aaa:	c1 a0       	breq	80003ade <udc_process_setup+0x92>
80003aac:	30 8b       	mov	r11,8
80003aae:	f6 0a 18 00 	cp.b	r10,r11
80003ab2:	e0 80 00 85 	breq	80003bbc <udc_process_setup+0x170>
80003ab6:	30 0b       	mov	r11,0
80003ab8:	f6 0a 18 00 	cp.b	r10,r11
80003abc:	e0 81 00 8d 	brne	80003bd6 <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003ac0:	30 28       	mov	r8,2
80003ac2:	f0 09 19 00 	cp.h	r9,r8
80003ac6:	c0 40       	breq	80003ace <udc_process_setup+0x82>
80003ac8:	30 0c       	mov	r12,0
80003aca:	e0 8f 01 af 	bral	80003e28 <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003ace:	30 2b       	mov	r11,2
80003ad0:	fe fc 03 c0 	ld.w	r12,pc[960]
80003ad4:	f0 1f 00 f0 	mcall	80003e94 <udc_process_setup+0x448>
80003ad8:	30 1c       	mov	r12,1
80003ada:	e0 8f 01 a7 	bral	80003e28 <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003ade:	fe f8 03 ae 	ld.w	r8,pc[942]
80003ae2:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003ae4:	f2 08 16 08 	lsr	r8,r9,0x8
80003ae8:	30 2a       	mov	r10,2
80003aea:	f4 08 18 00 	cp.b	r8,r10
80003aee:	c1 00       	breq	80003b0e <udc_process_setup+0xc2>
80003af0:	30 3a       	mov	r10,3
80003af2:	f4 08 18 00 	cp.b	r8,r10
80003af6:	c2 a0       	breq	80003b4a <udc_process_setup+0xfe>
80003af8:	30 19       	mov	r9,1
80003afa:	f2 08 18 00 	cp.b	r8,r9
80003afe:	c5 d1       	brne	80003bb8 <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003b00:	fe f8 03 98 	ld.w	r8,pc[920]
80003b04:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003b06:	19 8b       	ld.ub	r11,r12[0x0]
80003b08:	f0 1f 00 e3 	mcall	80003e94 <udc_process_setup+0x448>
80003b0c:	c4 78       	rjmp	80003b9a <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003b0e:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003b10:	fe f8 03 88 	ld.w	r8,pc[904]
80003b14:	70 08       	ld.w	r8,r8[0x0]
80003b16:	f1 38 00 11 	ld.ub	r8,r8[17]
80003b1a:	f2 08 18 00 	cp.b	r8,r9
80003b1e:	e0 88 00 4d 	brls	80003bb8 <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003b22:	fe f8 03 76 	ld.w	r8,pc[886]
80003b26:	70 18       	ld.w	r8,r8[0x4]
80003b28:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003b2c:	19 a9       	ld.ub	r9,r12[0x2]
80003b2e:	19 b8       	ld.ub	r8,r12[0x3]
80003b30:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003b34:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003b36:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003b3a:	f0 1f 00 d7 	mcall	80003e94 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003b3e:	fe f8 03 4e 	ld.w	r8,pc[846]
80003b42:	70 28       	ld.w	r8,r8[0x8]
80003b44:	30 29       	mov	r9,2
80003b46:	b0 99       	st.b	r8[0x1],r9
80003b48:	c2 98       	rjmp	80003b9a <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003b4a:	5c 59       	castu.b	r9
80003b4c:	58 19       	cp.w	r9,1
80003b4e:	c1 00       	breq	80003b6e <udc_process_setup+0x122>
80003b50:	58 29       	cp.w	r9,2
80003b52:	c0 40       	breq	80003b5a <udc_process_setup+0x10e>
80003b54:	58 09       	cp.w	r9,0
80003b56:	c0 60       	breq	80003b62 <udc_process_setup+0x116>
80003b58:	c3 08       	rjmp	80003bb8 <udc_process_setup+0x16c>
80003b5a:	fe fc 03 42 	ld.w	r12,pc[834]
80003b5e:	30 3b       	mov	r11,3
80003b60:	c0 a8       	rjmp	80003b74 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003b62:	30 4b       	mov	r11,4
80003b64:	fe fc 03 3c 	ld.w	r12,pc[828]
80003b68:	f0 1f 00 cb 	mcall	80003e94 <udc_process_setup+0x448>
80003b6c:	c1 78       	rjmp	80003b9a <udc_process_setup+0x14e>
80003b6e:	fe fc 03 36 	ld.w	r12,pc[822]
80003b72:	30 9b       	mov	r11,9
80003b74:	fe fa 03 34 	ld.w	r10,pc[820]
80003b78:	2f ea       	sub	r10,-2
80003b7a:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003b7c:	11 39       	ld.ub	r9,r8++
80003b7e:	5c c9       	swap.bh	r9
80003b80:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003b82:	f0 0c 01 09 	sub	r9,r8,r12
80003b86:	f6 09 18 00 	cp.b	r9,r11
80003b8a:	cf 93       	brcs	80003b7c <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003b8c:	a1 7b       	lsl	r11,0x1
80003b8e:	2f eb       	sub	r11,-2
80003b90:	fe fc 03 18 	ld.w	r12,pc[792]
80003b94:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003b96:	f0 1f 00 c0 	mcall	80003e94 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003b9a:	fe f8 02 f2 	ld.w	r8,pc[754]
80003b9e:	90 39       	ld.sh	r9,r8[0x6]
80003ba0:	90 68       	ld.sh	r8,r8[0xc]
80003ba2:	f2 08 19 00 	cp.h	r8,r9
80003ba6:	e0 8b 00 04 	brhi	80003bae <udc_process_setup+0x162>
80003baa:	30 1c       	mov	r12,1
80003bac:	c3 e9       	rjmp	80003e28 <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003bae:	fe f8 02 de 	ld.w	r8,pc[734]
80003bb2:	b0 69       	st.h	r8[0xc],r9
80003bb4:	30 1c       	mov	r12,1
80003bb6:	c3 99       	rjmp	80003e28 <udc_process_setup+0x3dc>
80003bb8:	30 0c       	mov	r12,0
80003bba:	c3 79       	rjmp	80003e28 <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003bbc:	30 18       	mov	r8,1
80003bbe:	f0 09 19 00 	cp.h	r9,r8
80003bc2:	c0 30       	breq	80003bc8 <udc_process_setup+0x17c>
80003bc4:	30 0c       	mov	r12,0
80003bc6:	c3 19       	rjmp	80003e28 <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003bc8:	30 1b       	mov	r11,1
80003bca:	fe fc 02 e2 	ld.w	r12,pc[738]
80003bce:	f0 1f 00 b2 	mcall	80003e94 <udc_process_setup+0x448>
80003bd2:	30 1c       	mov	r12,1
80003bd4:	c2 a9       	rjmp	80003e28 <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003bd6:	58 18       	cp.w	r8,1
80003bd8:	c3 61       	brne	80003c44 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003bda:	fe fa 02 b2 	ld.w	r10,pc[690]
80003bde:	15 9b       	ld.ub	r11,r10[0x1]
80003be0:	30 aa       	mov	r10,10
80003be2:	f4 0b 18 00 	cp.b	r11,r10
80003be6:	c2 f1       	brne	80003c44 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003be8:	f0 09 19 00 	cp.h	r9,r8
80003bec:	c2 a1       	brne	80003c40 <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003bee:	fe f8 02 be 	ld.w	r8,pc[702]
80003bf2:	11 89       	ld.ub	r9,r8[0x0]
80003bf4:	30 08       	mov	r8,0
80003bf6:	f0 09 18 00 	cp.b	r9,r8
80003bfa:	c2 30       	breq	80003c40 <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003bfc:	fe f8 02 90 	ld.w	r8,pc[656]
80003c00:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003c02:	fe f8 02 ae 	ld.w	r8,pc[686]
80003c06:	70 08       	ld.w	r8,r8[0x0]
80003c08:	70 08       	ld.w	r8,r8[0x0]
80003c0a:	11 c8       	ld.ub	r8,r8[0x4]
80003c0c:	ee 08 18 00 	cp.b	r8,r7
80003c10:	e0 88 00 18 	brls	80003c40 <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003c14:	30 0b       	mov	r11,0
80003c16:	0e 9c       	mov	r12,r7
80003c18:	f0 1f 00 a7 	mcall	80003eb4 <udc_process_setup+0x468>
80003c1c:	c1 20       	breq	80003c40 <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003c1e:	fe f8 02 92 	ld.w	r8,pc[658]
80003c22:	70 08       	ld.w	r8,r8[0x0]
80003c24:	70 18       	ld.w	r8,r8[0x4]
80003c26:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003c2a:	70 3c       	ld.w	r12,r8[0xc]
80003c2c:	5d 1c       	icall	r12
80003c2e:	fe f8 02 8a 	ld.w	r8,pc[650]
80003c32:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003c34:	30 1b       	mov	r11,1
80003c36:	10 9c       	mov	r12,r8
80003c38:	f0 1f 00 97 	mcall	80003e94 <udc_process_setup+0x448>
80003c3c:	30 1c       	mov	r12,1
80003c3e:	cf 58       	rjmp	80003e28 <udc_process_setup+0x3dc>
80003c40:	30 0c       	mov	r12,0
80003c42:	cf 38       	rjmp	80003e28 <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003c44:	58 28       	cp.w	r8,2
80003c46:	e0 81 00 f5 	brne	80003e30 <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c4a:	fe f8 02 42 	ld.w	r8,pc[578]
80003c4e:	11 9a       	ld.ub	r10,r8[0x1]
80003c50:	30 08       	mov	r8,0
80003c52:	f0 0a 18 00 	cp.b	r10,r8
80003c56:	e0 81 00 e8 	brne	80003e26 <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003c5a:	30 28       	mov	r8,2
80003c5c:	f0 09 19 00 	cp.h	r9,r8
80003c60:	c0 30       	breq	80003c66 <udc_process_setup+0x21a>
80003c62:	30 0c       	mov	r12,0
80003c64:	ce 28       	rjmp	80003e28 <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003c66:	fe f8 02 26 	ld.w	r8,pc[550]
80003c6a:	11 dc       	ld.ub	r12,r8[0x5]
80003c6c:	f0 1f 00 94 	mcall	80003ebc <udc_process_setup+0x470>
80003c70:	e0 68 01 00 	mov	r8,256
80003c74:	f9 b8 00 00 	moveq	r8,0
80003c78:	fe fc 02 48 	ld.w	r12,pc[584]
80003c7c:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003c7e:	30 2b       	mov	r11,2
80003c80:	f0 1f 00 85 	mcall	80003e94 <udc_process_setup+0x448>
80003c84:	30 1c       	mov	r12,1
80003c86:	cd 18       	rjmp	80003e28 <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003c88:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c8c:	c7 71       	brne	80003d7a <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c8e:	fe f9 01 fe 	ld.w	r9,pc[510]
80003c92:	13 99       	ld.ub	r9,r9[0x1]
80003c94:	30 3a       	mov	r10,3
80003c96:	f4 09 18 00 	cp.b	r9,r10
80003c9a:	e0 80 00 c6 	breq	80003e26 <udc_process_setup+0x3da>
80003c9e:	e0 8b 00 07 	brhi	80003cac <udc_process_setup+0x260>
80003ca2:	30 1a       	mov	r10,1
80003ca4:	f4 09 18 00 	cp.b	r9,r10
80003ca8:	c6 91       	brne	80003d7a <udc_process_setup+0x32e>
80003caa:	c1 78       	rjmp	80003cd8 <udc_process_setup+0x28c>
80003cac:	30 5a       	mov	r10,5
80003cae:	f4 09 18 00 	cp.b	r9,r10
80003cb2:	c0 60       	breq	80003cbe <udc_process_setup+0x272>
80003cb4:	30 9a       	mov	r10,9
80003cb6:	f4 09 18 00 	cp.b	r9,r10
80003cba:	c6 01       	brne	80003d7a <udc_process_setup+0x32e>
80003cbc:	c2 28       	rjmp	80003d00 <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003cbe:	4f 48       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003cc0:	90 39       	ld.sh	r9,r8[0x6]
80003cc2:	30 08       	mov	r8,0
80003cc4:	f0 09 19 00 	cp.h	r9,r8
80003cc8:	c0 30       	breq	80003cce <udc_process_setup+0x282>
80003cca:	30 0c       	mov	r12,0
80003ccc:	ca e8       	rjmp	80003e28 <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003cce:	4f e9       	lddpc	r9,80003ec4 <udc_process_setup+0x478>
80003cd0:	4e f8       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003cd2:	91 49       	st.w	r8[0x10],r9
80003cd4:	30 1c       	mov	r12,1
80003cd6:	ca 98       	rjmp	80003e28 <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003cd8:	4e d8       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003cda:	90 39       	ld.sh	r9,r8[0x6]
80003cdc:	30 08       	mov	r8,0
80003cde:	f0 09 19 00 	cp.h	r9,r8
80003ce2:	c0 d1       	brne	80003cfc <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003ce4:	4e a8       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003ce6:	90 19       	ld.sh	r9,r8[0x2]
80003ce8:	30 18       	mov	r8,1
80003cea:	f0 09 19 00 	cp.h	r9,r8
80003cee:	c0 71       	brne	80003cfc <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003cf0:	4e 88       	lddpc	r8,80003e90 <udc_process_setup+0x444>
80003cf2:	90 09       	ld.sh	r9,r8[0x0]
80003cf4:	a9 d9       	cbr	r9,0x9
80003cf6:	b0 09       	st.h	r8[0x0],r9
80003cf8:	30 1c       	mov	r12,1
80003cfa:	c9 78       	rjmp	80003e28 <udc_process_setup+0x3dc>
80003cfc:	30 0c       	mov	r12,0
80003cfe:	c9 58       	rjmp	80003e28 <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003d00:	4e 38       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003d02:	90 39       	ld.sh	r9,r8[0x6]
80003d04:	30 08       	mov	r8,0
80003d06:	f0 09 19 00 	cp.h	r9,r8
80003d0a:	c3 41       	brne	80003d72 <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003d0c:	f0 1f 00 6f 	mcall	80003ec8 <udc_process_setup+0x47c>
80003d10:	c3 10       	breq	80003d72 <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003d12:	4d f8       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003d14:	11 b9       	ld.ub	r9,r8[0x3]
80003d16:	4e 18       	lddpc	r8,80003e98 <udc_process_setup+0x44c>
80003d18:	70 08       	ld.w	r8,r8[0x0]
80003d1a:	f1 38 00 11 	ld.ub	r8,r8[17]
80003d1e:	10 39       	cp.w	r9,r8
80003d20:	e0 89 00 29 	brgt	80003d72 <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003d24:	f0 1f 00 6a 	mcall	80003ecc <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003d28:	4d 98       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003d2a:	11 b8       	ld.ub	r8,r8[0x3]
80003d2c:	4e 09       	lddpc	r9,80003eac <udc_process_setup+0x460>
80003d2e:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003d30:	58 08       	cp.w	r8,0
80003d32:	c2 20       	breq	80003d76 <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003d34:	20 18       	sub	r8,1
80003d36:	4d 99       	lddpc	r9,80003e98 <udc_process_setup+0x44c>
80003d38:	72 19       	ld.w	r9,r9[0x4]
80003d3a:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003d3e:	4d d9       	lddpc	r9,80003eb0 <udc_process_setup+0x464>
80003d40:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d42:	70 08       	ld.w	r8,r8[0x0]
80003d44:	11 c9       	ld.ub	r9,r8[0x4]
80003d46:	30 08       	mov	r8,0
80003d48:	f0 09 18 00 	cp.b	r9,r8
80003d4c:	c1 50       	breq	80003d76 <udc_process_setup+0x32a>
80003d4e:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d50:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d52:	4d 86       	lddpc	r6,80003eb0 <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d54:	0a 9b       	mov	r11,r5
80003d56:	0e 9c       	mov	r12,r7
80003d58:	f0 1f 00 5e 	mcall	80003ed0 <udc_process_setup+0x484>
80003d5c:	c0 b0       	breq	80003d72 <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003d5e:	2f f7       	sub	r7,-1
80003d60:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d62:	6c 08       	ld.w	r8,r6[0x0]
80003d64:	70 08       	ld.w	r8,r8[0x0]
80003d66:	11 c8       	ld.ub	r8,r8[0x4]
80003d68:	ee 08 18 00 	cp.b	r8,r7
80003d6c:	fe 9b ff f4 	brhi	80003d54 <udc_process_setup+0x308>
80003d70:	c0 38       	rjmp	80003d76 <udc_process_setup+0x32a>
80003d72:	30 0c       	mov	r12,0
80003d74:	c5 a8       	rjmp	80003e28 <udc_process_setup+0x3dc>
80003d76:	30 1c       	mov	r12,1
80003d78:	c5 88       	rjmp	80003e28 <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003d7a:	58 18       	cp.w	r8,1
80003d7c:	c2 21       	brne	80003dc0 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d7e:	4c 49       	lddpc	r9,80003e8c <udc_process_setup+0x440>
80003d80:	13 9a       	ld.ub	r10,r9[0x1]
80003d82:	30 b9       	mov	r9,11
80003d84:	f2 0a 18 00 	cp.b	r10,r9
80003d88:	c1 c1       	brne	80003dc0 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003d8a:	4c 18       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003d8c:	90 39       	ld.sh	r9,r8[0x6]
80003d8e:	30 08       	mov	r8,0
80003d90:	f0 09 19 00 	cp.h	r9,r8
80003d94:	c1 41       	brne	80003dbc <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d96:	4c 68       	lddpc	r8,80003eac <udc_process_setup+0x460>
80003d98:	11 89       	ld.ub	r9,r8[0x0]
80003d9a:	30 08       	mov	r8,0
80003d9c:	f0 09 18 00 	cp.b	r9,r8
80003da0:	c0 e0       	breq	80003dbc <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003da2:	4b b8       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003da4:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003da6:	11 d7       	ld.ub	r7,r8[0x5]
80003da8:	0e 9c       	mov	r12,r7
80003daa:	f0 1f 00 4b 	mcall	80003ed4 <udc_process_setup+0x488>
80003dae:	c0 70       	breq	80003dbc <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003db0:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003db4:	0e 9c       	mov	r12,r7
80003db6:	f0 1f 00 47 	mcall	80003ed0 <udc_process_setup+0x484>
80003dba:	c3 78       	rjmp	80003e28 <udc_process_setup+0x3dc>
80003dbc:	30 0c       	mov	r12,0
80003dbe:	c3 58       	rjmp	80003e28 <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003dc0:	58 28       	cp.w	r8,2
80003dc2:	c3 71       	brne	80003e30 <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003dc4:	4b 28       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003dc6:	11 98       	ld.ub	r8,r8[0x1]
80003dc8:	30 19       	mov	r9,1
80003dca:	f2 08 18 00 	cp.b	r8,r9
80003dce:	c0 60       	breq	80003dda <udc_process_setup+0x38e>
80003dd0:	30 39       	mov	r9,3
80003dd2:	f2 08 18 00 	cp.b	r8,r9
80003dd6:	c2 81       	brne	80003e26 <udc_process_setup+0x3da>
80003dd8:	c1 48       	rjmp	80003e00 <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dda:	4a d8       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003ddc:	90 39       	ld.sh	r9,r8[0x6]
80003dde:	30 08       	mov	r8,0
80003de0:	f0 09 19 00 	cp.h	r9,r8
80003de4:	c0 c1       	brne	80003dfc <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003de6:	4a a8       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003de8:	90 19       	ld.sh	r9,r8[0x2]
80003dea:	30 08       	mov	r8,0
80003dec:	f0 09 19 00 	cp.h	r9,r8
80003df0:	c0 61       	brne	80003dfc <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003df2:	4a 78       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003df4:	11 dc       	ld.ub	r12,r8[0x5]
80003df6:	f0 1f 00 39 	mcall	80003ed8 <udc_process_setup+0x48c>
80003dfa:	c1 78       	rjmp	80003e28 <udc_process_setup+0x3dc>
80003dfc:	30 0c       	mov	r12,0
80003dfe:	c1 58       	rjmp	80003e28 <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003e00:	4a 38       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003e02:	90 39       	ld.sh	r9,r8[0x6]
80003e04:	30 08       	mov	r8,0
80003e06:	f0 09 19 00 	cp.h	r9,r8
80003e0a:	c0 c1       	brne	80003e22 <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003e0c:	4a 08       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003e0e:	90 19       	ld.sh	r9,r8[0x2]
80003e10:	30 08       	mov	r8,0
80003e12:	f0 09 19 00 	cp.h	r9,r8
80003e16:	c0 61       	brne	80003e22 <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003e18:	49 d8       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003e1a:	11 dc       	ld.ub	r12,r8[0x5]
80003e1c:	f0 1f 00 30 	mcall	80003edc <udc_process_setup+0x490>
80003e20:	c0 48       	rjmp	80003e28 <udc_process_setup+0x3dc>
80003e22:	30 0c       	mov	r12,0
80003e24:	c0 28       	rjmp	80003e28 <udc_process_setup+0x3dc>
80003e26:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003e28:	58 0c       	cp.w	r12,0
80003e2a:	c0 30       	breq	80003e30 <udc_process_setup+0x3e4>
80003e2c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003e30:	49 78       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003e32:	11 88       	ld.ub	r8,r8[0x0]
80003e34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e38:	58 18       	cp.w	r8,1
80003e3a:	c2 71       	brne	80003e88 <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003e3c:	49 c8       	lddpc	r8,80003eac <udc_process_setup+0x460>
80003e3e:	11 89       	ld.ub	r9,r8[0x0]
80003e40:	30 08       	mov	r8,0
80003e42:	f0 09 18 00 	cp.b	r9,r8
80003e46:	c2 10       	breq	80003e88 <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003e48:	49 18       	lddpc	r8,80003e8c <udc_process_setup+0x440>
80003e4a:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003e4c:	49 98       	lddpc	r8,80003eb0 <udc_process_setup+0x464>
80003e4e:	70 08       	ld.w	r8,r8[0x0]
80003e50:	70 08       	ld.w	r8,r8[0x0]
80003e52:	11 c8       	ld.ub	r8,r8[0x4]
80003e54:	ee 08 18 00 	cp.b	r8,r7
80003e58:	e0 88 00 18 	brls	80003e88 <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003e5c:	0e 96       	mov	r6,r7
80003e5e:	30 0b       	mov	r11,0
80003e60:	0e 9c       	mov	r12,r7
80003e62:	f0 1f 00 15 	mcall	80003eb4 <udc_process_setup+0x468>
80003e66:	c1 10       	breq	80003e88 <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e68:	49 28       	lddpc	r8,80003eb0 <udc_process_setup+0x464>
80003e6a:	70 08       	ld.w	r8,r8[0x0]
80003e6c:	70 18       	ld.w	r8,r8[0x4]
80003e6e:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003e72:	6e 3c       	ld.w	r12,r7[0xc]
80003e74:	5d 1c       	icall	r12
80003e76:	18 9b       	mov	r11,r12
80003e78:	0c 9c       	mov	r12,r6
80003e7a:	f0 1f 00 0f 	mcall	80003eb4 <udc_process_setup+0x468>
80003e7e:	c0 50       	breq	80003e88 <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003e80:	6e 2c       	ld.w	r12,r7[0x8]
80003e82:	5d 1c       	icall	r12
80003e84:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e88:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e8c:	00 00       	add	r0,r0
80003e8e:	0c a4       	st.w	r6++,r4
80003e90:	00 00       	add	r0,r0
80003e92:	0c 4c       	or	r12,r6
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	23 5c       	sub	r12,53
80003e98:	00 00       	add	r0,r0
80003e9a:	00 90       	mov	r0,r0
80003e9c:	00 00       	add	r0,r0
80003e9e:	00 ac       	st.w	r0++,r12
80003ea0:	00 00       	add	r0,r0
80003ea2:	00 d0       	st.w	--r0,r0
80003ea4:	00 00       	add	r0,r0
80003ea6:	00 b0       	st.h	r0++,r0
80003ea8:	00 00       	add	r0,r0
80003eaa:	00 bc       	st.h	r0++,r12
80003eac:	00 00       	add	r0,r0
80003eae:	0c 4e       	or	lr,r6
80003eb0:	00 00       	add	r0,r0
80003eb2:	0c 48       	or	r8,r6
80003eb4:	80 00       	ld.sh	r0,r0[0x0]
80003eb6:	38 3c       	mov	r12,-125
80003eb8:	00 00       	add	r0,r0
80003eba:	0c 44       	or	r4,r6
80003ebc:	80 00       	ld.sh	r0,r0[0x0]
80003ebe:	23 68       	sub	r8,54
80003ec0:	00 00       	add	r0,r0
80003ec2:	0c 50       	eor	r0,r6
80003ec4:	80 00       	ld.sh	r0,r0[0x0]
80003ec6:	39 10       	mov	r0,-111
80003ec8:	80 00       	ld.sh	r0,r0[0x0]
80003eca:	23 36       	sub	r6,51
80003ecc:	80 00       	ld.sh	r0,r0[0x0]
80003ece:	39 ec       	mov	r12,-98
80003ed0:	80 00       	ld.sh	r0,r0[0x0]
80003ed2:	39 28       	mov	r8,-110
80003ed4:	80 00       	ld.sh	r0,r0[0x0]
80003ed6:	39 88       	mov	r8,-104
80003ed8:	80 00       	ld.sh	r0,r0[0x0]
80003eda:	23 f8       	sub	r8,63
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	23 7c       	sub	r12,55

80003ee0 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003ee0:	eb cd 40 fc 	pushm	r2-r7,lr
80003ee4:	20 1d       	sub	sp,4
80003ee6:	16 94       	mov	r4,r11
80003ee8:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003eea:	58 0c       	cp.w	r12,0
80003eec:	c0 30       	breq	80003ef2 <_read+0x12>
80003eee:	3f f7       	mov	r7,-1
80003ef0:	c1 98       	rjmp	80003f22 <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80003ef2:	58 0a       	cp.w	r10,0
80003ef4:	e0 89 00 04 	brgt	80003efc <_read+0x1c>
80003ef8:	30 07       	mov	r7,0
80003efa:	c1 48       	rjmp	80003f22 <_read+0x42>
80003efc:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80003efe:	48 c3       	lddpc	r3,80003f2c <_read+0x4c>
80003f00:	48 c6       	lddpc	r6,80003f30 <_read+0x50>
80003f02:	1a 92       	mov	r2,sp
80003f04:	66 0c       	ld.w	r12,r3[0x0]
80003f06:	6c 08       	ld.w	r8,r6[0x0]
80003f08:	1a 9b       	mov	r11,sp
80003f0a:	5d 18       	icall	r8
		if (c < 0)
80003f0c:	40 08       	lddsp	r8,sp[0x0]
80003f0e:	58 08       	cp.w	r8,0
80003f10:	c0 95       	brlt	80003f22 <_read+0x42>
		break;
		*ptr++ = c;
80003f12:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
80003f16:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003f18:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003f1c:	58 08       	cp.w	r8,0
80003f1e:	fe 99 ff f3 	brgt	80003f04 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003f22:	0e 9c       	mov	r12,r7
80003f24:	2f fd       	sub	sp,-4
80003f26:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003f2a:	00 00       	add	r0,r0
80003f2c:	00 00       	add	r0,r0
80003f2e:	0c cc       	st.b	r6++,r12
80003f30:	00 00       	add	r0,r0
80003f32:	0c c4       	st.b	r6++,r4

80003f34 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003f34:	30 19       	mov	r9,1
80003f36:	48 28       	lddpc	r8,80003f3c <stdio_usb_enable+0x8>
80003f38:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003f3a:	5e ff       	retal	1
80003f3c:	00 00       	add	r0,r0
80003f3e:	0c 58       	eor	r8,r6

80003f40 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003f40:	30 09       	mov	r9,0
80003f42:	48 28       	lddpc	r8,80003f48 <stdio_usb_disable+0x8>
80003f44:	b0 89       	st.b	r8[0x0],r9
}
80003f46:	5e fc       	retal	r12
80003f48:	00 00       	add	r0,r0
80003f4a:	0c 58       	eor	r8,r6

80003f4c <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003f4c:	d4 01       	pushm	lr
	if (b_high) {
80003f4e:	58 0c       	cp.w	r12,0
80003f50:	c0 40       	breq	80003f58 <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003f52:	f0 1f 00 04 	mcall	80003f60 <stdio_usb_vbus_event+0x14>
80003f56:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003f58:	f0 1f 00 03 	mcall	80003f64 <stdio_usb_vbus_event+0x18>
80003f5c:	d8 02       	popm	pc
80003f5e:	00 00       	add	r0,r0
80003f60:	80 00       	ld.sh	r0,r0[0x0]
80003f62:	29 f0       	sub	r0,-97
80003f64:	80 00       	ld.sh	r0,r0[0x0]
80003f66:	26 a0       	sub	r0,106

80003f68 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
80003f68:	d4 01       	pushm	lr
	stdio_base = usart;
80003f6a:	48 98       	lddpc	r8,80003f8c <stdio_usb_init+0x24>
80003f6c:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80003f6e:	48 99       	lddpc	r9,80003f90 <stdio_usb_init+0x28>
80003f70:	48 98       	lddpc	r8,80003f94 <stdio_usb_init+0x2c>
80003f72:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80003f74:	48 99       	lddpc	r9,80003f98 <stdio_usb_init+0x30>
80003f76:	48 a8       	lddpc	r8,80003f9c <stdio_usb_init+0x34>
80003f78:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003f7a:	f0 1f 00 0a 	mcall	80003fa0 <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003f7e:	f0 1f 00 0a 	mcall	80003fa4 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003f82:	c0 41       	brne	80003f8a <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80003f84:	30 1c       	mov	r12,1
80003f86:	f0 1f 00 09 	mcall	80003fa8 <stdio_usb_init+0x40>
80003f8a:	d8 02       	popm	pc
80003f8c:	00 00       	add	r0,r0
80003f8e:	0c cc       	st.b	r6++,r12
80003f90:	80 00       	ld.sh	r0,r0[0x0]
80003f92:	3f d8       	mov	r8,-3
80003f94:	00 00       	add	r0,r0
80003f96:	0c c8       	st.b	r6++,r8
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	3f ac       	mov	r12,-6
80003f9c:	00 00       	add	r0,r0
80003f9e:	0c c4       	st.b	r6++,r4
80003fa0:	80 00       	ld.sh	r0,r0[0x0]
80003fa2:	2a 60       	sub	r0,-90
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	23 10       	sub	r0,49
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	3f 4c       	mov	r12,-12

80003fac <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
80003fac:	eb cd 40 80 	pushm	r7,lr
80003fb0:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003fb2:	48 88       	lddpc	r8,80003fd0 <stdio_usb_getchar+0x24>
80003fb4:	11 89       	ld.ub	r9,r8[0x0]
80003fb6:	30 08       	mov	r8,0
80003fb8:	f0 09 18 00 	cp.b	r9,r8
80003fbc:	c0 51       	brne	80003fc6 <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
80003fbe:	30 08       	mov	r8,0
80003fc0:	97 08       	st.w	r11[0x0],r8
		return;
80003fc2:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
80003fc6:	f0 1f 00 04 	mcall	80003fd4 <stdio_usb_getchar+0x28>
80003fca:	8f 0c       	st.w	r7[0x0],r12
80003fcc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fd0:	00 00       	add	r0,r0
80003fd2:	0c 58       	eor	r8,r6
80003fd4:	80 00       	ld.sh	r0,r0[0x0]
80003fd6:	35 24       	mov	r4,82

80003fd8 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
80003fd8:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003fda:	48 78       	lddpc	r8,80003ff4 <stdio_usb_putchar+0x1c>
80003fdc:	11 89       	ld.ub	r9,r8[0x0]
80003fde:	30 08       	mov	r8,0
80003fe0:	f0 09 18 00 	cp.b	r9,r8
80003fe4:	c0 60       	breq	80003ff0 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003fe6:	16 9c       	mov	r12,r11
80003fe8:	f0 1f 00 04 	mcall	80003ff8 <stdio_usb_putchar+0x20>
80003fec:	c0 21       	brne	80003ff0 <stdio_usb_putchar+0x18>
80003fee:	dc 0a       	popm	pc,r12=-1
80003ff0:	d8 0a       	popm	pc,r12=0
80003ff2:	00 00       	add	r0,r0
80003ff4:	00 00       	add	r0,r0
80003ff6:	0c 58       	eor	r8,r6
80003ff8:	80 00       	ld.sh	r0,r0[0x0]
80003ffa:	34 20       	mov	r0,66

80003ffc <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003ffc:	eb cd 40 f8 	pushm	r3-r7,lr
80004000:	16 94       	mov	r4,r11
80004002:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80004004:	20 1c       	sub	r12,1
80004006:	58 2c       	cp.w	r12,2
80004008:	e0 8b 00 13 	brhi	8000402e <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
8000400c:	58 0a       	cp.w	r10,0
8000400e:	c0 31       	brne	80004014 <_write+0x18>
80004010:	30 07       	mov	r7,0
80004012:	c0 f8       	rjmp	80004030 <_write+0x34>
80004014:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
80004016:	48 93       	lddpc	r3,80004038 <_write+0x3c>
80004018:	48 96       	lddpc	r6,8000403c <_write+0x40>
8000401a:	66 0c       	ld.w	r12,r3[0x0]
8000401c:	6c 08       	ld.w	r8,r6[0x0]
8000401e:	e8 07 07 0b 	ld.ub	r11,r4[r7]
80004022:	5d 18       	icall	r8
80004024:	c0 55       	brlt	8000402e <_write+0x32>
				return -1;
			}
			++nChars;
80004026:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80004028:	0e 35       	cp.w	r5,r7
8000402a:	cf 81       	brne	8000401a <_write+0x1e>
8000402c:	c0 28       	rjmp	80004030 <_write+0x34>
8000402e:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80004030:	0e 9c       	mov	r12,r7
80004032:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004036:	00 00       	add	r0,r0
80004038:	00 00       	add	r0,r0
8000403a:	0c cc       	st.b	r6++,r12
8000403c:	00 00       	add	r0,r0
8000403e:	0c c8       	st.b	r6++,r8

80004040 <busy_delay_init>:

//_____ D E C L A R A T I O N S ____________________________________________

void busy_delay_init(unsigned long fcpu_hz)
{
	s_fcpu_hz = fcpu_hz;
80004040:	48 28       	lddpc	r8,80004048 <busy_delay_init+0x8>
80004042:	91 0c       	st.w	r8[0x0],r12
}
80004044:	5e fc       	retal	r12
80004046:	00 00       	add	r0,r0
80004048:	00 00       	add	r0,r0
8000404a:	0c 5c       	eor	r12,r6

8000404c <busy_delay_us>:
{
	cpu_delay_ms(delay, s_fcpu_hz);
}

void busy_delay_us(unsigned long delay)
{
8000404c:	eb cd 40 c0 	pushm	r6-r7,lr
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80004050:	49 38       	lddpc	r8,8000409c <busy_delay_us+0x50>
80004052:	70 07       	ld.w	r7,r8[0x0]
80004054:	f8 07 06 46 	mulu.d	r6,r12,r7
80004058:	ee 78 42 40 	mov	r8,1000000
8000405c:	30 09       	mov	r9,0
8000405e:	ee 7a 42 3f 	mov	r10,999999
80004062:	30 0b       	mov	r11,0
80004064:	ec 0a 00 0a 	add	r10,r6,r10
80004068:	ee 0b 00 4b 	adc	r11,r7,r11
8000406c:	f0 1f 00 0d 	mcall	800040a0 <busy_delay_us+0x54>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004070:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004074:	f0 0a 00 0a 	add	r10,r8,r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004078:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000407c:	14 38       	cp.w	r8,r10
8000407e:	e0 88 00 08 	brls	8000408e <busy_delay_us+0x42>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004082:	12 38       	cp.w	r8,r9
80004084:	fe 98 ff fa 	brls	80004078 <busy_delay_us+0x2c>
80004088:	12 3a       	cp.w	r10,r9
8000408a:	c0 73       	brcs	80004098 <busy_delay_us+0x4c>
8000408c:	cf 6b       	rjmp	80004078 <busy_delay_us+0x2c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000408e:	12 38       	cp.w	r8,r9
80004090:	e0 8b 00 04 	brhi	80004098 <busy_delay_us+0x4c>
80004094:	12 3a       	cp.w	r10,r9
80004096:	cf 12       	brcc	80004078 <busy_delay_us+0x2c>
80004098:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000409c:	00 00       	add	r0,r0
8000409e:	0c 5c       	eor	r12,r6
800040a0:	80 00       	ld.sh	r0,r0[0x0]
800040a2:	41 f8       	lddsp	r8,sp[0x7c]

800040a4 <init>:
// declare interrupts
__attribute__((__interrupt__)) 
static void interrupt_J3(void);

void init()
{
800040a4:	eb cd 40 80 	pushm	r7,lr
	// board init
	sysclk_init();
800040a8:	f0 1f 00 12 	mcall	800040f0 <init+0x4c>
	board_init();
800040ac:	f0 1f 00 12 	mcall	800040f4 <init+0x50>
	busy_delay_init(BOARD_OSC0_HZ);
800040b0:	e0 6c 1b 00 	mov	r12,6912
800040b4:	ea 1c 00 b7 	orh	r12,0xb7
800040b8:	f0 1f 00 10 	mcall	800040f8 <init+0x54>
	
	// interrupts init
	cpu_irq_disable();
800040bc:	d3 03       	ssrf	0x10
    INTC_init_interrupts();
800040be:	f0 1f 00 10 	mcall	800040fc <init+0x58>
	INTC_register_interrupt(&interrupt_J3,   AVR32_GPIO_IRQ_3, AVR32_INTC_INT1);
800040c2:	30 1a       	mov	r10,1
800040c4:	34 3b       	mov	r11,67
800040c6:	48 fc       	lddpc	r12,80004100 <init+0x5c>
800040c8:	f0 1f 00 0f 	mcall	80004104 <init+0x60>
	cpu_irq_enable();
800040cc:	d5 03       	csrf	0x10

	//  stdio init
	stdio_usb_init(&CONFIG_USART_IF);
800040ce:	fe 7c 1c 00 	mov	r12,-58368
800040d2:	f0 1f 00 0e 	mcall	80004108 <init+0x64>

	// Specify that stdout and stdin should not be buffered.

#if defined(__GNUC__) && defined(__AVR32__)
	setbuf(stdout, NULL);
800040d6:	48 e7       	lddpc	r7,8000410c <init+0x68>
800040d8:	6e 08       	ld.w	r8,r7[0x0]
800040da:	30 0b       	mov	r11,0
800040dc:	70 1c       	ld.w	r12,r8[0x4]
800040de:	f0 1f 00 0d 	mcall	80004110 <init+0x6c>
	setbuf(stdin,  NULL);
800040e2:	6e 08       	ld.w	r8,r7[0x0]
800040e4:	30 0b       	mov	r11,0
800040e6:	70 0c       	ld.w	r12,r8[0x0]
800040e8:	f0 1f 00 0a 	mcall	80004110 <init+0x6c>
#endif
}
800040ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800040f0:	80 00       	ld.sh	r0,r0[0x0]
800040f2:	31 d4       	mov	r4,29
800040f4:	80 00       	ld.sh	r0,r0[0x0]
800040f6:	20 04       	sub	r4,0
800040f8:	80 00       	ld.sh	r0,r0[0x0]
800040fa:	40 40       	lddsp	r0,sp[0x10]
800040fc:	80 00       	ld.sh	r0,r0[0x0]
800040fe:	22 84       	sub	r4,40
80004100:	80 00       	ld.sh	r0,r0[0x0]
80004102:	41 a0       	lddsp	r0,sp[0x68]
80004104:	80 00       	ld.sh	r0,r0[0x0]
80004106:	22 54       	sub	r4,37
80004108:	80 00       	ld.sh	r0,r0[0x0]
8000410a:	3f 68       	mov	r8,-10
8000410c:	00 00       	add	r0,r0
8000410e:	01 c4       	ld.ub	r4,r0[0x4]
80004110:	80 00       	ld.sh	r0,r0[0x0]
80004112:	44 5c       	lddsp	r12,sp[0x114]

80004114 <main>:

/*********************************************************************
Functions
*********************************************************************/
int main (void)
{
80004114:	d4 31       	pushm	r0-r7,lr
	int i;
	// initialize
	init();
80004116:	f0 1f 00 1b 	mcall	80004180 <main+0x6c>
	
	// start code from here
	gpio_toggle_pin(LED0_GPIO);
8000411a:	32 3c       	mov	r12,35
8000411c:	f0 1f 00 1a 	mcall	80004184 <main+0x70>
	while(1)
	{
		
		if(flag_A) {
80004120:	49 a6       	lddpc	r6,80004188 <main+0x74>
			flag_A = 0;
80004122:	30 04       	mov	r4,0
			gpio_set_pin_low(RESPONSE_A);
80004124:	31 e2       	mov	r2,30
			busy_delay_us(1);
80004126:	30 13       	mov	r3,1
			gpio_set_pin_high(RESPONSE_A);
		}
		if(flag_B) {
80004128:	49 97       	lddpc	r7,8000418c <main+0x78>
			flag_B = 0;
			gpio_set_pin_low(RESPONSE_B);
8000412a:	31 c1       	mov	r1,28
			busy_delay_us(1);
			gpio_set_pin_high(RESPONSE_B);
		}
		if(flag_C) {
8000412c:	49 95       	lddpc	r5,80004190 <main+0x7c>
			flag_C = 0;
			gpio_set_pin_low(RESPONSE_C);
8000412e:	32 00       	mov	r0,32
	// start code from here
	gpio_toggle_pin(LED0_GPIO);
	while(1)
	{
		
		if(flag_A) {
80004130:	6c 08       	ld.w	r8,r6[0x0]
80004132:	58 08       	cp.w	r8,0
80004134:	c0 b0       	breq	8000414a <main+0x36>
			flag_A = 0;
80004136:	8d 04       	st.w	r6[0x0],r4
			gpio_set_pin_low(RESPONSE_A);
80004138:	04 9c       	mov	r12,r2
8000413a:	f0 1f 00 17 	mcall	80004194 <main+0x80>
			busy_delay_us(1);
8000413e:	06 9c       	mov	r12,r3
80004140:	f0 1f 00 16 	mcall	80004198 <main+0x84>
			gpio_set_pin_high(RESPONSE_A);
80004144:	04 9c       	mov	r12,r2
80004146:	f0 1f 00 16 	mcall	8000419c <main+0x88>
		}
		if(flag_B) {
8000414a:	6e 08       	ld.w	r8,r7[0x0]
8000414c:	58 08       	cp.w	r8,0
8000414e:	c0 b0       	breq	80004164 <main+0x50>
			flag_B = 0;
80004150:	8f 04       	st.w	r7[0x0],r4
			gpio_set_pin_low(RESPONSE_B);
80004152:	02 9c       	mov	r12,r1
80004154:	f0 1f 00 10 	mcall	80004194 <main+0x80>
			busy_delay_us(1);
80004158:	06 9c       	mov	r12,r3
8000415a:	f0 1f 00 10 	mcall	80004198 <main+0x84>
			gpio_set_pin_high(RESPONSE_B);
8000415e:	02 9c       	mov	r12,r1
80004160:	f0 1f 00 0f 	mcall	8000419c <main+0x88>
		}
		if(flag_C) {
80004164:	6a 08       	ld.w	r8,r5[0x0]
80004166:	58 08       	cp.w	r8,0
80004168:	ce 40       	breq	80004130 <main+0x1c>
			flag_C = 0;
8000416a:	8b 04       	st.w	r5[0x0],r4
			gpio_set_pin_low(RESPONSE_C);
8000416c:	00 9c       	mov	r12,r0
8000416e:	f0 1f 00 0a 	mcall	80004194 <main+0x80>
			busy_delay_us(1);
80004172:	06 9c       	mov	r12,r3
80004174:	f0 1f 00 09 	mcall	80004198 <main+0x84>
			gpio_set_pin_high(RESPONSE_C);
80004178:	00 9c       	mov	r12,r0
8000417a:	f0 1f 00 09 	mcall	8000419c <main+0x88>
8000417e:	cd 9b       	rjmp	80004130 <main+0x1c>
80004180:	80 00       	ld.sh	r0,r0[0x0]
80004182:	40 a4       	lddsp	r4,sp[0x28]
80004184:	80 00       	ld.sh	r0,r0[0x0]
80004186:	21 c6       	sub	r6,28
80004188:	00 00       	add	r0,r0
8000418a:	0c 60       	and	r0,r6
8000418c:	00 00       	add	r0,r0
8000418e:	0c 64       	and	r4,r6
80004190:	00 00       	add	r0,r0
80004192:	0c 68       	and	r8,r6
80004194:	80 00       	ld.sh	r0,r0[0x0]
80004196:	21 b0       	sub	r0,27
80004198:	80 00       	ld.sh	r0,r0[0x0]
8000419a:	40 4c       	lddsp	r12,sp[0x10]
8000419c:	80 00       	ld.sh	r0,r0[0x0]
8000419e:	21 9a       	sub	r10,25

800041a0 <interrupt_J3>:
/*********************************************************************
Interrupt routines
*********************************************************************/
__attribute__((__interrupt__)) 
static void interrupt_J3(void) 
{ 
800041a0:	d4 01       	pushm	lr
	if (gpio_get_pin_interrupt_flag(TEST_A)) {
800041a2:	31 fc       	mov	r12,31
800041a4:	f0 1f 00 10 	mcall	800041e4 <interrupt_J3+0x44>
800041a8:	c0 70       	breq	800041b6 <interrupt_J3+0x16>
		flag_A = 1;
800041aa:	30 19       	mov	r9,1
800041ac:	48 f8       	lddpc	r8,800041e8 <interrupt_J3+0x48>
800041ae:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(TEST_A);
800041b0:	31 fc       	mov	r12,31
800041b2:	f0 1f 00 0f 	mcall	800041ec <interrupt_J3+0x4c>
	}
	if (gpio_get_pin_interrupt_flag(TEST_B)) {
800041b6:	31 dc       	mov	r12,29
800041b8:	f0 1f 00 0b 	mcall	800041e4 <interrupt_J3+0x44>
800041bc:	c0 70       	breq	800041ca <interrupt_J3+0x2a>
		flag_B = 1;
800041be:	30 19       	mov	r9,1
800041c0:	48 c8       	lddpc	r8,800041f0 <interrupt_J3+0x50>
800041c2:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(TEST_B);
800041c4:	31 dc       	mov	r12,29
800041c6:	f0 1f 00 0a 	mcall	800041ec <interrupt_J3+0x4c>
	}
	if (gpio_get_pin_interrupt_flag(TEST_C)) {
800041ca:	31 bc       	mov	r12,27
800041cc:	f0 1f 00 06 	mcall	800041e4 <interrupt_J3+0x44>
800041d0:	c0 70       	breq	800041de <interrupt_J3+0x3e>
		flag_C = 1;
800041d2:	30 19       	mov	r9,1
800041d4:	48 88       	lddpc	r8,800041f4 <interrupt_J3+0x54>
800041d6:	91 09       	st.w	r8[0x0],r9
		gpio_clear_pin_interrupt_flag(TEST_C);
800041d8:	31 bc       	mov	r12,27
800041da:	f0 1f 00 05 	mcall	800041ec <interrupt_J3+0x4c>
	}
}
800041de:	d4 02       	popm	lr
800041e0:	d6 03       	rete
800041e2:	00 00       	add	r0,r0
800041e4:	80 00       	ld.sh	r0,r0[0x0]
800041e6:	22 22       	sub	r2,34
800041e8:	00 00       	add	r0,r0
800041ea:	0c 60       	and	r0,r6
800041ec:	80 00       	ld.sh	r0,r0[0x0]
800041ee:	22 3a       	sub	r10,35
800041f0:	00 00       	add	r0,r0
800041f2:	0c 64       	and	r4,r6
800041f4:	00 00       	add	r0,r0
800041f6:	0c 68       	and	r8,r6

800041f8 <__avr32_udiv64>:
800041f8:	d4 31       	pushm	r0-r7,lr
800041fa:	1a 97       	mov	r7,sp
800041fc:	20 3d       	sub	sp,12
800041fe:	10 9c       	mov	r12,r8
80004200:	12 9e       	mov	lr,r9
80004202:	14 93       	mov	r3,r10
80004204:	58 09       	cp.w	r9,0
80004206:	e0 81 00 bd 	brne	80004380 <__avr32_udiv64+0x188>
8000420a:	16 38       	cp.w	r8,r11
8000420c:	e0 88 00 40 	brls	8000428c <__avr32_udiv64+0x94>
80004210:	f0 08 12 00 	clz	r8,r8
80004214:	c0 d0       	breq	8000422e <__avr32_udiv64+0x36>
80004216:	f6 08 09 4b 	lsl	r11,r11,r8
8000421a:	f0 09 11 20 	rsub	r9,r8,32
8000421e:	f8 08 09 4c 	lsl	r12,r12,r8
80004222:	f4 09 0a 49 	lsr	r9,r10,r9
80004226:	f4 08 09 43 	lsl	r3,r10,r8
8000422a:	f3 eb 10 0b 	or	r11,r9,r11
8000422e:	f8 0e 16 10 	lsr	lr,r12,0x10
80004232:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80004236:	f6 0e 0d 00 	divu	r0,r11,lr
8000423a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000423e:	00 99       	mov	r9,r0
80004240:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004244:	e0 0a 02 48 	mul	r8,r0,r10
80004248:	10 3b       	cp.w	r11,r8
8000424a:	c0 a2       	brcc	8000425e <__avr32_udiv64+0x66>
8000424c:	20 19       	sub	r9,1
8000424e:	18 0b       	add	r11,r12
80004250:	18 3b       	cp.w	r11,r12
80004252:	c0 63       	brcs	8000425e <__avr32_udiv64+0x66>
80004254:	10 3b       	cp.w	r11,r8
80004256:	f7 b9 03 01 	sublo	r9,1
8000425a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000425e:	f6 08 01 01 	sub	r1,r11,r8
80004262:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80004266:	e2 0e 0d 00 	divu	r0,r1,lr
8000426a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000426e:	00 98       	mov	r8,r0
80004270:	e0 0a 02 4a 	mul	r10,r0,r10
80004274:	14 33       	cp.w	r3,r10
80004276:	c0 82       	brcc	80004286 <__avr32_udiv64+0x8e>
80004278:	20 18       	sub	r8,1
8000427a:	18 03       	add	r3,r12
8000427c:	18 33       	cp.w	r3,r12
8000427e:	c0 43       	brcs	80004286 <__avr32_udiv64+0x8e>
80004280:	14 33       	cp.w	r3,r10
80004282:	f7 b8 03 01 	sublo	r8,1
80004286:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000428a:	cd f8       	rjmp	80004448 <__avr32_udiv64+0x250>
8000428c:	58 08       	cp.w	r8,0
8000428e:	c0 51       	brne	80004298 <__avr32_udiv64+0xa0>
80004290:	30 19       	mov	r9,1
80004292:	f2 08 0d 08 	divu	r8,r9,r8
80004296:	10 9c       	mov	r12,r8
80004298:	f8 06 12 00 	clz	r6,r12
8000429c:	c0 41       	brne	800042a4 <__avr32_udiv64+0xac>
8000429e:	18 1b       	sub	r11,r12
800042a0:	30 19       	mov	r9,1
800042a2:	c4 08       	rjmp	80004322 <__avr32_udiv64+0x12a>
800042a4:	ec 01 11 20 	rsub	r1,r6,32
800042a8:	f4 01 0a 49 	lsr	r9,r10,r1
800042ac:	f8 06 09 4c 	lsl	r12,r12,r6
800042b0:	f6 06 09 48 	lsl	r8,r11,r6
800042b4:	f6 01 0a 41 	lsr	r1,r11,r1
800042b8:	f3 e8 10 08 	or	r8,r9,r8
800042bc:	f8 03 16 10 	lsr	r3,r12,0x10
800042c0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800042c4:	e2 03 0d 00 	divu	r0,r1,r3
800042c8:	f0 0b 16 10 	lsr	r11,r8,0x10
800042cc:	00 9e       	mov	lr,r0
800042ce:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800042d2:	e0 05 02 49 	mul	r9,r0,r5
800042d6:	12 3b       	cp.w	r11,r9
800042d8:	c0 a2       	brcc	800042ec <__avr32_udiv64+0xf4>
800042da:	20 1e       	sub	lr,1
800042dc:	18 0b       	add	r11,r12
800042de:	18 3b       	cp.w	r11,r12
800042e0:	c0 63       	brcs	800042ec <__avr32_udiv64+0xf4>
800042e2:	12 3b       	cp.w	r11,r9
800042e4:	f7 be 03 01 	sublo	lr,1
800042e8:	f7 dc e3 0b 	addcs	r11,r11,r12
800042ec:	12 1b       	sub	r11,r9
800042ee:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800042f2:	f6 03 0d 02 	divu	r2,r11,r3
800042f6:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800042fa:	04 99       	mov	r9,r2
800042fc:	e4 05 02 4b 	mul	r11,r2,r5
80004300:	16 38       	cp.w	r8,r11
80004302:	c0 a2       	brcc	80004316 <__avr32_udiv64+0x11e>
80004304:	20 19       	sub	r9,1
80004306:	18 08       	add	r8,r12
80004308:	18 38       	cp.w	r8,r12
8000430a:	c0 63       	brcs	80004316 <__avr32_udiv64+0x11e>
8000430c:	16 38       	cp.w	r8,r11
8000430e:	f7 b9 03 01 	sublo	r9,1
80004312:	f1 dc e3 08 	addcs	r8,r8,r12
80004316:	f4 06 09 43 	lsl	r3,r10,r6
8000431a:	f0 0b 01 0b 	sub	r11,r8,r11
8000431e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80004322:	f8 06 16 10 	lsr	r6,r12,0x10
80004326:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000432a:	f6 06 0d 00 	divu	r0,r11,r6
8000432e:	e6 0b 16 10 	lsr	r11,r3,0x10
80004332:	00 9a       	mov	r10,r0
80004334:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004338:	e0 0e 02 48 	mul	r8,r0,lr
8000433c:	10 3b       	cp.w	r11,r8
8000433e:	c0 a2       	brcc	80004352 <__avr32_udiv64+0x15a>
80004340:	20 1a       	sub	r10,1
80004342:	18 0b       	add	r11,r12
80004344:	18 3b       	cp.w	r11,r12
80004346:	c0 63       	brcs	80004352 <__avr32_udiv64+0x15a>
80004348:	10 3b       	cp.w	r11,r8
8000434a:	f7 ba 03 01 	sublo	r10,1
8000434e:	f7 dc e3 0b 	addcs	r11,r11,r12
80004352:	f6 08 01 01 	sub	r1,r11,r8
80004356:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000435a:	e2 06 0d 00 	divu	r0,r1,r6
8000435e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80004362:	00 98       	mov	r8,r0
80004364:	e0 0e 02 4b 	mul	r11,r0,lr
80004368:	16 33       	cp.w	r3,r11
8000436a:	c0 82       	brcc	8000437a <__avr32_udiv64+0x182>
8000436c:	20 18       	sub	r8,1
8000436e:	18 03       	add	r3,r12
80004370:	18 33       	cp.w	r3,r12
80004372:	c0 43       	brcs	8000437a <__avr32_udiv64+0x182>
80004374:	16 33       	cp.w	r3,r11
80004376:	f7 b8 03 01 	sublo	r8,1
8000437a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000437e:	c6 98       	rjmp	80004450 <__avr32_udiv64+0x258>
80004380:	16 39       	cp.w	r9,r11
80004382:	e0 8b 00 65 	brhi	8000444c <__avr32_udiv64+0x254>
80004386:	f2 09 12 00 	clz	r9,r9
8000438a:	c0 b1       	brne	800043a0 <__avr32_udiv64+0x1a8>
8000438c:	10 3a       	cp.w	r10,r8
8000438e:	5f 2a       	srhs	r10
80004390:	1c 3b       	cp.w	r11,lr
80004392:	5f b8       	srhi	r8
80004394:	10 4a       	or	r10,r8
80004396:	f2 0a 18 00 	cp.b	r10,r9
8000439a:	c5 90       	breq	8000444c <__avr32_udiv64+0x254>
8000439c:	30 18       	mov	r8,1
8000439e:	c5 98       	rjmp	80004450 <__avr32_udiv64+0x258>
800043a0:	f0 09 09 46 	lsl	r6,r8,r9
800043a4:	f2 03 11 20 	rsub	r3,r9,32
800043a8:	fc 09 09 4e 	lsl	lr,lr,r9
800043ac:	f0 03 0a 48 	lsr	r8,r8,r3
800043b0:	f6 09 09 4c 	lsl	r12,r11,r9
800043b4:	f4 03 0a 42 	lsr	r2,r10,r3
800043b8:	ef 46 ff f4 	st.w	r7[-12],r6
800043bc:	f6 03 0a 43 	lsr	r3,r11,r3
800043c0:	18 42       	or	r2,r12
800043c2:	f1 ee 10 0c 	or	r12,r8,lr
800043c6:	f8 01 16 10 	lsr	r1,r12,0x10
800043ca:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800043ce:	e6 01 0d 04 	divu	r4,r3,r1
800043d2:	e4 03 16 10 	lsr	r3,r2,0x10
800043d6:	08 9e       	mov	lr,r4
800043d8:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800043dc:	e8 06 02 48 	mul	r8,r4,r6
800043e0:	10 33       	cp.w	r3,r8
800043e2:	c0 a2       	brcc	800043f6 <__avr32_udiv64+0x1fe>
800043e4:	20 1e       	sub	lr,1
800043e6:	18 03       	add	r3,r12
800043e8:	18 33       	cp.w	r3,r12
800043ea:	c0 63       	brcs	800043f6 <__avr32_udiv64+0x1fe>
800043ec:	10 33       	cp.w	r3,r8
800043ee:	f7 be 03 01 	sublo	lr,1
800043f2:	e7 dc e3 03 	addcs	r3,r3,r12
800043f6:	10 13       	sub	r3,r8
800043f8:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800043fc:	e6 01 0d 00 	divu	r0,r3,r1
80004400:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004404:	00 98       	mov	r8,r0
80004406:	e0 06 02 46 	mul	r6,r0,r6
8000440a:	0c 3b       	cp.w	r11,r6
8000440c:	c0 a2       	brcc	80004420 <__avr32_udiv64+0x228>
8000440e:	20 18       	sub	r8,1
80004410:	18 0b       	add	r11,r12
80004412:	18 3b       	cp.w	r11,r12
80004414:	c0 63       	brcs	80004420 <__avr32_udiv64+0x228>
80004416:	0c 3b       	cp.w	r11,r6
80004418:	f7 dc e3 0b 	addcs	r11,r11,r12
8000441c:	f7 b8 03 01 	sublo	r8,1
80004420:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80004424:	ee f4 ff f4 	ld.w	r4,r7[-12]
80004428:	0c 1b       	sub	r11,r6
8000442a:	f0 04 06 42 	mulu.d	r2,r8,r4
8000442e:	06 95       	mov	r5,r3
80004430:	16 35       	cp.w	r5,r11
80004432:	e0 8b 00 0a 	brhi	80004446 <__avr32_udiv64+0x24e>
80004436:	5f 0b       	sreq	r11
80004438:	f4 09 09 49 	lsl	r9,r10,r9
8000443c:	12 32       	cp.w	r2,r9
8000443e:	5f b9       	srhi	r9
80004440:	f7 e9 00 09 	and	r9,r11,r9
80004444:	c0 60       	breq	80004450 <__avr32_udiv64+0x258>
80004446:	20 18       	sub	r8,1
80004448:	30 09       	mov	r9,0
8000444a:	c0 38       	rjmp	80004450 <__avr32_udiv64+0x258>
8000444c:	30 09       	mov	r9,0
8000444e:	12 98       	mov	r8,r9
80004450:	10 9a       	mov	r10,r8
80004452:	12 93       	mov	r3,r9
80004454:	10 92       	mov	r2,r8
80004456:	12 9b       	mov	r11,r9
80004458:	2f dd       	sub	sp,-12
8000445a:	d8 32       	popm	r0-r7,pc

8000445c <setbuf>:
8000445c:	d4 01       	pushm	lr
8000445e:	e0 69 04 00 	mov	r9,1024
80004462:	58 0b       	cp.w	r11,0
80004464:	f9 ba 00 02 	moveq	r10,2
80004468:	f9 ba 01 00 	movne	r10,0
8000446c:	c0 2c       	rcall	80004470 <setvbuf>
8000446e:	d8 02       	popm	pc

80004470 <setvbuf>:
80004470:	d4 31       	pushm	r0-r7,lr
80004472:	4b e8       	lddpc	r8,80004568 <setvbuf+0xf8>
80004474:	18 97       	mov	r7,r12
80004476:	16 96       	mov	r6,r11
80004478:	14 95       	mov	r5,r10
8000447a:	12 94       	mov	r4,r9
8000447c:	70 0c       	ld.w	r12,r8[0x0]
8000447e:	58 0c       	cp.w	r12,0
80004480:	c0 50       	breq	8000448a <setvbuf+0x1a>
80004482:	78 68       	ld.w	r8,r12[0x18]
80004484:	58 08       	cp.w	r8,0
80004486:	c0 21       	brne	8000448a <setvbuf+0x1a>
80004488:	c5 4d       	rcall	80004730 <__sinit>
8000448a:	4b 98       	lddpc	r8,8000456c <setvbuf+0xfc>
8000448c:	10 37       	cp.w	r7,r8
8000448e:	c0 51       	brne	80004498 <setvbuf+0x28>
80004490:	4b 68       	lddpc	r8,80004568 <setvbuf+0xf8>
80004492:	70 08       	ld.w	r8,r8[0x0]
80004494:	70 07       	ld.w	r7,r8[0x0]
80004496:	c0 e8       	rjmp	800044b2 <setvbuf+0x42>
80004498:	4b 68       	lddpc	r8,80004570 <setvbuf+0x100>
8000449a:	10 37       	cp.w	r7,r8
8000449c:	c0 51       	brne	800044a6 <setvbuf+0x36>
8000449e:	4b 38       	lddpc	r8,80004568 <setvbuf+0xf8>
800044a0:	70 08       	ld.w	r8,r8[0x0]
800044a2:	70 17       	ld.w	r7,r8[0x4]
800044a4:	c0 78       	rjmp	800044b2 <setvbuf+0x42>
800044a6:	4b 48       	lddpc	r8,80004574 <setvbuf+0x104>
800044a8:	10 37       	cp.w	r7,r8
800044aa:	c0 41       	brne	800044b2 <setvbuf+0x42>
800044ac:	4a f8       	lddpc	r8,80004568 <setvbuf+0xf8>
800044ae:	70 08       	ld.w	r8,r8[0x0]
800044b0:	70 27       	ld.w	r7,r8[0x8]
800044b2:	58 25       	cp.w	r5,2
800044b4:	5f b8       	srhi	r8
800044b6:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
800044ba:	c0 20       	breq	800044be <setvbuf+0x4e>
800044bc:	dc 3a       	popm	r0-r7,pc,r12=-1
800044be:	4a b3       	lddpc	r3,80004568 <setvbuf+0xf8>
800044c0:	0e 9b       	mov	r11,r7
800044c2:	66 0c       	ld.w	r12,r3[0x0]
800044c4:	c5 ac       	rcall	80004578 <_fflush_r>
800044c6:	30 08       	mov	r8,0
800044c8:	8f 68       	st.w	r7[0x18],r8
800044ca:	8f 18       	st.w	r7[0x4],r8
800044cc:	8e 68       	ld.sh	r8,r7[0xc]
800044ce:	ed b8 00 07 	bld	r8,0x7
800044d2:	c0 41       	brne	800044da <setvbuf+0x6a>
800044d4:	66 0c       	ld.w	r12,r3[0x0]
800044d6:	6e 4b       	ld.w	r11,r7[0x10]
800044d8:	cc 8d       	rcall	80004868 <_free_r>
800044da:	8e 68       	ld.sh	r8,r7[0xc]
800044dc:	e0 18 ff 7c 	andl	r8,0xff7c
800044e0:	ae 68       	st.h	r7[0xc],r8
800044e2:	58 25       	cp.w	r5,2
800044e4:	c0 31       	brne	800044ea <setvbuf+0x7a>
800044e6:	30 0c       	mov	r12,0
800044e8:	c1 38       	rjmp	8000450e <setvbuf+0x9e>
800044ea:	58 06       	cp.w	r6,0
800044ec:	c2 11       	brne	8000452e <setvbuf+0xbe>
800044ee:	e0 63 04 00 	mov	r3,1024
800044f2:	58 04       	cp.w	r4,0
800044f4:	e6 04 17 00 	moveq	r4,r3
800044f8:	08 9c       	mov	r12,r4
800044fa:	e0 a0 02 a3 	rcall	80004a40 <malloc>
800044fe:	18 96       	mov	r6,r12
80004500:	c1 41       	brne	80004528 <setvbuf+0xb8>
80004502:	06 9c       	mov	r12,r3
80004504:	e0 a0 02 9e 	rcall	80004a40 <malloc>
80004508:	18 96       	mov	r6,r12
8000450a:	c0 e1       	brne	80004526 <setvbuf+0xb6>
8000450c:	3f fc       	mov	r12,-1
8000450e:	8e 68       	ld.sh	r8,r7[0xc]
80004510:	a1 b8       	sbr	r8,0x1
80004512:	ae 68       	st.h	r7[0xc],r8
80004514:	ee c8 ff b9 	sub	r8,r7,-71
80004518:	8f 48       	st.w	r7[0x10],r8
8000451a:	8f 08       	st.w	r7[0x0],r8
8000451c:	30 08       	mov	r8,0
8000451e:	8f 28       	st.w	r7[0x8],r8
80004520:	30 18       	mov	r8,1
80004522:	8f 58       	st.w	r7[0x14],r8
80004524:	d8 32       	popm	r0-r7,pc
80004526:	06 94       	mov	r4,r3
80004528:	8e 68       	ld.sh	r8,r7[0xc]
8000452a:	a7 b8       	sbr	r8,0x7
8000452c:	ae 68       	st.h	r7[0xc],r8
8000452e:	58 15       	cp.w	r5,1
80004530:	c0 71       	brne	8000453e <setvbuf+0xce>
80004532:	8e 68       	ld.sh	r8,r7[0xc]
80004534:	a1 a8       	sbr	r8,0x0
80004536:	ae 68       	st.h	r7[0xc],r8
80004538:	e8 08 11 00 	rsub	r8,r4,0
8000453c:	8f 68       	st.w	r7[0x18],r8
8000453e:	48 b8       	lddpc	r8,80004568 <setvbuf+0xf8>
80004540:	fe c9 fe b4 	sub	r9,pc,-332
80004544:	70 08       	ld.w	r8,r8[0x0]
80004546:	8f 46       	st.w	r7[0x10],r6
80004548:	91 a9       	st.w	r8[0x28],r9
8000454a:	8f 06       	st.w	r7[0x0],r6
8000454c:	8f 54       	st.w	r7[0x14],r4
8000454e:	8e 68       	ld.sh	r8,r7[0xc]
80004550:	10 9c       	mov	r12,r8
80004552:	e2 1c 00 08 	andl	r12,0x8,COH
80004556:	c0 70       	breq	80004564 <setvbuf+0xf4>
80004558:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000455c:	30 0c       	mov	r12,0
8000455e:	f9 b4 01 00 	movne	r4,0
80004562:	8f 24       	st.w	r7[0x8],r4
80004564:	d8 32       	popm	r0-r7,pc
80004566:	d7 03       	nop
80004568:	00 00       	add	r0,r0
8000456a:	01 c4       	ld.ub	r4,r0[0x4]
8000456c:	80 00       	ld.sh	r0,r0[0x0]
8000456e:	54 f8       	stdsp	sp[0x13c],r8
80004570:	80 00       	ld.sh	r0,r0[0x0]
80004572:	55 18       	stdsp	sp[0x144],r8
80004574:	80 00       	ld.sh	r0,r0[0x0]
80004576:	55 38       	stdsp	sp[0x14c],r8

80004578 <_fflush_r>:
80004578:	d4 21       	pushm	r4-r7,lr
8000457a:	16 97       	mov	r7,r11
8000457c:	18 96       	mov	r6,r12
8000457e:	76 48       	ld.w	r8,r11[0x10]
80004580:	58 08       	cp.w	r8,0
80004582:	c7 c0       	breq	8000467a <_fflush_r+0x102>
80004584:	58 0c       	cp.w	r12,0
80004586:	c0 50       	breq	80004590 <_fflush_r+0x18>
80004588:	78 68       	ld.w	r8,r12[0x18]
8000458a:	58 08       	cp.w	r8,0
8000458c:	c0 21       	brne	80004590 <_fflush_r+0x18>
8000458e:	cd 1c       	rcall	80004730 <__sinit>
80004590:	4b b8       	lddpc	r8,8000467c <_fflush_r+0x104>
80004592:	10 37       	cp.w	r7,r8
80004594:	c0 31       	brne	8000459a <_fflush_r+0x22>
80004596:	6c 07       	ld.w	r7,r6[0x0]
80004598:	c0 a8       	rjmp	800045ac <_fflush_r+0x34>
8000459a:	4b a8       	lddpc	r8,80004680 <_fflush_r+0x108>
8000459c:	10 37       	cp.w	r7,r8
8000459e:	c0 31       	brne	800045a4 <_fflush_r+0x2c>
800045a0:	6c 17       	ld.w	r7,r6[0x4]
800045a2:	c0 58       	rjmp	800045ac <_fflush_r+0x34>
800045a4:	4b 88       	lddpc	r8,80004684 <_fflush_r+0x10c>
800045a6:	10 37       	cp.w	r7,r8
800045a8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800045ac:	8e 6a       	ld.sh	r10,r7[0xc]
800045ae:	14 98       	mov	r8,r10
800045b0:	ed ba 00 03 	bld	r10,0x3
800045b4:	c4 20       	breq	80004638 <_fflush_r+0xc0>
800045b6:	ab ba       	sbr	r10,0xb
800045b8:	ae 6a       	st.h	r7[0xc],r10
800045ba:	6e 18       	ld.w	r8,r7[0x4]
800045bc:	58 08       	cp.w	r8,0
800045be:	e0 89 00 06 	brgt	800045ca <_fflush_r+0x52>
800045c2:	6f 08       	ld.w	r8,r7[0x40]
800045c4:	58 08       	cp.w	r8,0
800045c6:	e0 8a 00 5a 	brle	8000467a <_fflush_r+0x102>
800045ca:	6e b8       	ld.w	r8,r7[0x2c]
800045cc:	58 08       	cp.w	r8,0
800045ce:	c5 60       	breq	8000467a <_fflush_r+0x102>
800045d0:	e2 1a 10 00 	andl	r10,0x1000,COH
800045d4:	c0 30       	breq	800045da <_fflush_r+0x62>
800045d6:	6f 55       	ld.w	r5,r7[0x54]
800045d8:	c0 f8       	rjmp	800045f6 <_fflush_r+0x7e>
800045da:	30 19       	mov	r9,1
800045dc:	6e 8b       	ld.w	r11,r7[0x20]
800045de:	0c 9c       	mov	r12,r6
800045e0:	5d 18       	icall	r8
800045e2:	18 95       	mov	r5,r12
800045e4:	5b fc       	cp.w	r12,-1
800045e6:	c0 81       	brne	800045f6 <_fflush_r+0x7e>
800045e8:	6c 38       	ld.w	r8,r6[0xc]
800045ea:	59 d8       	cp.w	r8,29
800045ec:	c4 70       	breq	8000467a <_fflush_r+0x102>
800045ee:	8e 68       	ld.sh	r8,r7[0xc]
800045f0:	a7 a8       	sbr	r8,0x6
800045f2:	ae 68       	st.h	r7[0xc],r8
800045f4:	d8 22       	popm	r4-r7,pc
800045f6:	8e 68       	ld.sh	r8,r7[0xc]
800045f8:	ed b8 00 02 	bld	r8,0x2
800045fc:	c0 91       	brne	8000460e <_fflush_r+0x96>
800045fe:	6e 18       	ld.w	r8,r7[0x4]
80004600:	10 15       	sub	r5,r8
80004602:	6e d8       	ld.w	r8,r7[0x34]
80004604:	58 08       	cp.w	r8,0
80004606:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000460a:	eb d8 e1 15 	subne	r5,r5,r8
8000460e:	6e b8       	ld.w	r8,r7[0x2c]
80004610:	0c 9c       	mov	r12,r6
80004612:	30 09       	mov	r9,0
80004614:	0a 9a       	mov	r10,r5
80004616:	6e 8b       	ld.w	r11,r7[0x20]
80004618:	5d 18       	icall	r8
8000461a:	8e 68       	ld.sh	r8,r7[0xc]
8000461c:	0a 3c       	cp.w	r12,r5
8000461e:	c2 61       	brne	8000466a <_fflush_r+0xf2>
80004620:	ab d8       	cbr	r8,0xb
80004622:	30 0c       	mov	r12,0
80004624:	6e 49       	ld.w	r9,r7[0x10]
80004626:	ae 68       	st.h	r7[0xc],r8
80004628:	8f 1c       	st.w	r7[0x4],r12
8000462a:	8f 09       	st.w	r7[0x0],r9
8000462c:	ed b8 00 0c 	bld	r8,0xc
80004630:	c2 51       	brne	8000467a <_fflush_r+0x102>
80004632:	ef 45 00 54 	st.w	r7[84],r5
80004636:	d8 22       	popm	r4-r7,pc
80004638:	6e 45       	ld.w	r5,r7[0x10]
8000463a:	58 05       	cp.w	r5,0
8000463c:	c1 f0       	breq	8000467a <_fflush_r+0x102>
8000463e:	6e 04       	ld.w	r4,r7[0x0]
80004640:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80004644:	8f 05       	st.w	r7[0x0],r5
80004646:	f9 b8 01 00 	movne	r8,0
8000464a:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000464e:	0a 14       	sub	r4,r5
80004650:	8f 28       	st.w	r7[0x8],r8
80004652:	c1 18       	rjmp	80004674 <_fflush_r+0xfc>
80004654:	08 99       	mov	r9,r4
80004656:	0a 9a       	mov	r10,r5
80004658:	6e a8       	ld.w	r8,r7[0x28]
8000465a:	6e 8b       	ld.w	r11,r7[0x20]
8000465c:	0c 9c       	mov	r12,r6
8000465e:	5d 18       	icall	r8
80004660:	18 14       	sub	r4,r12
80004662:	58 0c       	cp.w	r12,0
80004664:	e0 89 00 07 	brgt	80004672 <_fflush_r+0xfa>
80004668:	8e 68       	ld.sh	r8,r7[0xc]
8000466a:	a7 a8       	sbr	r8,0x6
8000466c:	3f fc       	mov	r12,-1
8000466e:	ae 68       	st.h	r7[0xc],r8
80004670:	d8 22       	popm	r4-r7,pc
80004672:	18 05       	add	r5,r12
80004674:	58 04       	cp.w	r4,0
80004676:	fe 99 ff ef 	brgt	80004654 <_fflush_r+0xdc>
8000467a:	d8 2a       	popm	r4-r7,pc,r12=0
8000467c:	80 00       	ld.sh	r0,r0[0x0]
8000467e:	54 f8       	stdsp	sp[0x13c],r8
80004680:	80 00       	ld.sh	r0,r0[0x0]
80004682:	55 18       	stdsp	sp[0x144],r8
80004684:	80 00       	ld.sh	r0,r0[0x0]
80004686:	55 38       	stdsp	sp[0x14c],r8

80004688 <__sfp_lock_acquire>:
80004688:	5e fc       	retal	r12

8000468a <__sfp_lock_release>:
8000468a:	5e fc       	retal	r12

8000468c <_cleanup_r>:
8000468c:	d4 01       	pushm	lr
8000468e:	fe cb f5 f6 	sub	r11,pc,-2570
80004692:	cb 3d       	rcall	800049f8 <_fwalk>
80004694:	d8 02       	popm	pc
80004696:	d7 03       	nop

80004698 <__sfmoreglue>:
80004698:	d4 21       	pushm	r4-r7,lr
8000469a:	16 95       	mov	r5,r11
8000469c:	f6 06 10 5c 	mul	r6,r11,92
800046a0:	ec cb ff f4 	sub	r11,r6,-12
800046a4:	cd 6d       	rcall	80004a50 <_malloc_r>
800046a6:	18 97       	mov	r7,r12
800046a8:	c0 90       	breq	800046ba <__sfmoreglue+0x22>
800046aa:	99 15       	st.w	r12[0x4],r5
800046ac:	30 0b       	mov	r11,0
800046ae:	2f 4c       	sub	r12,-12
800046b0:	0c 9a       	mov	r10,r6
800046b2:	8f 2c       	st.w	r7[0x8],r12
800046b4:	8f 0b       	st.w	r7[0x0],r11
800046b6:	e0 a0 03 e1 	rcall	80004e78 <memset>
800046ba:	0e 9c       	mov	r12,r7
800046bc:	d8 22       	popm	r4-r7,pc
800046be:	d7 03       	nop

800046c0 <__sfp>:
800046c0:	d4 21       	pushm	r4-r7,lr
800046c2:	49 b8       	lddpc	r8,8000472c <__sfp+0x6c>
800046c4:	18 96       	mov	r6,r12
800046c6:	70 07       	ld.w	r7,r8[0x0]
800046c8:	6e 68       	ld.w	r8,r7[0x18]
800046ca:	58 08       	cp.w	r8,0
800046cc:	c0 31       	brne	800046d2 <__sfp+0x12>
800046ce:	0e 9c       	mov	r12,r7
800046d0:	c3 0c       	rcall	80004730 <__sinit>
800046d2:	ee c7 ff 28 	sub	r7,r7,-216
800046d6:	30 05       	mov	r5,0
800046d8:	6e 2c       	ld.w	r12,r7[0x8]
800046da:	6e 18       	ld.w	r8,r7[0x4]
800046dc:	c0 68       	rjmp	800046e8 <__sfp+0x28>
800046de:	98 69       	ld.sh	r9,r12[0xc]
800046e0:	ea 09 19 00 	cp.h	r9,r5
800046e4:	c1 10       	breq	80004706 <__sfp+0x46>
800046e6:	2a 4c       	sub	r12,-92
800046e8:	20 18       	sub	r8,1
800046ea:	cf a7       	brpl	800046de <__sfp+0x1e>
800046ec:	6e 08       	ld.w	r8,r7[0x0]
800046ee:	58 08       	cp.w	r8,0
800046f0:	c0 61       	brne	800046fc <__sfp+0x3c>
800046f2:	30 4b       	mov	r11,4
800046f4:	0c 9c       	mov	r12,r6
800046f6:	cd 1f       	rcall	80004698 <__sfmoreglue>
800046f8:	8f 0c       	st.w	r7[0x0],r12
800046fa:	c0 30       	breq	80004700 <__sfp+0x40>
800046fc:	6e 07       	ld.w	r7,r7[0x0]
800046fe:	ce db       	rjmp	800046d8 <__sfp+0x18>
80004700:	30 c8       	mov	r8,12
80004702:	8d 38       	st.w	r6[0xc],r8
80004704:	d8 22       	popm	r4-r7,pc
80004706:	30 08       	mov	r8,0
80004708:	f9 48 00 4c 	st.w	r12[76],r8
8000470c:	99 08       	st.w	r12[0x0],r8
8000470e:	99 28       	st.w	r12[0x8],r8
80004710:	99 18       	st.w	r12[0x4],r8
80004712:	99 48       	st.w	r12[0x10],r8
80004714:	99 58       	st.w	r12[0x14],r8
80004716:	99 68       	st.w	r12[0x18],r8
80004718:	99 d8       	st.w	r12[0x34],r8
8000471a:	99 e8       	st.w	r12[0x38],r8
8000471c:	f9 48 00 48 	st.w	r12[72],r8
80004720:	3f f8       	mov	r8,-1
80004722:	b8 78       	st.h	r12[0xe],r8
80004724:	30 18       	mov	r8,1
80004726:	b8 68       	st.h	r12[0xc],r8
80004728:	d8 22       	popm	r4-r7,pc
8000472a:	d7 03       	nop
8000472c:	80 00       	ld.sh	r0,r0[0x0]
8000472e:	54 f4       	stdsp	sp[0x13c],r4

80004730 <__sinit>:
80004730:	d4 21       	pushm	r4-r7,lr
80004732:	18 96       	mov	r6,r12
80004734:	78 67       	ld.w	r7,r12[0x18]
80004736:	58 07       	cp.w	r7,0
80004738:	c4 91       	brne	800047ca <__sinit+0x9a>
8000473a:	fe c8 00 ae 	sub	r8,pc,174
8000473e:	30 15       	mov	r5,1
80004740:	99 a8       	st.w	r12[0x28],r8
80004742:	f9 47 00 d8 	st.w	r12[216],r7
80004746:	f9 47 00 dc 	st.w	r12[220],r7
8000474a:	f9 47 00 e0 	st.w	r12[224],r7
8000474e:	99 65       	st.w	r12[0x18],r5
80004750:	cb 8f       	rcall	800046c0 <__sfp>
80004752:	8d 0c       	st.w	r6[0x0],r12
80004754:	0c 9c       	mov	r12,r6
80004756:	cb 5f       	rcall	800046c0 <__sfp>
80004758:	8d 1c       	st.w	r6[0x4],r12
8000475a:	0c 9c       	mov	r12,r6
8000475c:	cb 2f       	rcall	800046c0 <__sfp>
8000475e:	6c 09       	ld.w	r9,r6[0x0]
80004760:	30 48       	mov	r8,4
80004762:	93 07       	st.w	r9[0x0],r7
80004764:	b2 68       	st.h	r9[0xc],r8
80004766:	93 17       	st.w	r9[0x4],r7
80004768:	93 27       	st.w	r9[0x8],r7
8000476a:	6c 18       	ld.w	r8,r6[0x4]
8000476c:	b2 77       	st.h	r9[0xe],r7
8000476e:	93 47       	st.w	r9[0x10],r7
80004770:	93 57       	st.w	r9[0x14],r7
80004772:	93 67       	st.w	r9[0x18],r7
80004774:	93 89       	st.w	r9[0x20],r9
80004776:	91 07       	st.w	r8[0x0],r7
80004778:	91 17       	st.w	r8[0x4],r7
8000477a:	91 27       	st.w	r8[0x8],r7
8000477c:	fe ce f8 7c 	sub	lr,pc,-1924
80004780:	fe cb f8 ac 	sub	r11,pc,-1876
80004784:	93 9e       	st.w	r9[0x24],lr
80004786:	93 ab       	st.w	r9[0x28],r11
80004788:	fe ca f8 d4 	sub	r10,pc,-1836
8000478c:	fe c4 f8 e0 	sub	r4,pc,-1824
80004790:	93 ba       	st.w	r9[0x2c],r10
80004792:	93 c4       	st.w	r9[0x30],r4
80004794:	30 99       	mov	r9,9
80004796:	b0 69       	st.h	r8[0xc],r9
80004798:	b0 75       	st.h	r8[0xe],r5
8000479a:	91 c4       	st.w	r8[0x30],r4
8000479c:	91 47       	st.w	r8[0x10],r7
8000479e:	91 57       	st.w	r8[0x14],r7
800047a0:	91 67       	st.w	r8[0x18],r7
800047a2:	91 88       	st.w	r8[0x20],r8
800047a4:	91 9e       	st.w	r8[0x24],lr
800047a6:	91 ab       	st.w	r8[0x28],r11
800047a8:	91 ba       	st.w	r8[0x2c],r10
800047aa:	8d 2c       	st.w	r6[0x8],r12
800047ac:	31 28       	mov	r8,18
800047ae:	99 07       	st.w	r12[0x0],r7
800047b0:	b8 68       	st.h	r12[0xc],r8
800047b2:	99 17       	st.w	r12[0x4],r7
800047b4:	99 27       	st.w	r12[0x8],r7
800047b6:	30 28       	mov	r8,2
800047b8:	b8 78       	st.h	r12[0xe],r8
800047ba:	99 c4       	st.w	r12[0x30],r4
800047bc:	99 67       	st.w	r12[0x18],r7
800047be:	99 9e       	st.w	r12[0x24],lr
800047c0:	99 ab       	st.w	r12[0x28],r11
800047c2:	99 ba       	st.w	r12[0x2c],r10
800047c4:	99 47       	st.w	r12[0x10],r7
800047c6:	99 57       	st.w	r12[0x14],r7
800047c8:	99 8c       	st.w	r12[0x20],r12
800047ca:	d8 22       	popm	r4-r7,pc

800047cc <_malloc_trim_r>:
800047cc:	d4 21       	pushm	r4-r7,lr
800047ce:	16 95       	mov	r5,r11
800047d0:	18 97       	mov	r7,r12
800047d2:	e0 a0 03 5a 	rcall	80004e86 <__malloc_lock>
800047d6:	4a 24       	lddpc	r4,8000485c <_malloc_trim_r+0x90>
800047d8:	68 28       	ld.w	r8,r4[0x8]
800047da:	70 16       	ld.w	r6,r8[0x4]
800047dc:	e0 16 ff fc 	andl	r6,0xfffc
800047e0:	ec c8 ff 91 	sub	r8,r6,-111
800047e4:	f0 05 01 05 	sub	r5,r8,r5
800047e8:	e0 15 ff 80 	andl	r5,0xff80
800047ec:	ea c5 00 80 	sub	r5,r5,128
800047f0:	e0 45 00 7f 	cp.w	r5,127
800047f4:	e0 8a 00 23 	brle	8000483a <_malloc_trim_r+0x6e>
800047f8:	30 0b       	mov	r11,0
800047fa:	0e 9c       	mov	r12,r7
800047fc:	e0 a0 03 48 	rcall	80004e8c <_sbrk_r>
80004800:	68 28       	ld.w	r8,r4[0x8]
80004802:	0c 08       	add	r8,r6
80004804:	10 3c       	cp.w	r12,r8
80004806:	c1 a1       	brne	8000483a <_malloc_trim_r+0x6e>
80004808:	ea 0b 11 00 	rsub	r11,r5,0
8000480c:	0e 9c       	mov	r12,r7
8000480e:	e0 a0 03 3f 	rcall	80004e8c <_sbrk_r>
80004812:	5b fc       	cp.w	r12,-1
80004814:	c1 71       	brne	80004842 <_malloc_trim_r+0x76>
80004816:	30 0b       	mov	r11,0
80004818:	0e 9c       	mov	r12,r7
8000481a:	e0 a0 03 39 	rcall	80004e8c <_sbrk_r>
8000481e:	68 28       	ld.w	r8,r4[0x8]
80004820:	f8 08 01 09 	sub	r9,r12,r8
80004824:	58 f9       	cp.w	r9,15
80004826:	e0 8a 00 0a 	brle	8000483a <_malloc_trim_r+0x6e>
8000482a:	a1 a9       	sbr	r9,0x0
8000482c:	91 19       	st.w	r8[0x4],r9
8000482e:	48 d8       	lddpc	r8,80004860 <_malloc_trim_r+0x94>
80004830:	70 09       	ld.w	r9,r8[0x0]
80004832:	48 d8       	lddpc	r8,80004864 <_malloc_trim_r+0x98>
80004834:	f8 09 01 09 	sub	r9,r12,r9
80004838:	91 09       	st.w	r8[0x0],r9
8000483a:	0e 9c       	mov	r12,r7
8000483c:	e0 a0 03 26 	rcall	80004e88 <__malloc_unlock>
80004840:	d8 2a       	popm	r4-r7,pc,r12=0
80004842:	68 28       	ld.w	r8,r4[0x8]
80004844:	0a 16       	sub	r6,r5
80004846:	a1 a6       	sbr	r6,0x0
80004848:	91 16       	st.w	r8[0x4],r6
8000484a:	48 78       	lddpc	r8,80004864 <_malloc_trim_r+0x98>
8000484c:	70 09       	ld.w	r9,r8[0x0]
8000484e:	0a 19       	sub	r9,r5
80004850:	0e 9c       	mov	r12,r7
80004852:	91 09       	st.w	r8[0x0],r9
80004854:	e0 a0 03 1a 	rcall	80004e88 <__malloc_unlock>
80004858:	da 2a       	popm	r4-r7,pc,r12=1
8000485a:	d7 03       	nop
8000485c:	00 00       	add	r0,r0
8000485e:	01 c8       	ld.ub	r8,r0[0x4]
80004860:	00 00       	add	r0,r0
80004862:	05 d4       	ld.ub	r4,r2[0x5]
80004864:	00 00       	add	r0,r0
80004866:	0c 78       	tst	r8,r6

80004868 <_free_r>:
80004868:	d4 21       	pushm	r4-r7,lr
8000486a:	16 96       	mov	r6,r11
8000486c:	18 97       	mov	r7,r12
8000486e:	58 0b       	cp.w	r11,0
80004870:	e0 80 00 c2 	breq	800049f4 <_free_r+0x18c>
80004874:	e0 a0 03 09 	rcall	80004e86 <__malloc_lock>
80004878:	20 86       	sub	r6,8
8000487a:	4c ba       	lddpc	r10,800049a4 <_free_r+0x13c>
8000487c:	6c 18       	ld.w	r8,r6[0x4]
8000487e:	74 2e       	ld.w	lr,r10[0x8]
80004880:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80004884:	a1 c8       	cbr	r8,0x0
80004886:	ec 08 00 09 	add	r9,r6,r8
8000488a:	72 1b       	ld.w	r11,r9[0x4]
8000488c:	e0 1b ff fc 	andl	r11,0xfffc
80004890:	1c 39       	cp.w	r9,lr
80004892:	c1 c1       	brne	800048ca <_free_r+0x62>
80004894:	f6 08 00 08 	add	r8,r11,r8
80004898:	58 0c       	cp.w	r12,0
8000489a:	c0 81       	brne	800048aa <_free_r+0x42>
8000489c:	6c 09       	ld.w	r9,r6[0x0]
8000489e:	12 16       	sub	r6,r9
800048a0:	12 08       	add	r8,r9
800048a2:	6c 3b       	ld.w	r11,r6[0xc]
800048a4:	6c 29       	ld.w	r9,r6[0x8]
800048a6:	97 29       	st.w	r11[0x8],r9
800048a8:	93 3b       	st.w	r9[0xc],r11
800048aa:	10 99       	mov	r9,r8
800048ac:	95 26       	st.w	r10[0x8],r6
800048ae:	a1 a9       	sbr	r9,0x0
800048b0:	8d 19       	st.w	r6[0x4],r9
800048b2:	4b e9       	lddpc	r9,800049a8 <_free_r+0x140>
800048b4:	72 09       	ld.w	r9,r9[0x0]
800048b6:	12 38       	cp.w	r8,r9
800048b8:	c0 53       	brcs	800048c2 <_free_r+0x5a>
800048ba:	4b d8       	lddpc	r8,800049ac <_free_r+0x144>
800048bc:	0e 9c       	mov	r12,r7
800048be:	70 0b       	ld.w	r11,r8[0x0]
800048c0:	c8 6f       	rcall	800047cc <_malloc_trim_r>
800048c2:	0e 9c       	mov	r12,r7
800048c4:	e0 a0 02 e2 	rcall	80004e88 <__malloc_unlock>
800048c8:	d8 22       	popm	r4-r7,pc
800048ca:	93 1b       	st.w	r9[0x4],r11
800048cc:	58 0c       	cp.w	r12,0
800048ce:	c0 30       	breq	800048d4 <_free_r+0x6c>
800048d0:	30 0c       	mov	r12,0
800048d2:	c1 08       	rjmp	800048f2 <_free_r+0x8a>
800048d4:	6c 0e       	ld.w	lr,r6[0x0]
800048d6:	f4 c5 ff f8 	sub	r5,r10,-8
800048da:	1c 16       	sub	r6,lr
800048dc:	1c 08       	add	r8,lr
800048de:	6c 2e       	ld.w	lr,r6[0x8]
800048e0:	0a 3e       	cp.w	lr,r5
800048e2:	f9 bc 00 01 	moveq	r12,1
800048e6:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800048ea:	eb fe 1a 02 	st.wne	r5[0x8],lr
800048ee:	fd f5 1a 03 	st.wne	lr[0xc],r5
800048f2:	f2 0b 00 0e 	add	lr,r9,r11
800048f6:	7c 1e       	ld.w	lr,lr[0x4]
800048f8:	ed be 00 00 	bld	lr,0x0
800048fc:	c1 30       	breq	80004922 <_free_r+0xba>
800048fe:	16 08       	add	r8,r11
80004900:	58 0c       	cp.w	r12,0
80004902:	c0 c1       	brne	8000491a <_free_r+0xb2>
80004904:	4a 8e       	lddpc	lr,800049a4 <_free_r+0x13c>
80004906:	72 2b       	ld.w	r11,r9[0x8]
80004908:	2f 8e       	sub	lr,-8
8000490a:	1c 3b       	cp.w	r11,lr
8000490c:	c0 71       	brne	8000491a <_free_r+0xb2>
8000490e:	97 36       	st.w	r11[0xc],r6
80004910:	97 26       	st.w	r11[0x8],r6
80004912:	8d 2b       	st.w	r6[0x8],r11
80004914:	8d 3b       	st.w	r6[0xc],r11
80004916:	30 1c       	mov	r12,1
80004918:	c0 58       	rjmp	80004922 <_free_r+0xba>
8000491a:	72 2b       	ld.w	r11,r9[0x8]
8000491c:	72 39       	ld.w	r9,r9[0xc]
8000491e:	93 2b       	st.w	r9[0x8],r11
80004920:	97 39       	st.w	r11[0xc],r9
80004922:	10 99       	mov	r9,r8
80004924:	ec 08 09 08 	st.w	r6[r8],r8
80004928:	a1 a9       	sbr	r9,0x0
8000492a:	8d 19       	st.w	r6[0x4],r9
8000492c:	58 0c       	cp.w	r12,0
8000492e:	c6 01       	brne	800049ee <_free_r+0x186>
80004930:	e0 48 01 ff 	cp.w	r8,511
80004934:	e0 8b 00 13 	brhi	8000495a <_free_r+0xf2>
80004938:	a3 98       	lsr	r8,0x3
8000493a:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000493e:	72 2b       	ld.w	r11,r9[0x8]
80004940:	8d 39       	st.w	r6[0xc],r9
80004942:	8d 2b       	st.w	r6[0x8],r11
80004944:	97 36       	st.w	r11[0xc],r6
80004946:	93 26       	st.w	r9[0x8],r6
80004948:	a3 48       	asr	r8,0x2
8000494a:	74 19       	ld.w	r9,r10[0x4]
8000494c:	30 1b       	mov	r11,1
8000494e:	f6 08 09 48 	lsl	r8,r11,r8
80004952:	f3 e8 10 08 	or	r8,r9,r8
80004956:	95 18       	st.w	r10[0x4],r8
80004958:	c4 b8       	rjmp	800049ee <_free_r+0x186>
8000495a:	f0 0b 16 09 	lsr	r11,r8,0x9
8000495e:	58 4b       	cp.w	r11,4
80004960:	e0 8b 00 06 	brhi	8000496c <_free_r+0x104>
80004964:	f0 0b 16 06 	lsr	r11,r8,0x6
80004968:	2c 8b       	sub	r11,-56
8000496a:	c2 68       	rjmp	800049b6 <_free_r+0x14e>
8000496c:	59 4b       	cp.w	r11,20
8000496e:	e0 8b 00 04 	brhi	80004976 <_free_r+0x10e>
80004972:	2a 5b       	sub	r11,-91
80004974:	c2 18       	rjmp	800049b6 <_free_r+0x14e>
80004976:	e0 4b 00 54 	cp.w	r11,84
8000497a:	e0 8b 00 06 	brhi	80004986 <_free_r+0x11e>
8000497e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80004982:	29 2b       	sub	r11,-110
80004984:	c1 98       	rjmp	800049b6 <_free_r+0x14e>
80004986:	e0 4b 01 54 	cp.w	r11,340
8000498a:	e0 8b 00 06 	brhi	80004996 <_free_r+0x12e>
8000498e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80004992:	28 9b       	sub	r11,-119
80004994:	c1 18       	rjmp	800049b6 <_free_r+0x14e>
80004996:	e0 4b 05 54 	cp.w	r11,1364
8000499a:	e0 88 00 0b 	brls	800049b0 <_free_r+0x148>
8000499e:	37 eb       	mov	r11,126
800049a0:	c0 b8       	rjmp	800049b6 <_free_r+0x14e>
800049a2:	d7 03       	nop
800049a4:	00 00       	add	r0,r0
800049a6:	01 c8       	ld.ub	r8,r0[0x4]
800049a8:	00 00       	add	r0,r0
800049aa:	05 d0       	ld.ub	r0,r2[0x5]
800049ac:	00 00       	add	r0,r0
800049ae:	0c 74       	tst	r4,r6
800049b0:	f0 0b 16 12 	lsr	r11,r8,0x12
800049b4:	28 4b       	sub	r11,-124
800049b6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800049ba:	78 29       	ld.w	r9,r12[0x8]
800049bc:	18 39       	cp.w	r9,r12
800049be:	c0 e1       	brne	800049da <_free_r+0x172>
800049c0:	74 18       	ld.w	r8,r10[0x4]
800049c2:	a3 4b       	asr	r11,0x2
800049c4:	30 1c       	mov	r12,1
800049c6:	f8 0b 09 4b 	lsl	r11,r12,r11
800049ca:	f1 eb 10 0b 	or	r11,r8,r11
800049ce:	12 98       	mov	r8,r9
800049d0:	95 1b       	st.w	r10[0x4],r11
800049d2:	c0 a8       	rjmp	800049e6 <_free_r+0x17e>
800049d4:	72 29       	ld.w	r9,r9[0x8]
800049d6:	18 39       	cp.w	r9,r12
800049d8:	c0 60       	breq	800049e4 <_free_r+0x17c>
800049da:	72 1a       	ld.w	r10,r9[0x4]
800049dc:	e0 1a ff fc 	andl	r10,0xfffc
800049e0:	14 38       	cp.w	r8,r10
800049e2:	cf 93       	brcs	800049d4 <_free_r+0x16c>
800049e4:	72 38       	ld.w	r8,r9[0xc]
800049e6:	8d 38       	st.w	r6[0xc],r8
800049e8:	8d 29       	st.w	r6[0x8],r9
800049ea:	93 36       	st.w	r9[0xc],r6
800049ec:	91 26       	st.w	r8[0x8],r6
800049ee:	0e 9c       	mov	r12,r7
800049f0:	e0 a0 02 4c 	rcall	80004e88 <__malloc_unlock>
800049f4:	d8 22       	popm	r4-r7,pc
800049f6:	d7 03       	nop

800049f8 <_fwalk>:
800049f8:	d4 31       	pushm	r0-r7,lr
800049fa:	30 05       	mov	r5,0
800049fc:	16 91       	mov	r1,r11
800049fe:	f8 c7 ff 28 	sub	r7,r12,-216
80004a02:	0a 92       	mov	r2,r5
80004a04:	c4 2e       	rcall	80004688 <__sfp_lock_acquire>
80004a06:	3f f3       	mov	r3,-1
80004a08:	c1 68       	rjmp	80004a34 <_fwalk+0x3c>
80004a0a:	6e 26       	ld.w	r6,r7[0x8]
80004a0c:	6e 14       	ld.w	r4,r7[0x4]
80004a0e:	2f 46       	sub	r6,-12
80004a10:	c0 c8       	rjmp	80004a28 <_fwalk+0x30>
80004a12:	8c 08       	ld.sh	r8,r6[0x0]
80004a14:	e4 08 19 00 	cp.h	r8,r2
80004a18:	c0 70       	breq	80004a26 <_fwalk+0x2e>
80004a1a:	8c 18       	ld.sh	r8,r6[0x2]
80004a1c:	e6 08 19 00 	cp.h	r8,r3
80004a20:	c0 30       	breq	80004a26 <_fwalk+0x2e>
80004a22:	5d 11       	icall	r1
80004a24:	18 45       	or	r5,r12
80004a26:	2a 46       	sub	r6,-92
80004a28:	20 14       	sub	r4,1
80004a2a:	ec cc 00 0c 	sub	r12,r6,12
80004a2e:	58 04       	cp.w	r4,0
80004a30:	cf 14       	brge	80004a12 <_fwalk+0x1a>
80004a32:	6e 07       	ld.w	r7,r7[0x0]
80004a34:	58 07       	cp.w	r7,0
80004a36:	ce a1       	brne	80004a0a <_fwalk+0x12>
80004a38:	c2 9e       	rcall	8000468a <__sfp_lock_release>
80004a3a:	0a 9c       	mov	r12,r5
80004a3c:	d8 32       	popm	r0-r7,pc
80004a3e:	d7 03       	nop

80004a40 <malloc>:
80004a40:	d4 01       	pushm	lr
80004a42:	48 38       	lddpc	r8,80004a4c <malloc+0xc>
80004a44:	18 9b       	mov	r11,r12
80004a46:	70 0c       	ld.w	r12,r8[0x0]
80004a48:	c0 4c       	rcall	80004a50 <_malloc_r>
80004a4a:	d8 02       	popm	pc
80004a4c:	00 00       	add	r0,r0
80004a4e:	01 c4       	ld.ub	r4,r0[0x4]

80004a50 <_malloc_r>:
80004a50:	d4 31       	pushm	r0-r7,lr
80004a52:	f6 c8 ff f5 	sub	r8,r11,-11
80004a56:	18 95       	mov	r5,r12
80004a58:	10 97       	mov	r7,r8
80004a5a:	e0 17 ff f8 	andl	r7,0xfff8
80004a5e:	59 68       	cp.w	r8,22
80004a60:	f9 b7 08 10 	movls	r7,16
80004a64:	16 37       	cp.w	r7,r11
80004a66:	5f 38       	srlo	r8
80004a68:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004a6c:	c0 50       	breq	80004a76 <_malloc_r+0x26>
80004a6e:	30 c8       	mov	r8,12
80004a70:	99 38       	st.w	r12[0xc],r8
80004a72:	e0 8f 01 ea 	bral	80004e46 <_malloc_r+0x3f6>
80004a76:	e0 a0 02 08 	rcall	80004e86 <__malloc_lock>
80004a7a:	e0 47 01 f7 	cp.w	r7,503
80004a7e:	e0 8b 00 1c 	brhi	80004ab6 <_malloc_r+0x66>
80004a82:	ee 03 16 03 	lsr	r3,r7,0x3
80004a86:	4c c8       	lddpc	r8,80004bb4 <_malloc_r+0x164>
80004a88:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004a8c:	70 36       	ld.w	r6,r8[0xc]
80004a8e:	10 36       	cp.w	r6,r8
80004a90:	c0 61       	brne	80004a9c <_malloc_r+0x4c>
80004a92:	ec c8 ff f8 	sub	r8,r6,-8
80004a96:	70 36       	ld.w	r6,r8[0xc]
80004a98:	10 36       	cp.w	r6,r8
80004a9a:	c0 c0       	breq	80004ab2 <_malloc_r+0x62>
80004a9c:	6c 18       	ld.w	r8,r6[0x4]
80004a9e:	e0 18 ff fc 	andl	r8,0xfffc
80004aa2:	6c 3a       	ld.w	r10,r6[0xc]
80004aa4:	ec 08 00 09 	add	r9,r6,r8
80004aa8:	0a 9c       	mov	r12,r5
80004aaa:	6c 28       	ld.w	r8,r6[0x8]
80004aac:	95 28       	st.w	r10[0x8],r8
80004aae:	91 3a       	st.w	r8[0xc],r10
80004ab0:	c4 68       	rjmp	80004b3c <_malloc_r+0xec>
80004ab2:	2f e3       	sub	r3,-2
80004ab4:	c4 c8       	rjmp	80004b4c <_malloc_r+0xfc>
80004ab6:	ee 03 16 09 	lsr	r3,r7,0x9
80004aba:	c0 41       	brne	80004ac2 <_malloc_r+0x72>
80004abc:	ee 03 16 03 	lsr	r3,r7,0x3
80004ac0:	c2 68       	rjmp	80004b0c <_malloc_r+0xbc>
80004ac2:	58 43       	cp.w	r3,4
80004ac4:	e0 8b 00 06 	brhi	80004ad0 <_malloc_r+0x80>
80004ac8:	ee 03 16 06 	lsr	r3,r7,0x6
80004acc:	2c 83       	sub	r3,-56
80004ace:	c1 f8       	rjmp	80004b0c <_malloc_r+0xbc>
80004ad0:	59 43       	cp.w	r3,20
80004ad2:	e0 8b 00 04 	brhi	80004ada <_malloc_r+0x8a>
80004ad6:	2a 53       	sub	r3,-91
80004ad8:	c1 a8       	rjmp	80004b0c <_malloc_r+0xbc>
80004ada:	e0 43 00 54 	cp.w	r3,84
80004ade:	e0 8b 00 06 	brhi	80004aea <_malloc_r+0x9a>
80004ae2:	ee 03 16 0c 	lsr	r3,r7,0xc
80004ae6:	29 23       	sub	r3,-110
80004ae8:	c1 28       	rjmp	80004b0c <_malloc_r+0xbc>
80004aea:	e0 43 01 54 	cp.w	r3,340
80004aee:	e0 8b 00 06 	brhi	80004afa <_malloc_r+0xaa>
80004af2:	ee 03 16 0f 	lsr	r3,r7,0xf
80004af6:	28 93       	sub	r3,-119
80004af8:	c0 a8       	rjmp	80004b0c <_malloc_r+0xbc>
80004afa:	e0 43 05 54 	cp.w	r3,1364
80004afe:	e0 88 00 04 	brls	80004b06 <_malloc_r+0xb6>
80004b02:	37 e3       	mov	r3,126
80004b04:	c0 48       	rjmp	80004b0c <_malloc_r+0xbc>
80004b06:	ee 03 16 12 	lsr	r3,r7,0x12
80004b0a:	28 43       	sub	r3,-124
80004b0c:	4a aa       	lddpc	r10,80004bb4 <_malloc_r+0x164>
80004b0e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004b12:	74 36       	ld.w	r6,r10[0xc]
80004b14:	c1 98       	rjmp	80004b46 <_malloc_r+0xf6>
80004b16:	6c 19       	ld.w	r9,r6[0x4]
80004b18:	e0 19 ff fc 	andl	r9,0xfffc
80004b1c:	f2 07 01 0b 	sub	r11,r9,r7
80004b20:	58 fb       	cp.w	r11,15
80004b22:	e0 8a 00 04 	brle	80004b2a <_malloc_r+0xda>
80004b26:	20 13       	sub	r3,1
80004b28:	c1 18       	rjmp	80004b4a <_malloc_r+0xfa>
80004b2a:	6c 38       	ld.w	r8,r6[0xc]
80004b2c:	58 0b       	cp.w	r11,0
80004b2e:	c0 b5       	brlt	80004b44 <_malloc_r+0xf4>
80004b30:	6c 2a       	ld.w	r10,r6[0x8]
80004b32:	ec 09 00 09 	add	r9,r6,r9
80004b36:	0a 9c       	mov	r12,r5
80004b38:	91 2a       	st.w	r8[0x8],r10
80004b3a:	95 38       	st.w	r10[0xc],r8
80004b3c:	72 18       	ld.w	r8,r9[0x4]
80004b3e:	a1 a8       	sbr	r8,0x0
80004b40:	93 18       	st.w	r9[0x4],r8
80004b42:	cb a8       	rjmp	80004cb6 <_malloc_r+0x266>
80004b44:	10 96       	mov	r6,r8
80004b46:	14 36       	cp.w	r6,r10
80004b48:	ce 71       	brne	80004b16 <_malloc_r+0xc6>
80004b4a:	2f f3       	sub	r3,-1
80004b4c:	49 aa       	lddpc	r10,80004bb4 <_malloc_r+0x164>
80004b4e:	f4 cc ff f8 	sub	r12,r10,-8
80004b52:	78 26       	ld.w	r6,r12[0x8]
80004b54:	18 36       	cp.w	r6,r12
80004b56:	c6 c0       	breq	80004c2e <_malloc_r+0x1de>
80004b58:	6c 19       	ld.w	r9,r6[0x4]
80004b5a:	e0 19 ff fc 	andl	r9,0xfffc
80004b5e:	f2 07 01 08 	sub	r8,r9,r7
80004b62:	58 f8       	cp.w	r8,15
80004b64:	e0 89 00 8e 	brgt	80004c80 <_malloc_r+0x230>
80004b68:	99 3c       	st.w	r12[0xc],r12
80004b6a:	99 2c       	st.w	r12[0x8],r12
80004b6c:	58 08       	cp.w	r8,0
80004b6e:	c0 55       	brlt	80004b78 <_malloc_r+0x128>
80004b70:	ec 09 00 09 	add	r9,r6,r9
80004b74:	0a 9c       	mov	r12,r5
80004b76:	ce 3b       	rjmp	80004b3c <_malloc_r+0xec>
80004b78:	e0 49 01 ff 	cp.w	r9,511
80004b7c:	e0 8b 00 13 	brhi	80004ba2 <_malloc_r+0x152>
80004b80:	a3 99       	lsr	r9,0x3
80004b82:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004b86:	70 2b       	ld.w	r11,r8[0x8]
80004b88:	8d 38       	st.w	r6[0xc],r8
80004b8a:	8d 2b       	st.w	r6[0x8],r11
80004b8c:	97 36       	st.w	r11[0xc],r6
80004b8e:	91 26       	st.w	r8[0x8],r6
80004b90:	a3 49       	asr	r9,0x2
80004b92:	74 18       	ld.w	r8,r10[0x4]
80004b94:	30 1b       	mov	r11,1
80004b96:	f6 09 09 49 	lsl	r9,r11,r9
80004b9a:	f1 e9 10 09 	or	r9,r8,r9
80004b9e:	95 19       	st.w	r10[0x4],r9
80004ba0:	c4 78       	rjmp	80004c2e <_malloc_r+0x1de>
80004ba2:	f2 0a 16 09 	lsr	r10,r9,0x9
80004ba6:	58 4a       	cp.w	r10,4
80004ba8:	e0 8b 00 08 	brhi	80004bb8 <_malloc_r+0x168>
80004bac:	f2 0a 16 06 	lsr	r10,r9,0x6
80004bb0:	2c 8a       	sub	r10,-56
80004bb2:	c2 18       	rjmp	80004bf4 <_malloc_r+0x1a4>
80004bb4:	00 00       	add	r0,r0
80004bb6:	01 c8       	ld.ub	r8,r0[0x4]
80004bb8:	59 4a       	cp.w	r10,20
80004bba:	e0 8b 00 04 	brhi	80004bc2 <_malloc_r+0x172>
80004bbe:	2a 5a       	sub	r10,-91
80004bc0:	c1 a8       	rjmp	80004bf4 <_malloc_r+0x1a4>
80004bc2:	e0 4a 00 54 	cp.w	r10,84
80004bc6:	e0 8b 00 06 	brhi	80004bd2 <_malloc_r+0x182>
80004bca:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004bce:	29 2a       	sub	r10,-110
80004bd0:	c1 28       	rjmp	80004bf4 <_malloc_r+0x1a4>
80004bd2:	e0 4a 01 54 	cp.w	r10,340
80004bd6:	e0 8b 00 06 	brhi	80004be2 <_malloc_r+0x192>
80004bda:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004bde:	28 9a       	sub	r10,-119
80004be0:	c0 a8       	rjmp	80004bf4 <_malloc_r+0x1a4>
80004be2:	e0 4a 05 54 	cp.w	r10,1364
80004be6:	e0 88 00 04 	brls	80004bee <_malloc_r+0x19e>
80004bea:	37 ea       	mov	r10,126
80004bec:	c0 48       	rjmp	80004bf4 <_malloc_r+0x1a4>
80004bee:	f2 0a 16 12 	lsr	r10,r9,0x12
80004bf2:	28 4a       	sub	r10,-124
80004bf4:	4c 7b       	lddpc	r11,80004d10 <_malloc_r+0x2c0>
80004bf6:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004bfa:	68 28       	ld.w	r8,r4[0x8]
80004bfc:	08 38       	cp.w	r8,r4
80004bfe:	c0 e1       	brne	80004c1a <_malloc_r+0x1ca>
80004c00:	76 19       	ld.w	r9,r11[0x4]
80004c02:	a3 4a       	asr	r10,0x2
80004c04:	30 1e       	mov	lr,1
80004c06:	fc 0a 09 4a 	lsl	r10,lr,r10
80004c0a:	f3 ea 10 0a 	or	r10,r9,r10
80004c0e:	10 99       	mov	r9,r8
80004c10:	97 1a       	st.w	r11[0x4],r10
80004c12:	c0 a8       	rjmp	80004c26 <_malloc_r+0x1d6>
80004c14:	70 28       	ld.w	r8,r8[0x8]
80004c16:	08 38       	cp.w	r8,r4
80004c18:	c0 60       	breq	80004c24 <_malloc_r+0x1d4>
80004c1a:	70 1a       	ld.w	r10,r8[0x4]
80004c1c:	e0 1a ff fc 	andl	r10,0xfffc
80004c20:	14 39       	cp.w	r9,r10
80004c22:	cf 93       	brcs	80004c14 <_malloc_r+0x1c4>
80004c24:	70 39       	ld.w	r9,r8[0xc]
80004c26:	8d 39       	st.w	r6[0xc],r9
80004c28:	8d 28       	st.w	r6[0x8],r8
80004c2a:	91 36       	st.w	r8[0xc],r6
80004c2c:	93 26       	st.w	r9[0x8],r6
80004c2e:	e6 08 14 02 	asr	r8,r3,0x2
80004c32:	30 1b       	mov	r11,1
80004c34:	4b 74       	lddpc	r4,80004d10 <_malloc_r+0x2c0>
80004c36:	f6 08 09 4b 	lsl	r11,r11,r8
80004c3a:	68 18       	ld.w	r8,r4[0x4]
80004c3c:	10 3b       	cp.w	r11,r8
80004c3e:	e0 8b 00 6b 	brhi	80004d14 <_malloc_r+0x2c4>
80004c42:	f7 e8 00 09 	and	r9,r11,r8
80004c46:	c0 b1       	brne	80004c5c <_malloc_r+0x20c>
80004c48:	e0 13 ff fc 	andl	r3,0xfffc
80004c4c:	a1 7b       	lsl	r11,0x1
80004c4e:	2f c3       	sub	r3,-4
80004c50:	c0 38       	rjmp	80004c56 <_malloc_r+0x206>
80004c52:	2f c3       	sub	r3,-4
80004c54:	a1 7b       	lsl	r11,0x1
80004c56:	f7 e8 00 09 	and	r9,r11,r8
80004c5a:	cf c0       	breq	80004c52 <_malloc_r+0x202>
80004c5c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004c60:	06 92       	mov	r2,r3
80004c62:	1c 91       	mov	r1,lr
80004c64:	62 36       	ld.w	r6,r1[0xc]
80004c66:	c2 d8       	rjmp	80004cc0 <_malloc_r+0x270>
80004c68:	6c 1a       	ld.w	r10,r6[0x4]
80004c6a:	e0 1a ff fc 	andl	r10,0xfffc
80004c6e:	f4 07 01 08 	sub	r8,r10,r7
80004c72:	58 f8       	cp.w	r8,15
80004c74:	e0 8a 00 15 	brle	80004c9e <_malloc_r+0x24e>
80004c78:	6c 3a       	ld.w	r10,r6[0xc]
80004c7a:	6c 29       	ld.w	r9,r6[0x8]
80004c7c:	95 29       	st.w	r10[0x8],r9
80004c7e:	93 3a       	st.w	r9[0xc],r10
80004c80:	0e 99       	mov	r9,r7
80004c82:	ec 07 00 07 	add	r7,r6,r7
80004c86:	a1 a9       	sbr	r9,0x0
80004c88:	99 37       	st.w	r12[0xc],r7
80004c8a:	99 27       	st.w	r12[0x8],r7
80004c8c:	8d 19       	st.w	r6[0x4],r9
80004c8e:	ee 08 09 08 	st.w	r7[r8],r8
80004c92:	8f 2c       	st.w	r7[0x8],r12
80004c94:	8f 3c       	st.w	r7[0xc],r12
80004c96:	a1 a8       	sbr	r8,0x0
80004c98:	0a 9c       	mov	r12,r5
80004c9a:	8f 18       	st.w	r7[0x4],r8
80004c9c:	c0 d8       	rjmp	80004cb6 <_malloc_r+0x266>
80004c9e:	6c 39       	ld.w	r9,r6[0xc]
80004ca0:	58 08       	cp.w	r8,0
80004ca2:	c0 e5       	brlt	80004cbe <_malloc_r+0x26e>
80004ca4:	ec 0a 00 0a 	add	r10,r6,r10
80004ca8:	74 18       	ld.w	r8,r10[0x4]
80004caa:	a1 a8       	sbr	r8,0x0
80004cac:	0a 9c       	mov	r12,r5
80004cae:	95 18       	st.w	r10[0x4],r8
80004cb0:	6c 28       	ld.w	r8,r6[0x8]
80004cb2:	93 28       	st.w	r9[0x8],r8
80004cb4:	91 39       	st.w	r8[0xc],r9
80004cb6:	ce 9c       	rcall	80004e88 <__malloc_unlock>
80004cb8:	ec cc ff f8 	sub	r12,r6,-8
80004cbc:	d8 32       	popm	r0-r7,pc
80004cbe:	12 96       	mov	r6,r9
80004cc0:	02 36       	cp.w	r6,r1
80004cc2:	cd 31       	brne	80004c68 <_malloc_r+0x218>
80004cc4:	2f f2       	sub	r2,-1
80004cc6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004cca:	c0 30       	breq	80004cd0 <_malloc_r+0x280>
80004ccc:	2f 81       	sub	r1,-8
80004cce:	cc bb       	rjmp	80004c64 <_malloc_r+0x214>
80004cd0:	1c 98       	mov	r8,lr
80004cd2:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004cd6:	c0 81       	brne	80004ce6 <_malloc_r+0x296>
80004cd8:	68 19       	ld.w	r9,r4[0x4]
80004cda:	f6 08 11 ff 	rsub	r8,r11,-1
80004cde:	f3 e8 00 08 	and	r8,r9,r8
80004ce2:	89 18       	st.w	r4[0x4],r8
80004ce4:	c0 78       	rjmp	80004cf2 <_malloc_r+0x2a2>
80004ce6:	f0 c9 00 08 	sub	r9,r8,8
80004cea:	20 13       	sub	r3,1
80004cec:	70 08       	ld.w	r8,r8[0x0]
80004cee:	12 38       	cp.w	r8,r9
80004cf0:	cf 10       	breq	80004cd2 <_malloc_r+0x282>
80004cf2:	a1 7b       	lsl	r11,0x1
80004cf4:	68 18       	ld.w	r8,r4[0x4]
80004cf6:	10 3b       	cp.w	r11,r8
80004cf8:	e0 8b 00 0e 	brhi	80004d14 <_malloc_r+0x2c4>
80004cfc:	58 0b       	cp.w	r11,0
80004cfe:	c0 b0       	breq	80004d14 <_malloc_r+0x2c4>
80004d00:	04 93       	mov	r3,r2
80004d02:	c0 38       	rjmp	80004d08 <_malloc_r+0x2b8>
80004d04:	2f c3       	sub	r3,-4
80004d06:	a1 7b       	lsl	r11,0x1
80004d08:	f7 e8 00 09 	and	r9,r11,r8
80004d0c:	ca 81       	brne	80004c5c <_malloc_r+0x20c>
80004d0e:	cf bb       	rjmp	80004d04 <_malloc_r+0x2b4>
80004d10:	00 00       	add	r0,r0
80004d12:	01 c8       	ld.ub	r8,r0[0x4]
80004d14:	68 23       	ld.w	r3,r4[0x8]
80004d16:	66 12       	ld.w	r2,r3[0x4]
80004d18:	e0 12 ff fc 	andl	r2,0xfffc
80004d1c:	0e 32       	cp.w	r2,r7
80004d1e:	5f 39       	srlo	r9
80004d20:	e4 07 01 08 	sub	r8,r2,r7
80004d24:	58 f8       	cp.w	r8,15
80004d26:	5f aa       	srle	r10
80004d28:	f5 e9 10 09 	or	r9,r10,r9
80004d2c:	e0 80 00 98 	breq	80004e5c <_malloc_r+0x40c>
80004d30:	4c 68       	lddpc	r8,80004e48 <_malloc_r+0x3f8>
80004d32:	70 01       	ld.w	r1,r8[0x0]
80004d34:	4c 68       	lddpc	r8,80004e4c <_malloc_r+0x3fc>
80004d36:	2f 01       	sub	r1,-16
80004d38:	70 08       	ld.w	r8,r8[0x0]
80004d3a:	0e 01       	add	r1,r7
80004d3c:	5b f8       	cp.w	r8,-1
80004d3e:	c0 40       	breq	80004d46 <_malloc_r+0x2f6>
80004d40:	28 11       	sub	r1,-127
80004d42:	e0 11 ff 80 	andl	r1,0xff80
80004d46:	02 9b       	mov	r11,r1
80004d48:	0a 9c       	mov	r12,r5
80004d4a:	ca 1c       	rcall	80004e8c <_sbrk_r>
80004d4c:	18 96       	mov	r6,r12
80004d4e:	5b fc       	cp.w	r12,-1
80004d50:	c6 d0       	breq	80004e2a <_malloc_r+0x3da>
80004d52:	e6 02 00 08 	add	r8,r3,r2
80004d56:	10 3c       	cp.w	r12,r8
80004d58:	c0 32       	brcc	80004d5e <_malloc_r+0x30e>
80004d5a:	08 33       	cp.w	r3,r4
80004d5c:	c6 71       	brne	80004e2a <_malloc_r+0x3da>
80004d5e:	4b da       	lddpc	r10,80004e50 <_malloc_r+0x400>
80004d60:	74 09       	ld.w	r9,r10[0x0]
80004d62:	e2 09 00 09 	add	r9,r1,r9
80004d66:	95 09       	st.w	r10[0x0],r9
80004d68:	10 36       	cp.w	r6,r8
80004d6a:	c0 a1       	brne	80004d7e <_malloc_r+0x32e>
80004d6c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004d70:	c0 71       	brne	80004d7e <_malloc_r+0x32e>
80004d72:	e2 02 00 02 	add	r2,r1,r2
80004d76:	68 28       	ld.w	r8,r4[0x8]
80004d78:	a1 a2       	sbr	r2,0x0
80004d7a:	91 12       	st.w	r8[0x4],r2
80004d7c:	c4 b8       	rjmp	80004e12 <_malloc_r+0x3c2>
80004d7e:	4b 4a       	lddpc	r10,80004e4c <_malloc_r+0x3fc>
80004d80:	74 0b       	ld.w	r11,r10[0x0]
80004d82:	5b fb       	cp.w	r11,-1
80004d84:	c0 31       	brne	80004d8a <_malloc_r+0x33a>
80004d86:	95 06       	st.w	r10[0x0],r6
80004d88:	c0 68       	rjmp	80004d94 <_malloc_r+0x344>
80004d8a:	ec 09 00 09 	add	r9,r6,r9
80004d8e:	4b 1a       	lddpc	r10,80004e50 <_malloc_r+0x400>
80004d90:	10 19       	sub	r9,r8
80004d92:	95 09       	st.w	r10[0x0],r9
80004d94:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004d98:	f0 09 11 08 	rsub	r9,r8,8
80004d9c:	58 08       	cp.w	r8,0
80004d9e:	f2 08 17 10 	movne	r8,r9
80004da2:	ed d8 e1 06 	addne	r6,r6,r8
80004da6:	28 08       	sub	r8,-128
80004da8:	ec 01 00 01 	add	r1,r6,r1
80004dac:	0a 9c       	mov	r12,r5
80004dae:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004db2:	f0 01 01 01 	sub	r1,r8,r1
80004db6:	02 9b       	mov	r11,r1
80004db8:	c6 ac       	rcall	80004e8c <_sbrk_r>
80004dba:	4a 68       	lddpc	r8,80004e50 <_malloc_r+0x400>
80004dbc:	5b fc       	cp.w	r12,-1
80004dbe:	ec 0c 17 00 	moveq	r12,r6
80004dc2:	f9 b1 00 00 	moveq	r1,0
80004dc6:	70 09       	ld.w	r9,r8[0x0]
80004dc8:	0c 1c       	sub	r12,r6
80004dca:	89 26       	st.w	r4[0x8],r6
80004dcc:	02 0c       	add	r12,r1
80004dce:	12 01       	add	r1,r9
80004dd0:	a1 ac       	sbr	r12,0x0
80004dd2:	91 01       	st.w	r8[0x0],r1
80004dd4:	8d 1c       	st.w	r6[0x4],r12
80004dd6:	08 33       	cp.w	r3,r4
80004dd8:	c1 d0       	breq	80004e12 <_malloc_r+0x3c2>
80004dda:	58 f2       	cp.w	r2,15
80004ddc:	e0 8b 00 05 	brhi	80004de6 <_malloc_r+0x396>
80004de0:	30 18       	mov	r8,1
80004de2:	8d 18       	st.w	r6[0x4],r8
80004de4:	c2 38       	rjmp	80004e2a <_malloc_r+0x3da>
80004de6:	30 59       	mov	r9,5
80004de8:	20 c2       	sub	r2,12
80004dea:	e0 12 ff f8 	andl	r2,0xfff8
80004dee:	e6 02 00 08 	add	r8,r3,r2
80004df2:	91 29       	st.w	r8[0x8],r9
80004df4:	91 19       	st.w	r8[0x4],r9
80004df6:	66 18       	ld.w	r8,r3[0x4]
80004df8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004dfc:	e5 e8 10 08 	or	r8,r2,r8
80004e00:	87 18       	st.w	r3[0x4],r8
80004e02:	58 f2       	cp.w	r2,15
80004e04:	e0 88 00 07 	brls	80004e12 <_malloc_r+0x3c2>
80004e08:	e6 cb ff f8 	sub	r11,r3,-8
80004e0c:	0a 9c       	mov	r12,r5
80004e0e:	fe b0 fd 2d 	rcall	80004868 <_free_r>
80004e12:	49 19       	lddpc	r9,80004e54 <_malloc_r+0x404>
80004e14:	72 0a       	ld.w	r10,r9[0x0]
80004e16:	48 f8       	lddpc	r8,80004e50 <_malloc_r+0x400>
80004e18:	70 08       	ld.w	r8,r8[0x0]
80004e1a:	14 38       	cp.w	r8,r10
80004e1c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004e20:	48 e9       	lddpc	r9,80004e58 <_malloc_r+0x408>
80004e22:	72 0a       	ld.w	r10,r9[0x0]
80004e24:	14 38       	cp.w	r8,r10
80004e26:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004e2a:	68 28       	ld.w	r8,r4[0x8]
80004e2c:	70 18       	ld.w	r8,r8[0x4]
80004e2e:	e0 18 ff fc 	andl	r8,0xfffc
80004e32:	0e 38       	cp.w	r8,r7
80004e34:	5f 39       	srlo	r9
80004e36:	0e 18       	sub	r8,r7
80004e38:	58 f8       	cp.w	r8,15
80004e3a:	5f aa       	srle	r10
80004e3c:	f5 e9 10 09 	or	r9,r10,r9
80004e40:	c0 e0       	breq	80004e5c <_malloc_r+0x40c>
80004e42:	0a 9c       	mov	r12,r5
80004e44:	c2 2c       	rcall	80004e88 <__malloc_unlock>
80004e46:	d8 3a       	popm	r0-r7,pc,r12=0
80004e48:	00 00       	add	r0,r0
80004e4a:	0c 74       	tst	r4,r6
80004e4c:	00 00       	add	r0,r0
80004e4e:	05 d4       	ld.ub	r4,r2[0x5]
80004e50:	00 00       	add	r0,r0
80004e52:	0c 78       	tst	r8,r6
80004e54:	00 00       	add	r0,r0
80004e56:	0c 70       	tst	r0,r6
80004e58:	00 00       	add	r0,r0
80004e5a:	0c 6c       	and	r12,r6
80004e5c:	68 26       	ld.w	r6,r4[0x8]
80004e5e:	a1 a8       	sbr	r8,0x0
80004e60:	0e 99       	mov	r9,r7
80004e62:	a1 a9       	sbr	r9,0x0
80004e64:	8d 19       	st.w	r6[0x4],r9
80004e66:	ec 07 00 07 	add	r7,r6,r7
80004e6a:	0a 9c       	mov	r12,r5
80004e6c:	89 27       	st.w	r4[0x8],r7
80004e6e:	8f 18       	st.w	r7[0x4],r8
80004e70:	c0 cc       	rcall	80004e88 <__malloc_unlock>
80004e72:	ec cc ff f8 	sub	r12,r6,-8
80004e76:	d8 32       	popm	r0-r7,pc

80004e78 <memset>:
80004e78:	18 98       	mov	r8,r12
80004e7a:	c0 38       	rjmp	80004e80 <memset+0x8>
80004e7c:	10 cb       	st.b	r8++,r11
80004e7e:	20 1a       	sub	r10,1
80004e80:	58 0a       	cp.w	r10,0
80004e82:	cf d1       	brne	80004e7c <memset+0x4>
80004e84:	5e fc       	retal	r12

80004e86 <__malloc_lock>:
80004e86:	5e fc       	retal	r12

80004e88 <__malloc_unlock>:
80004e88:	5e fc       	retal	r12
80004e8a:	d7 03       	nop

80004e8c <_sbrk_r>:
80004e8c:	d4 21       	pushm	r4-r7,lr
80004e8e:	30 08       	mov	r8,0
80004e90:	18 97       	mov	r7,r12
80004e92:	48 66       	lddpc	r6,80004ea8 <_sbrk_r+0x1c>
80004e94:	16 9c       	mov	r12,r11
80004e96:	8d 08       	st.w	r6[0x0],r8
80004e98:	c5 ac       	rcall	80004f4c <_sbrk>
80004e9a:	5b fc       	cp.w	r12,-1
80004e9c:	c0 51       	brne	80004ea6 <_sbrk_r+0x1a>
80004e9e:	6c 08       	ld.w	r8,r6[0x0]
80004ea0:	58 08       	cp.w	r8,0
80004ea2:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004ea6:	d8 22       	popm	r4-r7,pc
80004ea8:	00 00       	add	r0,r0
80004eaa:	0c d0       	st.w	--r6,r0

80004eac <__sclose>:
80004eac:	d4 01       	pushm	lr
80004eae:	96 7b       	ld.sh	r11,r11[0xe]
80004eb0:	c8 0c       	rcall	80004fb0 <_close_r>
80004eb2:	d8 02       	popm	pc

80004eb4 <__sseek>:
80004eb4:	d4 21       	pushm	r4-r7,lr
80004eb6:	16 97       	mov	r7,r11
80004eb8:	96 7b       	ld.sh	r11,r11[0xe]
80004eba:	cf 7c       	rcall	800050a8 <_lseek_r>
80004ebc:	8e 68       	ld.sh	r8,r7[0xc]
80004ebe:	10 99       	mov	r9,r8
80004ec0:	ad c8       	cbr	r8,0xc
80004ec2:	ad a9       	sbr	r9,0xc
80004ec4:	5b fc       	cp.w	r12,-1
80004ec6:	ef f8 0c 06 	st.heq	r7[0xc],r8
80004eca:	ef f9 1c 06 	st.hne	r7[0xc],r9
80004ece:	ef fc 1a 15 	st.wne	r7[0x54],r12
80004ed2:	d8 22       	popm	r4-r7,pc

80004ed4 <__swrite>:
80004ed4:	d4 21       	pushm	r4-r7,lr
80004ed6:	96 68       	ld.sh	r8,r11[0xc]
80004ed8:	16 97       	mov	r7,r11
80004eda:	14 95       	mov	r5,r10
80004edc:	12 94       	mov	r4,r9
80004ede:	e2 18 01 00 	andl	r8,0x100,COH
80004ee2:	18 96       	mov	r6,r12
80004ee4:	c0 50       	breq	80004eee <__swrite+0x1a>
80004ee6:	30 29       	mov	r9,2
80004ee8:	30 0a       	mov	r10,0
80004eea:	96 7b       	ld.sh	r11,r11[0xe]
80004eec:	cd ec       	rcall	800050a8 <_lseek_r>
80004eee:	8e 68       	ld.sh	r8,r7[0xc]
80004ef0:	ad c8       	cbr	r8,0xc
80004ef2:	08 99       	mov	r9,r4
80004ef4:	0a 9a       	mov	r10,r5
80004ef6:	8e 7b       	ld.sh	r11,r7[0xe]
80004ef8:	0c 9c       	mov	r12,r6
80004efa:	ae 68       	st.h	r7[0xc],r8
80004efc:	c4 6c       	rcall	80004f88 <_write_r>
80004efe:	d8 22       	popm	r4-r7,pc

80004f00 <__sread>:
80004f00:	d4 21       	pushm	r4-r7,lr
80004f02:	16 97       	mov	r7,r11
80004f04:	96 7b       	ld.sh	r11,r11[0xe]
80004f06:	ce 5c       	rcall	800050d0 <_read_r>
80004f08:	c0 65       	brlt	80004f14 <__sread+0x14>
80004f0a:	6f 58       	ld.w	r8,r7[0x54]
80004f0c:	18 08       	add	r8,r12
80004f0e:	ef 48 00 54 	st.w	r7[84],r8
80004f12:	d8 22       	popm	r4-r7,pc
80004f14:	8e 68       	ld.sh	r8,r7[0xc]
80004f16:	ad c8       	cbr	r8,0xc
80004f18:	ae 68       	st.h	r7[0xc],r8
80004f1a:	d8 22       	popm	r4-r7,pc

80004f1c <_close>:
80004f1c:	30 28       	mov	r8,2
80004f1e:	d6 73       	breakpoint
80004f20:	3f fc       	mov	r12,-1
80004f22:	35 8b       	mov	r11,88
80004f24:	58 0c       	cp.w	r12,0
80004f26:	5e 4c       	retge	r12
80004f28:	48 2a       	lddpc	r10,80004f30 <_close+0x14>
80004f2a:	95 0b       	st.w	r10[0x0],r11
80004f2c:	5e fc       	retal	r12
80004f2e:	d7 03       	nop
80004f30:	00 00       	add	r0,r0
80004f32:	0c d0       	st.w	--r6,r0

80004f34 <_lseek>:
80004f34:	30 58       	mov	r8,5
80004f36:	d6 73       	breakpoint
80004f38:	3f fc       	mov	r12,-1
80004f3a:	35 8b       	mov	r11,88
80004f3c:	58 0c       	cp.w	r12,0
80004f3e:	5e 4c       	retge	r12
80004f40:	48 2a       	lddpc	r10,80004f48 <_lseek+0x14>
80004f42:	95 0b       	st.w	r10[0x0],r11
80004f44:	5e fc       	retal	r12
80004f46:	d7 03       	nop
80004f48:	00 00       	add	r0,r0
80004f4a:	0c d0       	st.w	--r6,r0

80004f4c <_sbrk>:
80004f4c:	d4 01       	pushm	lr
80004f4e:	48 c8       	lddpc	r8,80004f7c <_sbrk+0x30>
80004f50:	70 09       	ld.w	r9,r8[0x0]
80004f52:	58 09       	cp.w	r9,0
80004f54:	c0 31       	brne	80004f5a <_sbrk+0xe>
80004f56:	48 b9       	lddpc	r9,80004f80 <_sbrk+0x34>
80004f58:	91 09       	st.w	r8[0x0],r9
80004f5a:	48 99       	lddpc	r9,80004f7c <_sbrk+0x30>
80004f5c:	48 aa       	lddpc	r10,80004f84 <_sbrk+0x38>
80004f5e:	72 08       	ld.w	r8,r9[0x0]
80004f60:	f0 0c 00 0c 	add	r12,r8,r12
80004f64:	14 3c       	cp.w	r12,r10
80004f66:	e0 8b 00 04 	brhi	80004f6e <_sbrk+0x22>
80004f6a:	93 0c       	st.w	r9[0x0],r12
80004f6c:	c0 58       	rjmp	80004f76 <_sbrk+0x2a>
80004f6e:	c3 1c       	rcall	80004fd0 <__errno>
80004f70:	30 c8       	mov	r8,12
80004f72:	99 08       	st.w	r12[0x0],r8
80004f74:	3f f8       	mov	r8,-1
80004f76:	10 9c       	mov	r12,r8
80004f78:	d8 02       	popm	pc
80004f7a:	d7 03       	nop
80004f7c:	00 00       	add	r0,r0
80004f7e:	0c a0       	st.w	r6++,r0
80004f80:	00 00       	add	r0,r0
80004f82:	0c d8       	st.w	--r6,r8
80004f84:	00 00       	add	r0,r0
80004f86:	f0 00       	*unknown*

80004f88 <_write_r>:
80004f88:	d4 21       	pushm	r4-r7,lr
80004f8a:	16 98       	mov	r8,r11
80004f8c:	18 97       	mov	r7,r12
80004f8e:	10 9c       	mov	r12,r8
80004f90:	30 08       	mov	r8,0
80004f92:	14 9b       	mov	r11,r10
80004f94:	48 66       	lddpc	r6,80004fac <_write_r+0x24>
80004f96:	12 9a       	mov	r10,r9
80004f98:	8d 08       	st.w	r6[0x0],r8
80004f9a:	fe b0 f8 31 	rcall	80003ffc <_write>
80004f9e:	5b fc       	cp.w	r12,-1
80004fa0:	c0 51       	brne	80004faa <_write_r+0x22>
80004fa2:	6c 08       	ld.w	r8,r6[0x0]
80004fa4:	58 08       	cp.w	r8,0
80004fa6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004faa:	d8 22       	popm	r4-r7,pc
80004fac:	00 00       	add	r0,r0
80004fae:	0c d0       	st.w	--r6,r0

80004fb0 <_close_r>:
80004fb0:	d4 21       	pushm	r4-r7,lr
80004fb2:	30 08       	mov	r8,0
80004fb4:	18 97       	mov	r7,r12
80004fb6:	48 66       	lddpc	r6,80004fcc <_close_r+0x1c>
80004fb8:	16 9c       	mov	r12,r11
80004fba:	8d 08       	st.w	r6[0x0],r8
80004fbc:	cb 0f       	rcall	80004f1c <_close>
80004fbe:	5b fc       	cp.w	r12,-1
80004fc0:	c0 51       	brne	80004fca <_close_r+0x1a>
80004fc2:	6c 08       	ld.w	r8,r6[0x0]
80004fc4:	58 08       	cp.w	r8,0
80004fc6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004fca:	d8 22       	popm	r4-r7,pc
80004fcc:	00 00       	add	r0,r0
80004fce:	0c d0       	st.w	--r6,r0

80004fd0 <__errno>:
80004fd0:	48 28       	lddpc	r8,80004fd8 <__errno+0x8>
80004fd2:	70 0c       	ld.w	r12,r8[0x0]
80004fd4:	2f 4c       	sub	r12,-12
80004fd6:	5e fc       	retal	r12
80004fd8:	00 00       	add	r0,r0
80004fda:	01 c4       	ld.ub	r4,r0[0x4]

80004fdc <_fclose_r>:
80004fdc:	d4 21       	pushm	r4-r7,lr
80004fde:	18 96       	mov	r6,r12
80004fe0:	16 97       	mov	r7,r11
80004fe2:	58 0b       	cp.w	r11,0
80004fe4:	c0 31       	brne	80004fea <_fclose_r+0xe>
80004fe6:	16 95       	mov	r5,r11
80004fe8:	c5 08       	rjmp	80005088 <_fclose_r+0xac>
80004fea:	fe b0 fb 4f 	rcall	80004688 <__sfp_lock_acquire>
80004fee:	58 06       	cp.w	r6,0
80004ff0:	c0 70       	breq	80004ffe <_fclose_r+0x22>
80004ff2:	6c 68       	ld.w	r8,r6[0x18]
80004ff4:	58 08       	cp.w	r8,0
80004ff6:	c0 41       	brne	80004ffe <_fclose_r+0x22>
80004ff8:	0c 9c       	mov	r12,r6
80004ffa:	fe b0 fb 9b 	rcall	80004730 <__sinit>
80004ffe:	4a 48       	lddpc	r8,8000508c <_fclose_r+0xb0>
80005000:	10 37       	cp.w	r7,r8
80005002:	c0 31       	brne	80005008 <_fclose_r+0x2c>
80005004:	6c 07       	ld.w	r7,r6[0x0]
80005006:	c0 a8       	rjmp	8000501a <_fclose_r+0x3e>
80005008:	4a 28       	lddpc	r8,80005090 <_fclose_r+0xb4>
8000500a:	10 37       	cp.w	r7,r8
8000500c:	c0 31       	brne	80005012 <_fclose_r+0x36>
8000500e:	6c 17       	ld.w	r7,r6[0x4]
80005010:	c0 58       	rjmp	8000501a <_fclose_r+0x3e>
80005012:	4a 18       	lddpc	r8,80005094 <_fclose_r+0xb8>
80005014:	10 37       	cp.w	r7,r8
80005016:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000501a:	8e 69       	ld.sh	r9,r7[0xc]
8000501c:	30 08       	mov	r8,0
8000501e:	f0 09 19 00 	cp.h	r9,r8
80005022:	c0 51       	brne	8000502c <_fclose_r+0x50>
80005024:	fe b0 fb 33 	rcall	8000468a <__sfp_lock_release>
80005028:	30 05       	mov	r5,0
8000502a:	c2 f8       	rjmp	80005088 <_fclose_r+0xac>
8000502c:	0e 9b       	mov	r11,r7
8000502e:	0c 9c       	mov	r12,r6
80005030:	fe b0 fa a4 	rcall	80004578 <_fflush_r>
80005034:	6e c8       	ld.w	r8,r7[0x30]
80005036:	18 95       	mov	r5,r12
80005038:	58 08       	cp.w	r8,0
8000503a:	c0 60       	breq	80005046 <_fclose_r+0x6a>
8000503c:	6e 8b       	ld.w	r11,r7[0x20]
8000503e:	0c 9c       	mov	r12,r6
80005040:	5d 18       	icall	r8
80005042:	f9 b5 05 ff 	movlt	r5,-1
80005046:	8e 68       	ld.sh	r8,r7[0xc]
80005048:	ed b8 00 07 	bld	r8,0x7
8000504c:	c0 51       	brne	80005056 <_fclose_r+0x7a>
8000504e:	6e 4b       	ld.w	r11,r7[0x10]
80005050:	0c 9c       	mov	r12,r6
80005052:	fe b0 fc 0b 	rcall	80004868 <_free_r>
80005056:	6e db       	ld.w	r11,r7[0x34]
80005058:	58 0b       	cp.w	r11,0
8000505a:	c0 a0       	breq	8000506e <_fclose_r+0x92>
8000505c:	ee c8 ff bc 	sub	r8,r7,-68
80005060:	10 3b       	cp.w	r11,r8
80005062:	c0 40       	breq	8000506a <_fclose_r+0x8e>
80005064:	0c 9c       	mov	r12,r6
80005066:	fe b0 fc 01 	rcall	80004868 <_free_r>
8000506a:	30 08       	mov	r8,0
8000506c:	8f d8       	st.w	r7[0x34],r8
8000506e:	6f 2b       	ld.w	r11,r7[0x48]
80005070:	58 0b       	cp.w	r11,0
80005072:	c0 70       	breq	80005080 <_fclose_r+0xa4>
80005074:	0c 9c       	mov	r12,r6
80005076:	fe b0 fb f9 	rcall	80004868 <_free_r>
8000507a:	30 08       	mov	r8,0
8000507c:	ef 48 00 48 	st.w	r7[72],r8
80005080:	30 08       	mov	r8,0
80005082:	ae 68       	st.h	r7[0xc],r8
80005084:	fe b0 fb 03 	rcall	8000468a <__sfp_lock_release>
80005088:	0a 9c       	mov	r12,r5
8000508a:	d8 22       	popm	r4-r7,pc
8000508c:	80 00       	ld.sh	r0,r0[0x0]
8000508e:	54 f8       	stdsp	sp[0x13c],r8
80005090:	80 00       	ld.sh	r0,r0[0x0]
80005092:	55 18       	stdsp	sp[0x144],r8
80005094:	80 00       	ld.sh	r0,r0[0x0]
80005096:	55 38       	stdsp	sp[0x14c],r8

80005098 <fclose>:
80005098:	d4 01       	pushm	lr
8000509a:	48 38       	lddpc	r8,800050a4 <fclose+0xc>
8000509c:	18 9b       	mov	r11,r12
8000509e:	70 0c       	ld.w	r12,r8[0x0]
800050a0:	c9 ef       	rcall	80004fdc <_fclose_r>
800050a2:	d8 02       	popm	pc
800050a4:	00 00       	add	r0,r0
800050a6:	01 c4       	ld.ub	r4,r0[0x4]

800050a8 <_lseek_r>:
800050a8:	d4 21       	pushm	r4-r7,lr
800050aa:	16 98       	mov	r8,r11
800050ac:	18 97       	mov	r7,r12
800050ae:	10 9c       	mov	r12,r8
800050b0:	30 08       	mov	r8,0
800050b2:	14 9b       	mov	r11,r10
800050b4:	48 66       	lddpc	r6,800050cc <_lseek_r+0x24>
800050b6:	12 9a       	mov	r10,r9
800050b8:	8d 08       	st.w	r6[0x0],r8
800050ba:	c3 df       	rcall	80004f34 <_lseek>
800050bc:	5b fc       	cp.w	r12,-1
800050be:	c0 51       	brne	800050c8 <_lseek_r+0x20>
800050c0:	6c 08       	ld.w	r8,r6[0x0]
800050c2:	58 08       	cp.w	r8,0
800050c4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800050c8:	d8 22       	popm	r4-r7,pc
800050ca:	d7 03       	nop
800050cc:	00 00       	add	r0,r0
800050ce:	0c d0       	st.w	--r6,r0

800050d0 <_read_r>:
800050d0:	d4 21       	pushm	r4-r7,lr
800050d2:	16 98       	mov	r8,r11
800050d4:	18 97       	mov	r7,r12
800050d6:	10 9c       	mov	r12,r8
800050d8:	30 08       	mov	r8,0
800050da:	14 9b       	mov	r11,r10
800050dc:	48 66       	lddpc	r6,800050f4 <_read_r+0x24>
800050de:	12 9a       	mov	r10,r9
800050e0:	8d 08       	st.w	r6[0x0],r8
800050e2:	fe b0 f6 ff 	rcall	80003ee0 <_read>
800050e6:	5b fc       	cp.w	r12,-1
800050e8:	c0 51       	brne	800050f2 <_read_r+0x22>
800050ea:	6c 08       	ld.w	r8,r6[0x0]
800050ec:	58 08       	cp.w	r8,0
800050ee:	ef f8 1a 03 	st.wne	r7[0xc],r8
800050f2:	d8 22       	popm	r4-r7,pc
800050f4:	00 00       	add	r0,r0
800050f6:	0c d0       	st.w	--r6,r0

Disassembly of section .exception:

80005200 <_evba>:
80005200:	c0 08       	rjmp	80005200 <_evba>
	...

80005204 <_handle_TLB_Multiple_Hit>:
80005204:	c0 08       	rjmp	80005204 <_handle_TLB_Multiple_Hit>
	...

80005208 <_handle_Bus_Error_Data_Fetch>:
80005208:	c0 08       	rjmp	80005208 <_handle_Bus_Error_Data_Fetch>
	...

8000520c <_handle_Bus_Error_Instruction_Fetch>:
8000520c:	c0 08       	rjmp	8000520c <_handle_Bus_Error_Instruction_Fetch>
	...

80005210 <_handle_NMI>:
80005210:	c0 08       	rjmp	80005210 <_handle_NMI>
	...

80005214 <_handle_Instruction_Address>:
80005214:	c0 08       	rjmp	80005214 <_handle_Instruction_Address>
	...

80005218 <_handle_ITLB_Protection>:
80005218:	c0 08       	rjmp	80005218 <_handle_ITLB_Protection>
	...

8000521c <_handle_Breakpoint>:
8000521c:	c0 08       	rjmp	8000521c <_handle_Breakpoint>
	...

80005220 <_handle_Illegal_Opcode>:
80005220:	c0 08       	rjmp	80005220 <_handle_Illegal_Opcode>
	...

80005224 <_handle_Unimplemented_Instruction>:
80005224:	c0 08       	rjmp	80005224 <_handle_Unimplemented_Instruction>
	...

80005228 <_handle_Privilege_Violation>:
80005228:	c0 08       	rjmp	80005228 <_handle_Privilege_Violation>
	...

8000522c <_handle_Floating_Point>:
8000522c:	c0 08       	rjmp	8000522c <_handle_Floating_Point>
	...

80005230 <_handle_Coprocessor_Absent>:
80005230:	c0 08       	rjmp	80005230 <_handle_Coprocessor_Absent>
	...

80005234 <_handle_Data_Address_Read>:
80005234:	c0 08       	rjmp	80005234 <_handle_Data_Address_Read>
	...

80005238 <_handle_Data_Address_Write>:
80005238:	c0 08       	rjmp	80005238 <_handle_Data_Address_Write>
	...

8000523c <_handle_DTLB_Protection_Read>:
8000523c:	c0 08       	rjmp	8000523c <_handle_DTLB_Protection_Read>
	...

80005240 <_handle_DTLB_Protection_Write>:
80005240:	c0 08       	rjmp	80005240 <_handle_DTLB_Protection_Write>
	...

80005244 <_handle_DTLB_Modified>:
80005244:	c0 08       	rjmp	80005244 <_handle_DTLB_Modified>
	...

80005250 <_handle_ITLB_Miss>:
80005250:	c0 08       	rjmp	80005250 <_handle_ITLB_Miss>
	...

80005260 <_handle_DTLB_Miss_Read>:
80005260:	c0 08       	rjmp	80005260 <_handle_DTLB_Miss_Read>
	...

80005270 <_handle_DTLB_Miss_Write>:
80005270:	c0 08       	rjmp	80005270 <_handle_DTLB_Miss_Write>
	...

80005300 <_handle_Supervisor_Call>:
80005300:	c0 08       	rjmp	80005300 <_handle_Supervisor_Call>
80005302:	d7 03       	nop

80005304 <_int0>:
80005304:	30 0c       	mov	r12,0
80005306:	fe b0 e7 e9 	rcall	800022d8 <_get_interrupt_handler>
8000530a:	58 0c       	cp.w	r12,0
8000530c:	f8 0f 17 10 	movne	pc,r12
80005310:	d6 03       	rete

80005312 <_int1>:
80005312:	30 1c       	mov	r12,1
80005314:	fe b0 e7 e2 	rcall	800022d8 <_get_interrupt_handler>
80005318:	58 0c       	cp.w	r12,0
8000531a:	f8 0f 17 10 	movne	pc,r12
8000531e:	d6 03       	rete

80005320 <_int2>:
80005320:	30 2c       	mov	r12,2
80005322:	fe b0 e7 db 	rcall	800022d8 <_get_interrupt_handler>
80005326:	58 0c       	cp.w	r12,0
80005328:	f8 0f 17 10 	movne	pc,r12
8000532c:	d6 03       	rete

8000532e <_int3>:
8000532e:	30 3c       	mov	r12,3
80005330:	fe b0 e7 d4 	rcall	800022d8 <_get_interrupt_handler>
80005334:	58 0c       	cp.w	r12,0
80005336:	f8 0f 17 10 	movne	pc,r12
8000533a:	d6 03       	rete

8000533c <ipr_val>:
8000533c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000534c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000535c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000536c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000537c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000538c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000539c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800053ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800053bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800053cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800053dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800053ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800053fc:	d7 03 d7 03                                         ....
